// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ComputePolicyPropertiesData : ComputePolicyPropertiesProtocol {
    public var objectId: String?
    public var objectType: AADObjectTypeEnum?
    public var maxDegreeOfParallelismPerJob: Int32?
    public var minPriorityPerJob: Int32?

        enum CodingKeys: String, CodingKey {case objectId = "objectId"
        case objectType = "objectType"
        case maxDegreeOfParallelismPerJob = "maxDegreeOfParallelismPerJob"
        case minPriorityPerJob = "minPriorityPerJob"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.objectId) {
        self.objectId = try container.decode(String?.self, forKey: .objectId)
    }
    if container.contains(.objectType) {
        self.objectType = try container.decode(AADObjectTypeEnum?.self, forKey: .objectType)
    }
    if container.contains(.maxDegreeOfParallelismPerJob) {
        self.maxDegreeOfParallelismPerJob = try container.decode(Int32?.self, forKey: .maxDegreeOfParallelismPerJob)
    }
    if container.contains(.minPriorityPerJob) {
        self.minPriorityPerJob = try container.decode(Int32?.self, forKey: .minPriorityPerJob)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.objectId != nil {try container.encode(self.objectId, forKey: .objectId)}
    if self.objectType != nil {try container.encode(self.objectType, forKey: .objectType)}
    if self.maxDegreeOfParallelismPerJob != nil {try container.encode(self.maxDegreeOfParallelismPerJob, forKey: .maxDegreeOfParallelismPerJob)}
    if self.minPriorityPerJob != nil {try container.encode(self.minPriorityPerJob, forKey: .minPriorityPerJob)}
  }
}

extension DataFactory {
  public static func createComputePolicyPropertiesProtocol() -> ComputePolicyPropertiesProtocol {
    return ComputePolicyPropertiesData()
  }
}
