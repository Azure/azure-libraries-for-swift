// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UpdateDataLakeAnalyticsAccountPropertiesData : UpdateDataLakeAnalyticsAccountPropertiesProtocol {
    public var dataLakeStoreAccounts: [UpdateDataLakeStoreWithAccountParametersProtocol?]?
    public var storageAccounts: [UpdateStorageAccountWithAccountParametersProtocol?]?
    public var computePolicies: [UpdateComputePolicyWithAccountParametersProtocol?]?
    public var firewallRules: [UpdateFirewallRuleWithAccountParametersProtocol?]?
    public var firewallState: FirewallStateEnum?
    public var firewallAllowAzureIps: FirewallAllowAzureIpsStateEnum?
    public var newTier: TierTypeEnum?
    public var maxJobCount: Int32?
    public var maxDegreeOfParallelism: Int32?
    public var maxDegreeOfParallelismPerJob: Int32?
    public var minPriorityPerJob: Int32?
    public var queryStoreRetention: Int32?

        enum CodingKeys: String, CodingKey {case dataLakeStoreAccounts = "dataLakeStoreAccounts"
        case storageAccounts = "storageAccounts"
        case computePolicies = "computePolicies"
        case firewallRules = "firewallRules"
        case firewallState = "firewallState"
        case firewallAllowAzureIps = "firewallAllowAzureIps"
        case newTier = "newTier"
        case maxJobCount = "maxJobCount"
        case maxDegreeOfParallelism = "maxDegreeOfParallelism"
        case maxDegreeOfParallelismPerJob = "maxDegreeOfParallelismPerJob"
        case minPriorityPerJob = "minPriorityPerJob"
        case queryStoreRetention = "queryStoreRetention"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.dataLakeStoreAccounts) {
        self.dataLakeStoreAccounts = try container.decode([UpdateDataLakeStoreWithAccountParametersData?]?.self, forKey: .dataLakeStoreAccounts)
    }
    if container.contains(.storageAccounts) {
        self.storageAccounts = try container.decode([UpdateStorageAccountWithAccountParametersData?]?.self, forKey: .storageAccounts)
    }
    if container.contains(.computePolicies) {
        self.computePolicies = try container.decode([UpdateComputePolicyWithAccountParametersData?]?.self, forKey: .computePolicies)
    }
    if container.contains(.firewallRules) {
        self.firewallRules = try container.decode([UpdateFirewallRuleWithAccountParametersData?]?.self, forKey: .firewallRules)
    }
    if container.contains(.firewallState) {
        self.firewallState = try container.decode(FirewallStateEnum?.self, forKey: .firewallState)
    }
    if container.contains(.firewallAllowAzureIps) {
        self.firewallAllowAzureIps = try container.decode(FirewallAllowAzureIpsStateEnum?.self, forKey: .firewallAllowAzureIps)
    }
    if container.contains(.newTier) {
        self.newTier = try container.decode(TierTypeEnum?.self, forKey: .newTier)
    }
    if container.contains(.maxJobCount) {
        self.maxJobCount = try container.decode(Int32?.self, forKey: .maxJobCount)
    }
    if container.contains(.maxDegreeOfParallelism) {
        self.maxDegreeOfParallelism = try container.decode(Int32?.self, forKey: .maxDegreeOfParallelism)
    }
    if container.contains(.maxDegreeOfParallelismPerJob) {
        self.maxDegreeOfParallelismPerJob = try container.decode(Int32?.self, forKey: .maxDegreeOfParallelismPerJob)
    }
    if container.contains(.minPriorityPerJob) {
        self.minPriorityPerJob = try container.decode(Int32?.self, forKey: .minPriorityPerJob)
    }
    if container.contains(.queryStoreRetention) {
        self.queryStoreRetention = try container.decode(Int32?.self, forKey: .queryStoreRetention)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.dataLakeStoreAccounts != nil {try container.encode(self.dataLakeStoreAccounts as! [UpdateDataLakeStoreWithAccountParametersData?]?, forKey: .dataLakeStoreAccounts)}
    if self.storageAccounts != nil {try container.encode(self.storageAccounts as! [UpdateStorageAccountWithAccountParametersData?]?, forKey: .storageAccounts)}
    if self.computePolicies != nil {try container.encode(self.computePolicies as! [UpdateComputePolicyWithAccountParametersData?]?, forKey: .computePolicies)}
    if self.firewallRules != nil {try container.encode(self.firewallRules as! [UpdateFirewallRuleWithAccountParametersData?]?, forKey: .firewallRules)}
    if self.firewallState != nil {try container.encode(self.firewallState, forKey: .firewallState)}
    if self.firewallAllowAzureIps != nil {try container.encode(self.firewallAllowAzureIps, forKey: .firewallAllowAzureIps)}
    if self.newTier != nil {try container.encode(self.newTier, forKey: .newTier)}
    if self.maxJobCount != nil {try container.encode(self.maxJobCount, forKey: .maxJobCount)}
    if self.maxDegreeOfParallelism != nil {try container.encode(self.maxDegreeOfParallelism, forKey: .maxDegreeOfParallelism)}
    if self.maxDegreeOfParallelismPerJob != nil {try container.encode(self.maxDegreeOfParallelismPerJob, forKey: .maxDegreeOfParallelismPerJob)}
    if self.minPriorityPerJob != nil {try container.encode(self.minPriorityPerJob, forKey: .minPriorityPerJob)}
    if self.queryStoreRetention != nil {try container.encode(self.queryStoreRetention, forKey: .queryStoreRetention)}
  }
}

extension DataFactory {
  public static func createUpdateDataLakeAnalyticsAccountPropertiesProtocol() -> UpdateDataLakeAnalyticsAccountPropertiesProtocol {
    return UpdateDataLakeAnalyticsAccountPropertiesData()
  }
}
