// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DataLakeAnalyticsAccountPropertiesBasicData : DataLakeAnalyticsAccountPropertiesBasicProtocol {
    public var accountId: String?
    public var provisioningState: DataLakeAnalyticsAccountStatusEnum?
    public var state: DataLakeAnalyticsAccountStateEnum?
    public var creationTime: Date?
    public var lastModifiedTime: Date?
    public var endpoint: String?

        enum CodingKeys: String, CodingKey {case accountId = "accountId"
        case provisioningState = "provisioningState"
        case state = "state"
        case creationTime = "creationTime"
        case lastModifiedTime = "lastModifiedTime"
        case endpoint = "endpoint"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.accountId) {
        self.accountId = try container.decode(String?.self, forKey: .accountId)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(DataLakeAnalyticsAccountStatusEnum?.self, forKey: .provisioningState)
    }
    if container.contains(.state) {
        self.state = try container.decode(DataLakeAnalyticsAccountStateEnum?.self, forKey: .state)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.lastModifiedTime) {
        self.lastModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTime)), format: .dateTime)
    }
    if container.contains(.endpoint) {
        self.endpoint = try container.decode(String?.self, forKey: .endpoint)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.accountId != nil {try container.encode(self.accountId, forKey: .accountId)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.lastModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTime!, format: .dateTime), forKey: .lastModifiedTime)
    }
    if self.endpoint != nil {try container.encode(self.endpoint, forKey: .endpoint)}
  }
}

extension DataFactory {
  public static func createDataLakeAnalyticsAccountPropertiesBasicProtocol() -> DataLakeAnalyticsAccountPropertiesBasicProtocol {
    return DataLakeAnalyticsAccountPropertiesBasicData()
  }
}
