// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CapabilityInformationData : CapabilityInformationProtocol {
    public var subscriptionId: String?
    public var state: SubscriptionStateEnum?
    public var maxAccountCount: Int32?
    public var accountCount: Int32?
    public var migrationState: Bool?

        enum CodingKeys: String, CodingKey {case subscriptionId = "subscriptionId"
        case state = "state"
        case maxAccountCount = "maxAccountCount"
        case accountCount = "accountCount"
        case migrationState = "migrationState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.subscriptionId) {
        self.subscriptionId = try container.decode(String?.self, forKey: .subscriptionId)
    }
    if container.contains(.state) {
        self.state = try container.decode(SubscriptionStateEnum?.self, forKey: .state)
    }
    if container.contains(.maxAccountCount) {
        self.maxAccountCount = try container.decode(Int32?.self, forKey: .maxAccountCount)
    }
    if container.contains(.accountCount) {
        self.accountCount = try container.decode(Int32?.self, forKey: .accountCount)
    }
    if container.contains(.migrationState) {
        self.migrationState = try container.decode(Bool?.self, forKey: .migrationState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.subscriptionId != nil {try container.encode(self.subscriptionId, forKey: .subscriptionId)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.maxAccountCount != nil {try container.encode(self.maxAccountCount, forKey: .maxAccountCount)}
    if self.accountCount != nil {try container.encode(self.accountCount, forKey: .accountCount)}
    if self.migrationState != nil {try container.encode(self.migrationState, forKey: .migrationState)}
  }
}

extension DataFactory {
  public static func createCapabilityInformationProtocol() -> CapabilityInformationProtocol {
    return CapabilityInformationData()
  }
}
