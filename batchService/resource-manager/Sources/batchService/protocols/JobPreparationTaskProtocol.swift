// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
// JobPreparationTaskProtocol is you can use Job Preparation to prepare a compute node to run tasks for the job.
// Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in
// the job. The Job Preparation task can download these common resource files to the shared location on the compute
// node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local service on the compute node so that all tasks of that job
// can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with
// exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of
// this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can
// run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle
// re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling
// any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not
// previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any
// task of the job.
public protocol JobPreparationTaskProtocol : Codable {
     var id: String? { get set }
     var commandLine: String { get set }
     var containerSettings: TaskContainerSettingsProtocol? { get set }
     var resourceFiles: [ResourceFileProtocol?]? { get set }
     var environmentSettings: [EnvironmentSettingProtocol?]? { get set }
     var constraints: TaskConstraintsProtocol? { get set }
     var waitForSuccess: Bool? { get set }
     var userIdentity: UserIdentityProtocol? { get set }
     var rerunOnNodeRebootAfterSuccess: Bool? { get set }
}
