// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
// JobReleaseTaskProtocol is the Job Release task runs when the job ends, because of one of the following: The user
// calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time
// constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is
// configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks
// of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run
// the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and
// hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute
// node reboots while the Job Release task is still running, the Job Release task runs again when the compute node
// starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs
// in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode
// limit specified on the pool.
public protocol JobReleaseTaskProtocol : Codable {
     var id: String? { get set }
     var commandLine: String { get set }
     var containerSettings: TaskContainerSettingsProtocol? { get set }
     var resourceFiles: [ResourceFileProtocol?]? { get set }
     var environmentSettings: [EnvironmentSettingProtocol?]? { get set }
     var maxWallClockTime: String? { get set }
     var retentionTime: String? { get set }
     var userIdentity: UserIdentityProtocol? { get set }
}
