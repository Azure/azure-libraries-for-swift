// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ComputeNodeGetRemoteLoginSettingsResultData : ComputeNodeGetRemoteLoginSettingsResultProtocol {
    public var remoteLoginIPAddress: String
    public var remoteLoginPort: Int32

        enum CodingKeys: String, CodingKey {case remoteLoginIPAddress = "remoteLoginIPAddress"
        case remoteLoginPort = "remoteLoginPort"
        }

  public init(remoteLoginIPAddress: String, remoteLoginPort: Int32)  {
    self.remoteLoginIPAddress = remoteLoginIPAddress
    self.remoteLoginPort = remoteLoginPort
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.remoteLoginIPAddress = try container.decode(String.self, forKey: .remoteLoginIPAddress)
    self.remoteLoginPort = try container.decode(Int32.self, forKey: .remoteLoginPort)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.remoteLoginIPAddress, forKey: .remoteLoginIPAddress)
    try container.encode(self.remoteLoginPort, forKey: .remoteLoginPort)
  }
}

extension DataFactory {
  public static func createComputeNodeGetRemoteLoginSettingsResultProtocol(remoteLoginIPAddress: String, remoteLoginPort: Int32) -> ComputeNodeGetRemoteLoginSettingsResultProtocol {
    return ComputeNodeGetRemoteLoginSettingsResultData(remoteLoginIPAddress: remoteLoginIPAddress, remoteLoginPort: remoteLoginPort)
  }
}
