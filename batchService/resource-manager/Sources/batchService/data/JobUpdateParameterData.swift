// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobUpdateParameterData : JobUpdateParameterProtocol {
    public var priority: Int32?
    public var constraints: JobConstraintsProtocol?
    public var poolInfo: PoolInformationProtocol
    public var metadata: [MetadataItemProtocol?]?
    public var onAllTasksComplete: OnAllTasksCompleteEnum?

        enum CodingKeys: String, CodingKey {case priority = "priority"
        case constraints = "constraints"
        case poolInfo = "poolInfo"
        case metadata = "metadata"
        case onAllTasksComplete = "onAllTasksComplete"
        }

  public init(poolInfo: PoolInformationProtocol)  {
    self.poolInfo = poolInfo
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.priority) {
        self.priority = try container.decode(Int32?.self, forKey: .priority)
    }
    if container.contains(.constraints) {
        self.constraints = try container.decode(JobConstraintsData?.self, forKey: .constraints)
    }
    self.poolInfo = try container.decode(PoolInformationData.self, forKey: .poolInfo)
    if container.contains(.metadata) {
        self.metadata = try container.decode([MetadataItemData?]?.self, forKey: .metadata)
    }
    if container.contains(.onAllTasksComplete) {
        self.onAllTasksComplete = try container.decode(OnAllTasksCompleteEnum?.self, forKey: .onAllTasksComplete)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.priority != nil {try container.encode(self.priority, forKey: .priority)}
    if self.constraints != nil {try container.encode(self.constraints as! JobConstraintsData?, forKey: .constraints)}
    try container.encode(self.poolInfo as! PoolInformationData, forKey: .poolInfo)
    if self.metadata != nil {try container.encode(self.metadata as! [MetadataItemData?]?, forKey: .metadata)}
    if self.onAllTasksComplete != nil {try container.encode(self.onAllTasksComplete, forKey: .onAllTasksComplete)}
  }
}

extension DataFactory {
  public static func createJobUpdateParameterProtocol(poolInfo: PoolInformationProtocol) -> JobUpdateParameterProtocol {
    return JobUpdateParameterData(poolInfo: poolInfo)
  }
}
