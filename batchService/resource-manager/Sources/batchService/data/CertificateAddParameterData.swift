// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CertificateAddParameterData : CertificateAddParameterProtocol {
    public var thumbprint: String
    public var thumbprintAlgorithm: String
    public var data: String
    public var certificateFormat: CertificateFormatEnum?
    public var password: String?

        enum CodingKeys: String, CodingKey {case thumbprint = "thumbprint"
        case thumbprintAlgorithm = "thumbprintAlgorithm"
        case data = "data"
        case certificateFormat = "certificateFormat"
        case password = "password"
        }

  public init(thumbprint: String, thumbprintAlgorithm: String, data: String)  {
    self.thumbprint = thumbprint
    self.thumbprintAlgorithm = thumbprintAlgorithm
    self.data = data
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.thumbprint = try container.decode(String.self, forKey: .thumbprint)
    self.thumbprintAlgorithm = try container.decode(String.self, forKey: .thumbprintAlgorithm)
    self.data = try container.decode(String.self, forKey: .data)
    if container.contains(.certificateFormat) {
        self.certificateFormat = try container.decode(CertificateFormatEnum?.self, forKey: .certificateFormat)
    }
    if container.contains(.password) {
        self.password = try container.decode(String?.self, forKey: .password)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.thumbprint, forKey: .thumbprint)
    try container.encode(self.thumbprintAlgorithm, forKey: .thumbprintAlgorithm)
    try container.encode(self.data, forKey: .data)
    if self.certificateFormat != nil {try container.encode(self.certificateFormat, forKey: .certificateFormat)}
    if self.password != nil {try container.encode(self.password, forKey: .password)}
  }
}

extension DataFactory {
  public static func createCertificateAddParameterProtocol(thumbprint: String, thumbprintAlgorithm: String, data: String) -> CertificateAddParameterProtocol {
    return CertificateAddParameterData(thumbprint: thumbprint, thumbprintAlgorithm: thumbprintAlgorithm, data: data)
  }
}
