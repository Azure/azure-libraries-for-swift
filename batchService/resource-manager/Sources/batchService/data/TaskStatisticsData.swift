// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TaskStatisticsData : TaskStatisticsProtocol {
    public var url: String
    public var startTime: Date
    public var lastUpdateTime: Date
    public var userCPUTime: String
    public var kernelCPUTime: String
    public var wallClockTime: String
    public var readIOps: Int64
    public var writeIOps: Int64
    public var readIOGiB: Double
    public var writeIOGiB: Double
    public var waitTime: String

        enum CodingKeys: String, CodingKey {case url = "url"
        case startTime = "startTime"
        case lastUpdateTime = "lastUpdateTime"
        case userCPUTime = "userCPUTime"
        case kernelCPUTime = "kernelCPUTime"
        case wallClockTime = "wallClockTime"
        case readIOps = "readIOps"
        case writeIOps = "writeIOps"
        case readIOGiB = "readIOGiB"
        case writeIOGiB = "writeIOGiB"
        case waitTime = "waitTime"
        }

  public init(url: String, startTime: Date, lastUpdateTime: Date, userCPUTime: String, kernelCPUTime: String, wallClockTime: String, readIOps: Int64, writeIOps: Int64, readIOGiB: Double, writeIOGiB: Double, waitTime: String)  {
    self.url = url
    self.startTime = startTime
    self.lastUpdateTime = lastUpdateTime
    self.userCPUTime = userCPUTime
    self.kernelCPUTime = kernelCPUTime
    self.wallClockTime = wallClockTime
    self.readIOps = readIOps
    self.writeIOps = writeIOps
    self.readIOGiB = readIOGiB
    self.writeIOGiB = writeIOGiB
    self.waitTime = waitTime
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.url = try container.decode(String.self, forKey: .url)
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)!
        self.lastUpdateTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastUpdateTime)), format: .dateTime)!
    self.userCPUTime = try container.decode(String.self, forKey: .userCPUTime)
    self.kernelCPUTime = try container.decode(String.self, forKey: .kernelCPUTime)
    self.wallClockTime = try container.decode(String.self, forKey: .wallClockTime)
    self.readIOps = try container.decode(Int64.self, forKey: .readIOps)
    self.writeIOps = try container.decode(Int64.self, forKey: .writeIOps)
    self.readIOGiB = try container.decode(Double.self, forKey: .readIOGiB)
    self.writeIOGiB = try container.decode(Double.self, forKey: .writeIOGiB)
    self.waitTime = try container.decode(String.self, forKey: .waitTime)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.url, forKey: .url)
    try container.encode(DateConverter.toString(date: self.startTime, format: .dateTime), forKey: .startTime)
    try container.encode(DateConverter.toString(date: self.lastUpdateTime, format: .dateTime), forKey: .lastUpdateTime)
    try container.encode(self.userCPUTime, forKey: .userCPUTime)
    try container.encode(self.kernelCPUTime, forKey: .kernelCPUTime)
    try container.encode(self.wallClockTime, forKey: .wallClockTime)
    try container.encode(self.readIOps, forKey: .readIOps)
    try container.encode(self.writeIOps, forKey: .writeIOps)
    try container.encode(self.readIOGiB, forKey: .readIOGiB)
    try container.encode(self.writeIOGiB, forKey: .writeIOGiB)
    try container.encode(self.waitTime, forKey: .waitTime)
  }
}

extension DataFactory {
  public static func createTaskStatisticsProtocol(url: String, startTime: Date, lastUpdateTime: Date, userCPUTime: String, kernelCPUTime: String, wallClockTime: String, readIOps: Int64, writeIOps: Int64, readIOGiB: Double, writeIOGiB: Double, waitTime: String) -> TaskStatisticsProtocol {
    return TaskStatisticsData(url: url, startTime: startTime, lastUpdateTime: lastUpdateTime, userCPUTime: userCPUTime, kernelCPUTime: kernelCPUTime, wallClockTime: wallClockTime, readIOps: readIOps, writeIOps: writeIOps, readIOGiB: readIOGiB, writeIOGiB: writeIOGiB, waitTime: waitTime)
  }
}
