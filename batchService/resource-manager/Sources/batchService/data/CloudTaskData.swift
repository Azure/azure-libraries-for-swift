// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CloudTaskData : CloudTaskProtocol {
    public var id: String?
    public var displayName: String?
    public var url: String?
    public var eTag: String?
    public var lastModified: Date?
    public var creationTime: Date?
    public var exitConditions: ExitConditionsProtocol?
    public var state: TaskStateEnum?
    public var stateTransitionTime: Date?
    public var previousState: TaskStateEnum?
    public var previousStateTransitionTime: Date?
    public var commandLine: String?
    public var containerSettings: TaskContainerSettingsProtocol?
    public var resourceFiles: [ResourceFileProtocol?]?
    public var outputFiles: [OutputFileProtocol?]?
    public var environmentSettings: [EnvironmentSettingProtocol?]?
    public var affinityInfo: AffinityInformationProtocol?
    public var constraints: TaskConstraintsProtocol?
    public var userIdentity: UserIdentityProtocol?
    public var executionInfo: TaskExecutionInformationProtocol?
    public var nodeInfo: ComputeNodeInformationProtocol?
    public var multiInstanceSettings: MultiInstanceSettingsProtocol?
    public var stats: TaskStatisticsProtocol?
    public var dependsOn: TaskDependenciesProtocol?
    public var applicationPackageReferences: [ApplicationPackageReferenceProtocol?]?
    public var authenticationTokenSettings: AuthenticationTokenSettingsProtocol?

        enum CodingKeys: String, CodingKey {case id = "id"
        case displayName = "displayName"
        case url = "url"
        case eTag = "eTag"
        case lastModified = "lastModified"
        case creationTime = "creationTime"
        case exitConditions = "exitConditions"
        case state = "state"
        case stateTransitionTime = "stateTransitionTime"
        case previousState = "previousState"
        case previousStateTransitionTime = "previousStateTransitionTime"
        case commandLine = "commandLine"
        case containerSettings = "containerSettings"
        case resourceFiles = "resourceFiles"
        case outputFiles = "outputFiles"
        case environmentSettings = "environmentSettings"
        case affinityInfo = "affinityInfo"
        case constraints = "constraints"
        case userIdentity = "userIdentity"
        case executionInfo = "executionInfo"
        case nodeInfo = "nodeInfo"
        case multiInstanceSettings = "multiInstanceSettings"
        case stats = "stats"
        case dependsOn = "dependsOn"
        case applicationPackageReferences = "applicationPackageReferences"
        case authenticationTokenSettings = "authenticationTokenSettings"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.displayName) {
        self.displayName = try container.decode(String?.self, forKey: .displayName)
    }
    if container.contains(.url) {
        self.url = try container.decode(String?.self, forKey: .url)
    }
    if container.contains(.eTag) {
        self.eTag = try container.decode(String?.self, forKey: .eTag)
    }
    if container.contains(.lastModified) {
        self.lastModified = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModified)), format: .dateTime)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.exitConditions) {
        self.exitConditions = try container.decode(ExitConditionsData?.self, forKey: .exitConditions)
    }
    if container.contains(.state) {
        self.state = try container.decode(TaskStateEnum?.self, forKey: .state)
    }
    if container.contains(.stateTransitionTime) {
        self.stateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .stateTransitionTime)), format: .dateTime)
    }
    if container.contains(.previousState) {
        self.previousState = try container.decode(TaskStateEnum?.self, forKey: .previousState)
    }
    if container.contains(.previousStateTransitionTime) {
        self.previousStateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .previousStateTransitionTime)), format: .dateTime)
    }
    if container.contains(.commandLine) {
        self.commandLine = try container.decode(String?.self, forKey: .commandLine)
    }
    if container.contains(.containerSettings) {
        self.containerSettings = try container.decode(TaskContainerSettingsData?.self, forKey: .containerSettings)
    }
    if container.contains(.resourceFiles) {
        self.resourceFiles = try container.decode([ResourceFileData?]?.self, forKey: .resourceFiles)
    }
    if container.contains(.outputFiles) {
        self.outputFiles = try container.decode([OutputFileData?]?.self, forKey: .outputFiles)
    }
    if container.contains(.environmentSettings) {
        self.environmentSettings = try container.decode([EnvironmentSettingData?]?.self, forKey: .environmentSettings)
    }
    if container.contains(.affinityInfo) {
        self.affinityInfo = try container.decode(AffinityInformationData?.self, forKey: .affinityInfo)
    }
    if container.contains(.constraints) {
        self.constraints = try container.decode(TaskConstraintsData?.self, forKey: .constraints)
    }
    if container.contains(.userIdentity) {
        self.userIdentity = try container.decode(UserIdentityData?.self, forKey: .userIdentity)
    }
    if container.contains(.executionInfo) {
        self.executionInfo = try container.decode(TaskExecutionInformationData?.self, forKey: .executionInfo)
    }
    if container.contains(.nodeInfo) {
        self.nodeInfo = try container.decode(ComputeNodeInformationData?.self, forKey: .nodeInfo)
    }
    if container.contains(.multiInstanceSettings) {
        self.multiInstanceSettings = try container.decode(MultiInstanceSettingsData?.self, forKey: .multiInstanceSettings)
    }
    if container.contains(.stats) {
        self.stats = try container.decode(TaskStatisticsData?.self, forKey: .stats)
    }
    if container.contains(.dependsOn) {
        self.dependsOn = try container.decode(TaskDependenciesData?.self, forKey: .dependsOn)
    }
    if container.contains(.applicationPackageReferences) {
        self.applicationPackageReferences = try container.decode([ApplicationPackageReferenceData?]?.self, forKey: .applicationPackageReferences)
    }
    if container.contains(.authenticationTokenSettings) {
        self.authenticationTokenSettings = try container.decode(AuthenticationTokenSettingsData?.self, forKey: .authenticationTokenSettings)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.url != nil {try container.encode(self.url, forKey: .url)}
    if self.eTag != nil {try container.encode(self.eTag, forKey: .eTag)}
    if self.lastModified != nil {
        try container.encode(DateConverter.toString(date: self.lastModified!, format: .dateTime), forKey: .lastModified)
    }
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.exitConditions != nil {try container.encode(self.exitConditions as! ExitConditionsData?, forKey: .exitConditions)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.stateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.stateTransitionTime!, format: .dateTime), forKey: .stateTransitionTime)
    }
    if self.previousState != nil {try container.encode(self.previousState, forKey: .previousState)}
    if self.previousStateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.previousStateTransitionTime!, format: .dateTime), forKey: .previousStateTransitionTime)
    }
    if self.commandLine != nil {try container.encode(self.commandLine, forKey: .commandLine)}
    if self.containerSettings != nil {try container.encode(self.containerSettings as! TaskContainerSettingsData?, forKey: .containerSettings)}
    if self.resourceFiles != nil {try container.encode(self.resourceFiles as! [ResourceFileData?]?, forKey: .resourceFiles)}
    if self.outputFiles != nil {try container.encode(self.outputFiles as! [OutputFileData?]?, forKey: .outputFiles)}
    if self.environmentSettings != nil {try container.encode(self.environmentSettings as! [EnvironmentSettingData?]?, forKey: .environmentSettings)}
    if self.affinityInfo != nil {try container.encode(self.affinityInfo as! AffinityInformationData?, forKey: .affinityInfo)}
    if self.constraints != nil {try container.encode(self.constraints as! TaskConstraintsData?, forKey: .constraints)}
    if self.userIdentity != nil {try container.encode(self.userIdentity as! UserIdentityData?, forKey: .userIdentity)}
    if self.executionInfo != nil {try container.encode(self.executionInfo as! TaskExecutionInformationData?, forKey: .executionInfo)}
    if self.nodeInfo != nil {try container.encode(self.nodeInfo as! ComputeNodeInformationData?, forKey: .nodeInfo)}
    if self.multiInstanceSettings != nil {try container.encode(self.multiInstanceSettings as! MultiInstanceSettingsData?, forKey: .multiInstanceSettings)}
    if self.stats != nil {try container.encode(self.stats as! TaskStatisticsData?, forKey: .stats)}
    if self.dependsOn != nil {try container.encode(self.dependsOn as! TaskDependenciesData?, forKey: .dependsOn)}
    if self.applicationPackageReferences != nil {try container.encode(self.applicationPackageReferences as! [ApplicationPackageReferenceData?]?, forKey: .applicationPackageReferences)}
    if self.authenticationTokenSettings != nil {try container.encode(self.authenticationTokenSettings as! AuthenticationTokenSettingsData?, forKey: .authenticationTokenSettings)}
  }
}

extension DataFactory {
  public static func createCloudTaskProtocol() -> CloudTaskProtocol {
    return CloudTaskData()
  }
}
