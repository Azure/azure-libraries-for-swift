// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CloudJobData : CloudJobProtocol {
    public var id: String?
    public var displayName: String?
    public var usesTaskDependencies: Bool?
    public var url: String?
    public var eTag: String?
    public var lastModified: Date?
    public var creationTime: Date?
    public var state: JobStateEnum?
    public var stateTransitionTime: Date?
    public var previousState: JobStateEnum?
    public var previousStateTransitionTime: Date?
    public var priority: Int32?
    public var constraints: JobConstraintsProtocol?
    public var jobManagerTask: JobManagerTaskProtocol?
    public var jobPreparationTask: JobPreparationTaskProtocol?
    public var jobReleaseTask: JobReleaseTaskProtocol?
    public var commonEnvironmentSettings: [EnvironmentSettingProtocol?]?
    public var poolInfo: PoolInformationProtocol?
    public var onAllTasksComplete: OnAllTasksCompleteEnum?
    public var onTaskFailure: OnTaskFailureEnum?
    public var metadata: [MetadataItemProtocol?]?
    public var executionInfo: JobExecutionInformationProtocol?
    public var stats: JobStatisticsProtocol?

        enum CodingKeys: String, CodingKey {case id = "id"
        case displayName = "displayName"
        case usesTaskDependencies = "usesTaskDependencies"
        case url = "url"
        case eTag = "eTag"
        case lastModified = "lastModified"
        case creationTime = "creationTime"
        case state = "state"
        case stateTransitionTime = "stateTransitionTime"
        case previousState = "previousState"
        case previousStateTransitionTime = "previousStateTransitionTime"
        case priority = "priority"
        case constraints = "constraints"
        case jobManagerTask = "jobManagerTask"
        case jobPreparationTask = "jobPreparationTask"
        case jobReleaseTask = "jobReleaseTask"
        case commonEnvironmentSettings = "commonEnvironmentSettings"
        case poolInfo = "poolInfo"
        case onAllTasksComplete = "onAllTasksComplete"
        case onTaskFailure = "onTaskFailure"
        case metadata = "metadata"
        case executionInfo = "executionInfo"
        case stats = "stats"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.displayName) {
        self.displayName = try container.decode(String?.self, forKey: .displayName)
    }
    if container.contains(.usesTaskDependencies) {
        self.usesTaskDependencies = try container.decode(Bool?.self, forKey: .usesTaskDependencies)
    }
    if container.contains(.url) {
        self.url = try container.decode(String?.self, forKey: .url)
    }
    if container.contains(.eTag) {
        self.eTag = try container.decode(String?.self, forKey: .eTag)
    }
    if container.contains(.lastModified) {
        self.lastModified = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModified)), format: .dateTime)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.state) {
        self.state = try container.decode(JobStateEnum?.self, forKey: .state)
    }
    if container.contains(.stateTransitionTime) {
        self.stateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .stateTransitionTime)), format: .dateTime)
    }
    if container.contains(.previousState) {
        self.previousState = try container.decode(JobStateEnum?.self, forKey: .previousState)
    }
    if container.contains(.previousStateTransitionTime) {
        self.previousStateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .previousStateTransitionTime)), format: .dateTime)
    }
    if container.contains(.priority) {
        self.priority = try container.decode(Int32?.self, forKey: .priority)
    }
    if container.contains(.constraints) {
        self.constraints = try container.decode(JobConstraintsData?.self, forKey: .constraints)
    }
    if container.contains(.jobManagerTask) {
        self.jobManagerTask = try container.decode(JobManagerTaskData?.self, forKey: .jobManagerTask)
    }
    if container.contains(.jobPreparationTask) {
        self.jobPreparationTask = try container.decode(JobPreparationTaskData?.self, forKey: .jobPreparationTask)
    }
    if container.contains(.jobReleaseTask) {
        self.jobReleaseTask = try container.decode(JobReleaseTaskData?.self, forKey: .jobReleaseTask)
    }
    if container.contains(.commonEnvironmentSettings) {
        self.commonEnvironmentSettings = try container.decode([EnvironmentSettingData?]?.self, forKey: .commonEnvironmentSettings)
    }
    if container.contains(.poolInfo) {
        self.poolInfo = try container.decode(PoolInformationData?.self, forKey: .poolInfo)
    }
    if container.contains(.onAllTasksComplete) {
        self.onAllTasksComplete = try container.decode(OnAllTasksCompleteEnum?.self, forKey: .onAllTasksComplete)
    }
    if container.contains(.onTaskFailure) {
        self.onTaskFailure = try container.decode(OnTaskFailureEnum?.self, forKey: .onTaskFailure)
    }
    if container.contains(.metadata) {
        self.metadata = try container.decode([MetadataItemData?]?.self, forKey: .metadata)
    }
    if container.contains(.executionInfo) {
        self.executionInfo = try container.decode(JobExecutionInformationData?.self, forKey: .executionInfo)
    }
    if container.contains(.stats) {
        self.stats = try container.decode(JobStatisticsData?.self, forKey: .stats)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.usesTaskDependencies != nil {try container.encode(self.usesTaskDependencies, forKey: .usesTaskDependencies)}
    if self.url != nil {try container.encode(self.url, forKey: .url)}
    if self.eTag != nil {try container.encode(self.eTag, forKey: .eTag)}
    if self.lastModified != nil {
        try container.encode(DateConverter.toString(date: self.lastModified!, format: .dateTime), forKey: .lastModified)
    }
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.stateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.stateTransitionTime!, format: .dateTime), forKey: .stateTransitionTime)
    }
    if self.previousState != nil {try container.encode(self.previousState, forKey: .previousState)}
    if self.previousStateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.previousStateTransitionTime!, format: .dateTime), forKey: .previousStateTransitionTime)
    }
    if self.priority != nil {try container.encode(self.priority, forKey: .priority)}
    if self.constraints != nil {try container.encode(self.constraints as! JobConstraintsData?, forKey: .constraints)}
    if self.jobManagerTask != nil {try container.encode(self.jobManagerTask as! JobManagerTaskData?, forKey: .jobManagerTask)}
    if self.jobPreparationTask != nil {try container.encode(self.jobPreparationTask as! JobPreparationTaskData?, forKey: .jobPreparationTask)}
    if self.jobReleaseTask != nil {try container.encode(self.jobReleaseTask as! JobReleaseTaskData?, forKey: .jobReleaseTask)}
    if self.commonEnvironmentSettings != nil {try container.encode(self.commonEnvironmentSettings as! [EnvironmentSettingData?]?, forKey: .commonEnvironmentSettings)}
    if self.poolInfo != nil {try container.encode(self.poolInfo as! PoolInformationData?, forKey: .poolInfo)}
    if self.onAllTasksComplete != nil {try container.encode(self.onAllTasksComplete, forKey: .onAllTasksComplete)}
    if self.onTaskFailure != nil {try container.encode(self.onTaskFailure, forKey: .onTaskFailure)}
    if self.metadata != nil {try container.encode(self.metadata as! [MetadataItemData?]?, forKey: .metadata)}
    if self.executionInfo != nil {try container.encode(self.executionInfo as! JobExecutionInformationData?, forKey: .executionInfo)}
    if self.stats != nil {try container.encode(self.stats as! JobStatisticsData?, forKey: .stats)}
  }
}

extension DataFactory {
  public static func createCloudJobProtocol() -> CloudJobProtocol {
    return CloudJobData()
  }
}
