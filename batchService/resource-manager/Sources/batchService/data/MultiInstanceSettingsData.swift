// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MultiInstanceSettingsData : MultiInstanceSettingsProtocol {
    public var numberOfInstances: Int32?
    public var coordinationCommandLine: String
    public var commonResourceFiles: [ResourceFileProtocol?]?

        enum CodingKeys: String, CodingKey {case numberOfInstances = "numberOfInstances"
        case coordinationCommandLine = "coordinationCommandLine"
        case commonResourceFiles = "commonResourceFiles"
        }

  public init(coordinationCommandLine: String)  {
    self.coordinationCommandLine = coordinationCommandLine
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.numberOfInstances) {
        self.numberOfInstances = try container.decode(Int32?.self, forKey: .numberOfInstances)
    }
    self.coordinationCommandLine = try container.decode(String.self, forKey: .coordinationCommandLine)
    if container.contains(.commonResourceFiles) {
        self.commonResourceFiles = try container.decode([ResourceFileData?]?.self, forKey: .commonResourceFiles)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.numberOfInstances != nil {try container.encode(self.numberOfInstances, forKey: .numberOfInstances)}
    try container.encode(self.coordinationCommandLine, forKey: .coordinationCommandLine)
    if self.commonResourceFiles != nil {try container.encode(self.commonResourceFiles as! [ResourceFileData?]?, forKey: .commonResourceFiles)}
  }
}

extension DataFactory {
  public static func createMultiInstanceSettingsProtocol(coordinationCommandLine: String) -> MultiInstanceSettingsProtocol {
    return MultiInstanceSettingsData(coordinationCommandLine: coordinationCommandLine)
  }
}
