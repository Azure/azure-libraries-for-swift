// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PoolInformationData : PoolInformationProtocol {
    public var poolId: String?
    public var autoPoolSpecification: AutoPoolSpecificationProtocol?

        enum CodingKeys: String, CodingKey {case poolId = "poolId"
        case autoPoolSpecification = "autoPoolSpecification"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.poolId) {
        self.poolId = try container.decode(String?.self, forKey: .poolId)
    }
    if container.contains(.autoPoolSpecification) {
        self.autoPoolSpecification = try container.decode(AutoPoolSpecificationData?.self, forKey: .autoPoolSpecification)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.poolId != nil {try container.encode(self.poolId, forKey: .poolId)}
    if self.autoPoolSpecification != nil {try container.encode(self.autoPoolSpecification as! AutoPoolSpecificationData?, forKey: .autoPoolSpecification)}
  }
}

extension DataFactory {
  public static func createPoolInformationProtocol() -> PoolInformationProtocol {
    return PoolInformationData()
  }
}
