// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkSecurityGroupRuleData : NetworkSecurityGroupRuleProtocol {
    public var priority: Int32
    public var access: NetworkSecurityGroupRuleAccessEnum
    public var sourceAddressPrefix: String

        enum CodingKeys: String, CodingKey {case priority = "priority"
        case access = "access"
        case sourceAddressPrefix = "sourceAddressPrefix"
        }

  public init(priority: Int32, access: NetworkSecurityGroupRuleAccessEnum, sourceAddressPrefix: String)  {
    self.priority = priority
    self.access = access
    self.sourceAddressPrefix = sourceAddressPrefix
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.priority = try container.decode(Int32.self, forKey: .priority)
    self.access = try container.decode(NetworkSecurityGroupRuleAccessEnum.self, forKey: .access)
    self.sourceAddressPrefix = try container.decode(String.self, forKey: .sourceAddressPrefix)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.priority, forKey: .priority)
    try container.encode(self.access, forKey: .access)
    try container.encode(self.sourceAddressPrefix, forKey: .sourceAddressPrefix)
  }
}

extension DataFactory {
  public static func createNetworkSecurityGroupRuleProtocol(priority: Int32, access: NetworkSecurityGroupRuleAccessEnum, sourceAddressPrefix: String) -> NetworkSecurityGroupRuleProtocol {
    return NetworkSecurityGroupRuleData(priority: priority, access: access, sourceAddressPrefix: sourceAddressPrefix)
  }
}
