// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TaskDependenciesData : TaskDependenciesProtocol {
    public var taskIds: [String]?
    public var taskIdRanges: [TaskIdRangeProtocol?]?

        enum CodingKeys: String, CodingKey {case taskIds = "taskIds"
        case taskIdRanges = "taskIdRanges"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.taskIds) {
        self.taskIds = try container.decode([String]?.self, forKey: .taskIds)
    }
    if container.contains(.taskIdRanges) {
        self.taskIdRanges = try container.decode([TaskIdRangeData?]?.self, forKey: .taskIdRanges)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.taskIds != nil {try container.encode(self.taskIds as! [String]?, forKey: .taskIds)}
    if self.taskIdRanges != nil {try container.encode(self.taskIdRanges as! [TaskIdRangeData?]?, forKey: .taskIdRanges)}
  }
}

extension DataFactory {
  public static func createTaskDependenciesProtocol() -> TaskDependenciesProtocol {
    return TaskDependenciesData()
  }
}
