// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PoolStatisticsData : PoolStatisticsProtocol {
    public var url: String
    public var startTime: Date
    public var lastUpdateTime: Date
    public var usageStats: UsageStatisticsProtocol?
    public var resourceStats: ResourceStatisticsProtocol?

        enum CodingKeys: String, CodingKey {case url = "url"
        case startTime = "startTime"
        case lastUpdateTime = "lastUpdateTime"
        case usageStats = "usageStats"
        case resourceStats = "resourceStats"
        }

  public init(url: String, startTime: Date, lastUpdateTime: Date)  {
    self.url = url
    self.startTime = startTime
    self.lastUpdateTime = lastUpdateTime
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.url = try container.decode(String.self, forKey: .url)
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)!
        self.lastUpdateTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastUpdateTime)), format: .dateTime)!
    if container.contains(.usageStats) {
        self.usageStats = try container.decode(UsageStatisticsData?.self, forKey: .usageStats)
    }
    if container.contains(.resourceStats) {
        self.resourceStats = try container.decode(ResourceStatisticsData?.self, forKey: .resourceStats)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.url, forKey: .url)
    try container.encode(DateConverter.toString(date: self.startTime, format: .dateTime), forKey: .startTime)
    try container.encode(DateConverter.toString(date: self.lastUpdateTime, format: .dateTime), forKey: .lastUpdateTime)
    if self.usageStats != nil {try container.encode(self.usageStats as! UsageStatisticsData?, forKey: .usageStats)}
    if self.resourceStats != nil {try container.encode(self.resourceStats as! ResourceStatisticsData?, forKey: .resourceStats)}
  }
}

extension DataFactory {
  public static func createPoolStatisticsProtocol(url: String, startTime: Date, lastUpdateTime: Date) -> PoolStatisticsProtocol {
    return PoolStatisticsData(url: url, startTime: startTime, lastUpdateTime: lastUpdateTime)
  }
}
