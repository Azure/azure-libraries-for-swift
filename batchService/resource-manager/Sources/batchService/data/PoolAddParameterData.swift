// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PoolAddParameterData : PoolAddParameterProtocol {
    public var id: String
    public var displayName: String?
    public var vmSize: String
    public var cloudServiceConfiguration: CloudServiceConfigurationProtocol?
    public var virtualMachineConfiguration: VirtualMachineConfigurationProtocol?
    public var resizeTimeout: String?
    public var targetDedicatedNodes: Int32?
    public var targetLowPriorityNodes: Int32?
    public var enableAutoScale: Bool?
    public var autoScaleFormula: String?
    public var autoScaleEvaluationInterval: String?
    public var enableInterNodeCommunication: Bool?
    public var networkConfiguration: NetworkConfigurationProtocol?
    public var startTask: StartTaskProtocol?
    public var certificateReferences: [CertificateReferenceProtocol?]?
    public var applicationPackageReferences: [ApplicationPackageReferenceProtocol?]?
    public var applicationLicenses: [String]?
    public var maxTasksPerNode: Int32?
    public var taskSchedulingPolicy: TaskSchedulingPolicyProtocol?
    public var userAccounts: [UserAccountProtocol?]?
    public var metadata: [MetadataItemProtocol?]?

        enum CodingKeys: String, CodingKey {case id = "id"
        case displayName = "displayName"
        case vmSize = "vmSize"
        case cloudServiceConfiguration = "cloudServiceConfiguration"
        case virtualMachineConfiguration = "virtualMachineConfiguration"
        case resizeTimeout = "resizeTimeout"
        case targetDedicatedNodes = "targetDedicatedNodes"
        case targetLowPriorityNodes = "targetLowPriorityNodes"
        case enableAutoScale = "enableAutoScale"
        case autoScaleFormula = "autoScaleFormula"
        case autoScaleEvaluationInterval = "autoScaleEvaluationInterval"
        case enableInterNodeCommunication = "enableInterNodeCommunication"
        case networkConfiguration = "networkConfiguration"
        case startTask = "startTask"
        case certificateReferences = "certificateReferences"
        case applicationPackageReferences = "applicationPackageReferences"
        case applicationLicenses = "applicationLicenses"
        case maxTasksPerNode = "maxTasksPerNode"
        case taskSchedulingPolicy = "taskSchedulingPolicy"
        case userAccounts = "userAccounts"
        case metadata = "metadata"
        }

  public init(id: String, vmSize: String)  {
    self.id = id
    self.vmSize = vmSize
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.id = try container.decode(String.self, forKey: .id)
    if container.contains(.displayName) {
        self.displayName = try container.decode(String?.self, forKey: .displayName)
    }
    self.vmSize = try container.decode(String.self, forKey: .vmSize)
    if container.contains(.cloudServiceConfiguration) {
        self.cloudServiceConfiguration = try container.decode(CloudServiceConfigurationData?.self, forKey: .cloudServiceConfiguration)
    }
    if container.contains(.virtualMachineConfiguration) {
        self.virtualMachineConfiguration = try container.decode(VirtualMachineConfigurationData?.self, forKey: .virtualMachineConfiguration)
    }
    if container.contains(.resizeTimeout) {
        self.resizeTimeout = try container.decode(String?.self, forKey: .resizeTimeout)
    }
    if container.contains(.targetDedicatedNodes) {
        self.targetDedicatedNodes = try container.decode(Int32?.self, forKey: .targetDedicatedNodes)
    }
    if container.contains(.targetLowPriorityNodes) {
        self.targetLowPriorityNodes = try container.decode(Int32?.self, forKey: .targetLowPriorityNodes)
    }
    if container.contains(.enableAutoScale) {
        self.enableAutoScale = try container.decode(Bool?.self, forKey: .enableAutoScale)
    }
    if container.contains(.autoScaleFormula) {
        self.autoScaleFormula = try container.decode(String?.self, forKey: .autoScaleFormula)
    }
    if container.contains(.autoScaleEvaluationInterval) {
        self.autoScaleEvaluationInterval = try container.decode(String?.self, forKey: .autoScaleEvaluationInterval)
    }
    if container.contains(.enableInterNodeCommunication) {
        self.enableInterNodeCommunication = try container.decode(Bool?.self, forKey: .enableInterNodeCommunication)
    }
    if container.contains(.networkConfiguration) {
        self.networkConfiguration = try container.decode(NetworkConfigurationData?.self, forKey: .networkConfiguration)
    }
    if container.contains(.startTask) {
        self.startTask = try container.decode(StartTaskData?.self, forKey: .startTask)
    }
    if container.contains(.certificateReferences) {
        self.certificateReferences = try container.decode([CertificateReferenceData?]?.self, forKey: .certificateReferences)
    }
    if container.contains(.applicationPackageReferences) {
        self.applicationPackageReferences = try container.decode([ApplicationPackageReferenceData?]?.self, forKey: .applicationPackageReferences)
    }
    if container.contains(.applicationLicenses) {
        self.applicationLicenses = try container.decode([String]?.self, forKey: .applicationLicenses)
    }
    if container.contains(.maxTasksPerNode) {
        self.maxTasksPerNode = try container.decode(Int32?.self, forKey: .maxTasksPerNode)
    }
    if container.contains(.taskSchedulingPolicy) {
        self.taskSchedulingPolicy = try container.decode(TaskSchedulingPolicyData?.self, forKey: .taskSchedulingPolicy)
    }
    if container.contains(.userAccounts) {
        self.userAccounts = try container.decode([UserAccountData?]?.self, forKey: .userAccounts)
    }
    if container.contains(.metadata) {
        self.metadata = try container.decode([MetadataItemData?]?.self, forKey: .metadata)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.id, forKey: .id)
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    try container.encode(self.vmSize, forKey: .vmSize)
    if self.cloudServiceConfiguration != nil {try container.encode(self.cloudServiceConfiguration as! CloudServiceConfigurationData?, forKey: .cloudServiceConfiguration)}
    if self.virtualMachineConfiguration != nil {try container.encode(self.virtualMachineConfiguration as! VirtualMachineConfigurationData?, forKey: .virtualMachineConfiguration)}
    if self.resizeTimeout != nil {try container.encode(self.resizeTimeout, forKey: .resizeTimeout)}
    if self.targetDedicatedNodes != nil {try container.encode(self.targetDedicatedNodes, forKey: .targetDedicatedNodes)}
    if self.targetLowPriorityNodes != nil {try container.encode(self.targetLowPriorityNodes, forKey: .targetLowPriorityNodes)}
    if self.enableAutoScale != nil {try container.encode(self.enableAutoScale, forKey: .enableAutoScale)}
    if self.autoScaleFormula != nil {try container.encode(self.autoScaleFormula, forKey: .autoScaleFormula)}
    if self.autoScaleEvaluationInterval != nil {try container.encode(self.autoScaleEvaluationInterval, forKey: .autoScaleEvaluationInterval)}
    if self.enableInterNodeCommunication != nil {try container.encode(self.enableInterNodeCommunication, forKey: .enableInterNodeCommunication)}
    if self.networkConfiguration != nil {try container.encode(self.networkConfiguration as! NetworkConfigurationData?, forKey: .networkConfiguration)}
    if self.startTask != nil {try container.encode(self.startTask as! StartTaskData?, forKey: .startTask)}
    if self.certificateReferences != nil {try container.encode(self.certificateReferences as! [CertificateReferenceData?]?, forKey: .certificateReferences)}
    if self.applicationPackageReferences != nil {try container.encode(self.applicationPackageReferences as! [ApplicationPackageReferenceData?]?, forKey: .applicationPackageReferences)}
    if self.applicationLicenses != nil {try container.encode(self.applicationLicenses as! [String]?, forKey: .applicationLicenses)}
    if self.maxTasksPerNode != nil {try container.encode(self.maxTasksPerNode, forKey: .maxTasksPerNode)}
    if self.taskSchedulingPolicy != nil {try container.encode(self.taskSchedulingPolicy as! TaskSchedulingPolicyData?, forKey: .taskSchedulingPolicy)}
    if self.userAccounts != nil {try container.encode(self.userAccounts as! [UserAccountData?]?, forKey: .userAccounts)}
    if self.metadata != nil {try container.encode(self.metadata as! [MetadataItemData?]?, forKey: .metadata)}
  }
}

extension DataFactory {
  public static func createPoolAddParameterProtocol(id: String, vmSize: String) -> PoolAddParameterProtocol {
    return PoolAddParameterData(id: id, vmSize: vmSize)
  }
}
