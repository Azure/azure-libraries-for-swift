// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ExitOptionsData : ExitOptionsProtocol {
    public var jobAction: JobActionEnum?
    public var dependencyAction: DependencyActionEnum?

        enum CodingKeys: String, CodingKey {case jobAction = "jobAction"
        case dependencyAction = "dependencyAction"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.jobAction) {
        self.jobAction = try container.decode(JobActionEnum?.self, forKey: .jobAction)
    }
    if container.contains(.dependencyAction) {
        self.dependencyAction = try container.decode(DependencyActionEnum?.self, forKey: .dependencyAction)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.jobAction != nil {try container.encode(self.jobAction, forKey: .jobAction)}
    if self.dependencyAction != nil {try container.encode(self.dependencyAction, forKey: .dependencyAction)}
  }
}

extension DataFactory {
  public static func createExitOptionsProtocol() -> ExitOptionsProtocol {
    return ExitOptionsData()
  }
}
