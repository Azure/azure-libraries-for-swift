// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FilePropertiesData : FilePropertiesProtocol {
    public var creationTime: Date?
    public var lastModified: Date
    public var contentLength: Int64
    public var contentType: String?
    public var fileMode: String?

        enum CodingKeys: String, CodingKey {case creationTime = "creationTime"
        case lastModified = "lastModified"
        case contentLength = "contentLength"
        case contentType = "contentType"
        case fileMode = "fileMode"
        }

  public init(lastModified: Date, contentLength: Int64)  {
    self.lastModified = lastModified
    self.contentLength = contentLength
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
        self.lastModified = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModified)), format: .dateTime)!
    self.contentLength = try container.decode(Int64.self, forKey: .contentLength)
    if container.contains(.contentType) {
        self.contentType = try container.decode(String?.self, forKey: .contentType)
    }
    if container.contains(.fileMode) {
        self.fileMode = try container.decode(String?.self, forKey: .fileMode)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    try container.encode(DateConverter.toString(date: self.lastModified, format: .dateTime), forKey: .lastModified)
    try container.encode(self.contentLength, forKey: .contentLength)
    if self.contentType != nil {try container.encode(self.contentType, forKey: .contentType)}
    if self.fileMode != nil {try container.encode(self.fileMode, forKey: .fileMode)}
  }
}

extension DataFactory {
  public static func createFilePropertiesProtocol(lastModified: Date, contentLength: Int64) -> FilePropertiesProtocol {
    return FilePropertiesData(lastModified: lastModified, contentLength: contentLength)
  }
}
