// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ComputeNodeInformationData : ComputeNodeInformationProtocol {
    public var affinityId: String?
    public var nodeUrl: String?
    public var poolId: String?
    public var nodeId: String?
    public var taskRootDirectory: String?
    public var taskRootDirectoryUrl: String?

        enum CodingKeys: String, CodingKey {case affinityId = "affinityId"
        case nodeUrl = "nodeUrl"
        case poolId = "poolId"
        case nodeId = "nodeId"
        case taskRootDirectory = "taskRootDirectory"
        case taskRootDirectoryUrl = "taskRootDirectoryUrl"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.affinityId) {
        self.affinityId = try container.decode(String?.self, forKey: .affinityId)
    }
    if container.contains(.nodeUrl) {
        self.nodeUrl = try container.decode(String?.self, forKey: .nodeUrl)
    }
    if container.contains(.poolId) {
        self.poolId = try container.decode(String?.self, forKey: .poolId)
    }
    if container.contains(.nodeId) {
        self.nodeId = try container.decode(String?.self, forKey: .nodeId)
    }
    if container.contains(.taskRootDirectory) {
        self.taskRootDirectory = try container.decode(String?.self, forKey: .taskRootDirectory)
    }
    if container.contains(.taskRootDirectoryUrl) {
        self.taskRootDirectoryUrl = try container.decode(String?.self, forKey: .taskRootDirectoryUrl)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.affinityId != nil {try container.encode(self.affinityId, forKey: .affinityId)}
    if self.nodeUrl != nil {try container.encode(self.nodeUrl, forKey: .nodeUrl)}
    if self.poolId != nil {try container.encode(self.poolId, forKey: .poolId)}
    if self.nodeId != nil {try container.encode(self.nodeId, forKey: .nodeId)}
    if self.taskRootDirectory != nil {try container.encode(self.taskRootDirectory, forKey: .taskRootDirectory)}
    if self.taskRootDirectoryUrl != nil {try container.encode(self.taskRootDirectoryUrl, forKey: .taskRootDirectoryUrl)}
  }
}

extension DataFactory {
  public static func createComputeNodeInformationProtocol() -> ComputeNodeInformationProtocol {
    return ComputeNodeInformationData()
  }
}
