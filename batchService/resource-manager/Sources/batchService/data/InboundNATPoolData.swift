// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InboundNATPoolData : InboundNATPoolProtocol {
    public var name: String
    public var _protocol: InboundEndpointProtocolEnum
    public var backendPort: Int32
    public var frontendPortRangeStart: Int32
    public var frontendPortRangeEnd: Int32
    public var networkSecurityGroupRules: [NetworkSecurityGroupRuleProtocol?]?

        enum CodingKeys: String, CodingKey {case name = "name"
        case _protocol = "protocol"
        case backendPort = "backendPort"
        case frontendPortRangeStart = "frontendPortRangeStart"
        case frontendPortRangeEnd = "frontendPortRangeEnd"
        case networkSecurityGroupRules = "networkSecurityGroupRules"
        }

  public init(name: String, _protocol: InboundEndpointProtocolEnum, backendPort: Int32, frontendPortRangeStart: Int32, frontendPortRangeEnd: Int32)  {
    self.name = name
    self._protocol = _protocol
    self.backendPort = backendPort
    self.frontendPortRangeStart = frontendPortRangeStart
    self.frontendPortRangeEnd = frontendPortRangeEnd
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.name = try container.decode(String.self, forKey: .name)
    self._protocol = try container.decode(InboundEndpointProtocolEnum.self, forKey: ._protocol)
    self.backendPort = try container.decode(Int32.self, forKey: .backendPort)
    self.frontendPortRangeStart = try container.decode(Int32.self, forKey: .frontendPortRangeStart)
    self.frontendPortRangeEnd = try container.decode(Int32.self, forKey: .frontendPortRangeEnd)
    if container.contains(.networkSecurityGroupRules) {
        self.networkSecurityGroupRules = try container.decode([NetworkSecurityGroupRuleData?]?.self, forKey: .networkSecurityGroupRules)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.name, forKey: .name)
    try container.encode(self._protocol, forKey: ._protocol)
    try container.encode(self.backendPort, forKey: .backendPort)
    try container.encode(self.frontendPortRangeStart, forKey: .frontendPortRangeStart)
    try container.encode(self.frontendPortRangeEnd, forKey: .frontendPortRangeEnd)
    if self.networkSecurityGroupRules != nil {try container.encode(self.networkSecurityGroupRules as! [NetworkSecurityGroupRuleData?]?, forKey: .networkSecurityGroupRules)}
  }
}

extension DataFactory {
  public static func createInboundNATPoolProtocol(name: String, _protocol: InboundEndpointProtocolEnum, backendPort: Int32, frontendPortRangeStart: Int32, frontendPortRangeEnd: Int32) -> InboundNATPoolProtocol {
    return InboundNATPoolData(name: name, _protocol: _protocol, backendPort: backendPort, frontendPortRangeStart: frontendPortRangeStart, frontendPortRangeEnd: frontendPortRangeEnd)
  }
}
