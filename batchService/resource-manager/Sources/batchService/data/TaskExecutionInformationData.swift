// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TaskExecutionInformationData : TaskExecutionInformationProtocol {
    public var startTime: Date?
    public var endTime: Date?
    public var exitCode: Int32?
    public var containerInfo: TaskContainerExecutionInformationProtocol?
    public var failureInfo: TaskFailureInformationProtocol?
    public var retryCount: Int32
    public var lastRetryTime: Date?
    public var requeueCount: Int32
    public var lastRequeueTime: Date?
    public var result: TaskExecutionResultEnum?

        enum CodingKeys: String, CodingKey {case startTime = "startTime"
        case endTime = "endTime"
        case exitCode = "exitCode"
        case containerInfo = "containerInfo"
        case failureInfo = "failureInfo"
        case retryCount = "retryCount"
        case lastRetryTime = "lastRetryTime"
        case requeueCount = "requeueCount"
        case lastRequeueTime = "lastRequeueTime"
        case result = "result"
        }

  public init(retryCount: Int32, requeueCount: Int32)  {
    self.retryCount = retryCount
    self.requeueCount = requeueCount
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.exitCode) {
        self.exitCode = try container.decode(Int32?.self, forKey: .exitCode)
    }
    if container.contains(.containerInfo) {
        self.containerInfo = try container.decode(TaskContainerExecutionInformationData?.self, forKey: .containerInfo)
    }
    if container.contains(.failureInfo) {
        self.failureInfo = try container.decode(TaskFailureInformationData?.self, forKey: .failureInfo)
    }
    self.retryCount = try container.decode(Int32.self, forKey: .retryCount)
    if container.contains(.lastRetryTime) {
        self.lastRetryTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastRetryTime)), format: .dateTime)
    }
    self.requeueCount = try container.decode(Int32.self, forKey: .requeueCount)
    if container.contains(.lastRequeueTime) {
        self.lastRequeueTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastRequeueTime)), format: .dateTime)
    }
    if container.contains(.result) {
        self.result = try container.decode(TaskExecutionResultEnum?.self, forKey: .result)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.exitCode != nil {try container.encode(self.exitCode, forKey: .exitCode)}
    if self.containerInfo != nil {try container.encode(self.containerInfo as! TaskContainerExecutionInformationData?, forKey: .containerInfo)}
    if self.failureInfo != nil {try container.encode(self.failureInfo as! TaskFailureInformationData?, forKey: .failureInfo)}
    try container.encode(self.retryCount, forKey: .retryCount)
    if self.lastRetryTime != nil {
        try container.encode(DateConverter.toString(date: self.lastRetryTime!, format: .dateTime), forKey: .lastRetryTime)
    }
    try container.encode(self.requeueCount, forKey: .requeueCount)
    if self.lastRequeueTime != nil {
        try container.encode(DateConverter.toString(date: self.lastRequeueTime!, format: .dateTime), forKey: .lastRequeueTime)
    }
    if self.result != nil {try container.encode(self.result, forKey: .result)}
  }
}

extension DataFactory {
  public static func createTaskExecutionInformationProtocol(retryCount: Int32, requeueCount: Int32) -> TaskExecutionInformationProtocol {
    return TaskExecutionInformationData(retryCount: retryCount, requeueCount: requeueCount)
  }
}
