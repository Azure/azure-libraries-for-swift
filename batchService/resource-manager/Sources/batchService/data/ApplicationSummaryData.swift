// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationSummaryData : ApplicationSummaryProtocol {
    public var id: String
    public var displayName: String
    public var versions: [String]

        enum CodingKeys: String, CodingKey {case id = "id"
        case displayName = "displayName"
        case versions = "versions"
        }

  public init(id: String, displayName: String, versions: [String])  {
    self.id = id
    self.displayName = displayName
    self.versions = versions
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.id = try container.decode(String.self, forKey: .id)
    self.displayName = try container.decode(String.self, forKey: .displayName)
    self.versions = try container.decode([String].self, forKey: .versions)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.id, forKey: .id)
    try container.encode(self.displayName, forKey: .displayName)
    try container.encode(self.versions as! [String], forKey: .versions)
  }
}

extension DataFactory {
  public static func createApplicationSummaryProtocol(id: String, displayName: String, versions: [String]) -> ApplicationSummaryProtocol {
    return ApplicationSummaryData(id: id, displayName: displayName, versions: versions)
  }
}
