// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerRegistryData : ContainerRegistryProtocol {
    public var registryServer: String?
    public var userName: String
    public var password: String

        enum CodingKeys: String, CodingKey {case registryServer = "registryServer"
        case userName = "username"
        case password = "password"
        }

  public init(userName: String, password: String)  {
    self.userName = userName
    self.password = password
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.registryServer) {
        self.registryServer = try container.decode(String?.self, forKey: .registryServer)
    }
    self.userName = try container.decode(String.self, forKey: .userName)
    self.password = try container.decode(String.self, forKey: .password)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.registryServer != nil {try container.encode(self.registryServer, forKey: .registryServer)}
    try container.encode(self.userName, forKey: .userName)
    try container.encode(self.password, forKey: .password)
  }
}

extension DataFactory {
  public static func createContainerRegistryProtocol(userName: String, password: String) -> ContainerRegistryProtocol {
    return ContainerRegistryData(userName: userName, password: password)
  }
}
