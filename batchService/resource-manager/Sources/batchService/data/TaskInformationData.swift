// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TaskInformationData : TaskInformationProtocol {
    public var taskUrl: String?
    public var jobId: String?
    public var taskId: String?
    public var subtaskId: Int32?
    public var taskState: TaskStateEnum
    public var executionInfo: TaskExecutionInformationProtocol?

        enum CodingKeys: String, CodingKey {case taskUrl = "taskUrl"
        case jobId = "jobId"
        case taskId = "taskId"
        case subtaskId = "subtaskId"
        case taskState = "taskState"
        case executionInfo = "executionInfo"
        }

  public init(taskState: TaskStateEnum)  {
    self.taskState = taskState
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.taskUrl) {
        self.taskUrl = try container.decode(String?.self, forKey: .taskUrl)
    }
    if container.contains(.jobId) {
        self.jobId = try container.decode(String?.self, forKey: .jobId)
    }
    if container.contains(.taskId) {
        self.taskId = try container.decode(String?.self, forKey: .taskId)
    }
    if container.contains(.subtaskId) {
        self.subtaskId = try container.decode(Int32?.self, forKey: .subtaskId)
    }
    self.taskState = try container.decode(TaskStateEnum.self, forKey: .taskState)
    if container.contains(.executionInfo) {
        self.executionInfo = try container.decode(TaskExecutionInformationData?.self, forKey: .executionInfo)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.taskUrl != nil {try container.encode(self.taskUrl, forKey: .taskUrl)}
    if self.jobId != nil {try container.encode(self.jobId, forKey: .jobId)}
    if self.taskId != nil {try container.encode(self.taskId, forKey: .taskId)}
    if self.subtaskId != nil {try container.encode(self.subtaskId, forKey: .subtaskId)}
    try container.encode(self.taskState, forKey: .taskState)
    if self.executionInfo != nil {try container.encode(self.executionInfo as! TaskExecutionInformationData?, forKey: .executionInfo)}
  }
}

extension DataFactory {
  public static func createTaskInformationProtocol(taskState: TaskStateEnum) -> TaskInformationProtocol {
    return TaskInformationData(taskState: taskState)
  }
}
