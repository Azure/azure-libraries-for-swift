// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CertificateData : CertificateProtocol {
    public var thumbprint: String?
    public var thumbprintAlgorithm: String?
    public var url: String?
    public var state: CertificateStateEnum?
    public var stateTransitionTime: Date?
    public var previousState: CertificateStateEnum?
    public var previousStateTransitionTime: Date?
    public var publicData: String?
    public var deleteCertificateError: DeleteCertificateErrorProtocol?

        enum CodingKeys: String, CodingKey {case thumbprint = "thumbprint"
        case thumbprintAlgorithm = "thumbprintAlgorithm"
        case url = "url"
        case state = "state"
        case stateTransitionTime = "stateTransitionTime"
        case previousState = "previousState"
        case previousStateTransitionTime = "previousStateTransitionTime"
        case publicData = "publicData"
        case deleteCertificateError = "deleteCertificateError"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.thumbprintAlgorithm) {
        self.thumbprintAlgorithm = try container.decode(String?.self, forKey: .thumbprintAlgorithm)
    }
    if container.contains(.url) {
        self.url = try container.decode(String?.self, forKey: .url)
    }
    if container.contains(.state) {
        self.state = try container.decode(CertificateStateEnum?.self, forKey: .state)
    }
    if container.contains(.stateTransitionTime) {
        self.stateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .stateTransitionTime)), format: .dateTime)
    }
    if container.contains(.previousState) {
        self.previousState = try container.decode(CertificateStateEnum?.self, forKey: .previousState)
    }
    if container.contains(.previousStateTransitionTime) {
        self.previousStateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .previousStateTransitionTime)), format: .dateTime)
    }
    if container.contains(.publicData) {
        self.publicData = try container.decode(String?.self, forKey: .publicData)
    }
    if container.contains(.deleteCertificateError) {
        self.deleteCertificateError = try container.decode(DeleteCertificateErrorData?.self, forKey: .deleteCertificateError)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.thumbprintAlgorithm != nil {try container.encode(self.thumbprintAlgorithm, forKey: .thumbprintAlgorithm)}
    if self.url != nil {try container.encode(self.url, forKey: .url)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.stateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.stateTransitionTime!, format: .dateTime), forKey: .stateTransitionTime)
    }
    if self.previousState != nil {try container.encode(self.previousState, forKey: .previousState)}
    if self.previousStateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.previousStateTransitionTime!, format: .dateTime), forKey: .previousStateTransitionTime)
    }
    if self.publicData != nil {try container.encode(self.publicData, forKey: .publicData)}
    if self.deleteCertificateError != nil {try container.encode(self.deleteCertificateError as! DeleteCertificateErrorData?, forKey: .deleteCertificateError)}
  }
}

extension DataFactory {
  public static func createCertificateProtocol() -> CertificateProtocol {
    return CertificateData()
  }
}
