// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobExecutionInformationData : JobExecutionInformationProtocol {
    public var startTime: Date
    public var endTime: Date?
    public var poolId: String?
    public var schedulingError: JobSchedulingErrorProtocol?
    public var terminateReason: String?

        enum CodingKeys: String, CodingKey {case startTime = "startTime"
        case endTime = "endTime"
        case poolId = "poolId"
        case schedulingError = "schedulingError"
        case terminateReason = "terminateReason"
        }

  public init(startTime: Date)  {
    self.startTime = startTime
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
          self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)!
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.poolId) {
        self.poolId = try container.decode(String?.self, forKey: .poolId)
    }
    if container.contains(.schedulingError) {
        self.schedulingError = try container.decode(JobSchedulingErrorData?.self, forKey: .schedulingError)
    }
    if container.contains(.terminateReason) {
        self.terminateReason = try container.decode(String?.self, forKey: .terminateReason)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(DateConverter.toString(date: self.startTime, format: .dateTime), forKey: .startTime)
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.poolId != nil {try container.encode(self.poolId, forKey: .poolId)}
    if self.schedulingError != nil {try container.encode(self.schedulingError as! JobSchedulingErrorData?, forKey: .schedulingError)}
    if self.terminateReason != nil {try container.encode(self.terminateReason, forKey: .terminateReason)}
  }
}

extension DataFactory {
  public static func createJobExecutionInformationProtocol(startTime: Date) -> JobExecutionInformationProtocol {
    return JobExecutionInformationData(startTime: startTime)
  }
}
