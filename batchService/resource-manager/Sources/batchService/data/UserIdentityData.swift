// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UserIdentityData : UserIdentityProtocol {
    public var userName: String?
    public var autoUser: AutoUserSpecificationProtocol?

        enum CodingKeys: String, CodingKey {case userName = "username"
        case autoUser = "autoUser"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.userName) {
        self.userName = try container.decode(String?.self, forKey: .userName)
    }
    if container.contains(.autoUser) {
        self.autoUser = try container.decode(AutoUserSpecificationData?.self, forKey: .autoUser)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.userName != nil {try container.encode(self.userName, forKey: .userName)}
    if self.autoUser != nil {try container.encode(self.autoUser as! AutoUserSpecificationData?, forKey: .autoUser)}
  }
}

extension DataFactory {
  public static func createUserIdentityProtocol() -> UserIdentityProtocol {
    return UserIdentityData()
  }
}
