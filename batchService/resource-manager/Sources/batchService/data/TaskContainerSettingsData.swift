// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TaskContainerSettingsData : TaskContainerSettingsProtocol {
    public var containerRunOptions: String?
    public var imageName: String
    public var registry: ContainerRegistryProtocol?

        enum CodingKeys: String, CodingKey {case containerRunOptions = "containerRunOptions"
        case imageName = "imageName"
        case registry = "registry"
        }

  public init(imageName: String)  {
    self.imageName = imageName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.containerRunOptions) {
        self.containerRunOptions = try container.decode(String?.self, forKey: .containerRunOptions)
    }
    self.imageName = try container.decode(String.self, forKey: .imageName)
    if container.contains(.registry) {
        self.registry = try container.decode(ContainerRegistryData?.self, forKey: .registry)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.containerRunOptions != nil {try container.encode(self.containerRunOptions, forKey: .containerRunOptions)}
    try container.encode(self.imageName, forKey: .imageName)
    if self.registry != nil {try container.encode(self.registry as! ContainerRegistryData?, forKey: .registry)}
  }
}

extension DataFactory {
  public static func createTaskContainerSettingsProtocol(imageName: String) -> TaskContainerSettingsProtocol {
    return TaskContainerSettingsData(imageName: imageName)
  }
}
