// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobPreparationAndReleaseTaskExecutionInformationData : JobPreparationAndReleaseTaskExecutionInformationProtocol {
    public var poolId: String?
    public var nodeId: String?
    public var nodeUrl: String?
    public var jobPreparationTaskExecutionInfo: JobPreparationTaskExecutionInformationProtocol?
    public var jobReleaseTaskExecutionInfo: JobReleaseTaskExecutionInformationProtocol?

        enum CodingKeys: String, CodingKey {case poolId = "poolId"
        case nodeId = "nodeId"
        case nodeUrl = "nodeUrl"
        case jobPreparationTaskExecutionInfo = "jobPreparationTaskExecutionInfo"
        case jobReleaseTaskExecutionInfo = "jobReleaseTaskExecutionInfo"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.poolId) {
        self.poolId = try container.decode(String?.self, forKey: .poolId)
    }
    if container.contains(.nodeId) {
        self.nodeId = try container.decode(String?.self, forKey: .nodeId)
    }
    if container.contains(.nodeUrl) {
        self.nodeUrl = try container.decode(String?.self, forKey: .nodeUrl)
    }
    if container.contains(.jobPreparationTaskExecutionInfo) {
        self.jobPreparationTaskExecutionInfo = try container.decode(JobPreparationTaskExecutionInformationData?.self, forKey: .jobPreparationTaskExecutionInfo)
    }
    if container.contains(.jobReleaseTaskExecutionInfo) {
        self.jobReleaseTaskExecutionInfo = try container.decode(JobReleaseTaskExecutionInformationData?.self, forKey: .jobReleaseTaskExecutionInfo)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.poolId != nil {try container.encode(self.poolId, forKey: .poolId)}
    if self.nodeId != nil {try container.encode(self.nodeId, forKey: .nodeId)}
    if self.nodeUrl != nil {try container.encode(self.nodeUrl, forKey: .nodeUrl)}
    if self.jobPreparationTaskExecutionInfo != nil {try container.encode(self.jobPreparationTaskExecutionInfo as! JobPreparationTaskExecutionInformationData?, forKey: .jobPreparationTaskExecutionInfo)}
    if self.jobReleaseTaskExecutionInfo != nil {try container.encode(self.jobReleaseTaskExecutionInfo as! JobReleaseTaskExecutionInformationData?, forKey: .jobReleaseTaskExecutionInfo)}
  }
}

extension DataFactory {
  public static func createJobPreparationAndReleaseTaskExecutionInformationProtocol() -> JobPreparationAndReleaseTaskExecutionInformationProtocol {
    return JobPreparationAndReleaseTaskExecutionInformationData()
  }
}
