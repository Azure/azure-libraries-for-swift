// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobScheduleExecutionInformationData : JobScheduleExecutionInformationProtocol {
    public var nextRunTime: Date?
    public var recentJob: RecentJobProtocol?
    public var endTime: Date?

        enum CodingKeys: String, CodingKey {case nextRunTime = "nextRunTime"
        case recentJob = "recentJob"
        case endTime = "endTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.nextRunTime) {
        self.nextRunTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .nextRunTime)), format: .dateTime)
    }
    if container.contains(.recentJob) {
        self.recentJob = try container.decode(RecentJobData?.self, forKey: .recentJob)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.nextRunTime != nil {
        try container.encode(DateConverter.toString(date: self.nextRunTime!, format: .dateTime), forKey: .nextRunTime)
    }
    if self.recentJob != nil {try container.encode(self.recentJob as! RecentJobData?, forKey: .recentJob)}
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
  }
}

extension DataFactory {
  public static func createJobScheduleExecutionInformationProtocol() -> JobScheduleExecutionInformationProtocol {
    return JobScheduleExecutionInformationData()
  }
}
