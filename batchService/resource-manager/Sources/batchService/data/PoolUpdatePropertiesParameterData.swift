// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PoolUpdatePropertiesParameterData : PoolUpdatePropertiesParameterProtocol {
    public var startTask: StartTaskProtocol?
    public var certificateReferences: [CertificateReferenceProtocol]
    public var applicationPackageReferences: [ApplicationPackageReferenceProtocol]
    public var metadata: [MetadataItemProtocol]

        enum CodingKeys: String, CodingKey {case startTask = "startTask"
        case certificateReferences = "certificateReferences"
        case applicationPackageReferences = "applicationPackageReferences"
        case metadata = "metadata"
        }

  public init(certificateReferences: [CertificateReferenceProtocol], applicationPackageReferences: [ApplicationPackageReferenceProtocol], metadata: [MetadataItemProtocol])  {
    self.certificateReferences = certificateReferences
    self.applicationPackageReferences = applicationPackageReferences
    self.metadata = metadata
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.startTask) {
        self.startTask = try container.decode(StartTaskData?.self, forKey: .startTask)
    }
    self.certificateReferences = try container.decode([CertificateReferenceData].self, forKey: .certificateReferences)
    self.applicationPackageReferences = try container.decode([ApplicationPackageReferenceData].self, forKey: .applicationPackageReferences)
    self.metadata = try container.decode([MetadataItemData].self, forKey: .metadata)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.startTask != nil {try container.encode(self.startTask as! StartTaskData?, forKey: .startTask)}
    try container.encode(self.certificateReferences as! [CertificateReferenceData], forKey: .certificateReferences)
    try container.encode(self.applicationPackageReferences as! [ApplicationPackageReferenceData], forKey: .applicationPackageReferences)
    try container.encode(self.metadata as! [MetadataItemData], forKey: .metadata)
  }
}

extension DataFactory {
  public static func createPoolUpdatePropertiesParameterProtocol(certificateReferences: [CertificateReferenceProtocol], applicationPackageReferences: [ApplicationPackageReferenceProtocol], metadata: [MetadataItemProtocol]) -> PoolUpdatePropertiesParameterProtocol {
    return PoolUpdatePropertiesParameterData(certificateReferences: certificateReferences, applicationPackageReferences: applicationPackageReferences, metadata: metadata)
  }
}
