// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InboundEndpointData : InboundEndpointProtocol {
    public var name: String
    public var _protocol: InboundEndpointProtocolEnum
    public var publicIPAddress: String
    public var publicFQDN: String
    public var frontendPort: Int32
    public var backendPort: Int32

        enum CodingKeys: String, CodingKey {case name = "name"
        case _protocol = "protocol"
        case publicIPAddress = "publicIPAddress"
        case publicFQDN = "publicFQDN"
        case frontendPort = "frontendPort"
        case backendPort = "backendPort"
        }

  public init(name: String, _protocol: InboundEndpointProtocolEnum, publicIPAddress: String, publicFQDN: String, frontendPort: Int32, backendPort: Int32)  {
    self.name = name
    self._protocol = _protocol
    self.publicIPAddress = publicIPAddress
    self.publicFQDN = publicFQDN
    self.frontendPort = frontendPort
    self.backendPort = backendPort
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.name = try container.decode(String.self, forKey: .name)
    self._protocol = try container.decode(InboundEndpointProtocolEnum.self, forKey: ._protocol)
    self.publicIPAddress = try container.decode(String.self, forKey: .publicIPAddress)
    self.publicFQDN = try container.decode(String.self, forKey: .publicFQDN)
    self.frontendPort = try container.decode(Int32.self, forKey: .frontendPort)
    self.backendPort = try container.decode(Int32.self, forKey: .backendPort)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.name, forKey: .name)
    try container.encode(self._protocol, forKey: ._protocol)
    try container.encode(self.publicIPAddress, forKey: .publicIPAddress)
    try container.encode(self.publicFQDN, forKey: .publicFQDN)
    try container.encode(self.frontendPort, forKey: .frontendPort)
    try container.encode(self.backendPort, forKey: .backendPort)
  }
}

extension DataFactory {
  public static func createInboundEndpointProtocol(name: String, _protocol: InboundEndpointProtocolEnum, publicIPAddress: String, publicFQDN: String, frontendPort: Int32, backendPort: Int32) -> InboundEndpointProtocol {
    return InboundEndpointData(name: name, _protocol: _protocol, publicIPAddress: publicIPAddress, publicFQDN: publicFQDN, frontendPort: frontendPort, backendPort: backendPort)
  }
}
