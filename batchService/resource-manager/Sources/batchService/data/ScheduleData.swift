// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ScheduleData : ScheduleProtocol {
    public var doNotRunUntil: Date?
    public var doNotRunAfter: Date?
    public var startWindow: String?
    public var recurrenceInterval: String?

        enum CodingKeys: String, CodingKey {case doNotRunUntil = "doNotRunUntil"
        case doNotRunAfter = "doNotRunAfter"
        case startWindow = "startWindow"
        case recurrenceInterval = "recurrenceInterval"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.doNotRunUntil) {
        self.doNotRunUntil = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .doNotRunUntil)), format: .dateTime)
    }
    if container.contains(.doNotRunAfter) {
        self.doNotRunAfter = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .doNotRunAfter)), format: .dateTime)
    }
    if container.contains(.startWindow) {
        self.startWindow = try container.decode(String?.self, forKey: .startWindow)
    }
    if container.contains(.recurrenceInterval) {
        self.recurrenceInterval = try container.decode(String?.self, forKey: .recurrenceInterval)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.doNotRunUntil != nil {
        try container.encode(DateConverter.toString(date: self.doNotRunUntil!, format: .dateTime), forKey: .doNotRunUntil)
    }
    if self.doNotRunAfter != nil {
        try container.encode(DateConverter.toString(date: self.doNotRunAfter!, format: .dateTime), forKey: .doNotRunAfter)
    }
    if self.startWindow != nil {try container.encode(self.startWindow, forKey: .startWindow)}
    if self.recurrenceInterval != nil {try container.encode(self.recurrenceInterval, forKey: .recurrenceInterval)}
  }
}

extension DataFactory {
  public static func createScheduleProtocol() -> ScheduleProtocol {
    return ScheduleData()
  }
}
