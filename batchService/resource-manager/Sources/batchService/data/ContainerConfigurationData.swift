// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerConfigurationData : ContainerConfigurationProtocol {
    public var type: String
    public var containerImageNames: [String]?
    public var containerRegistries: [ContainerRegistryProtocol?]?

        enum CodingKeys: String, CodingKey {case type = "type"
        case containerImageNames = "containerImageNames"
        case containerRegistries = "containerRegistries"
        }

  public init(type: String)  {
    self.type = type
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.type = try container.decode(String.self, forKey: .type)
    if container.contains(.containerImageNames) {
        self.containerImageNames = try container.decode([String]?.self, forKey: .containerImageNames)
    }
    if container.contains(.containerRegistries) {
        self.containerRegistries = try container.decode([ContainerRegistryData?]?.self, forKey: .containerRegistries)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.type, forKey: .type)
    if self.containerImageNames != nil {try container.encode(self.containerImageNames as! [String]?, forKey: .containerImageNames)}
    if self.containerRegistries != nil {try container.encode(self.containerRegistries as! [ContainerRegistryData?]?, forKey: .containerRegistries)}
  }
}

extension DataFactory {
  public static func createContainerConfigurationProtocol(type: String) -> ContainerConfigurationProtocol {
    return ContainerConfigurationData(type: type)
  }
}
