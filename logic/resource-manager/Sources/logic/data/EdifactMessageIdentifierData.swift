// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EdifactMessageIdentifierData : EdifactMessageIdentifierProtocol {
    public var messageId: String

        enum CodingKeys: String, CodingKey {case messageId = "messageId"
        }

  public init(messageId: String)  {
    self.messageId = messageId
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.messageId = try container.decode(String.self, forKey: .messageId)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.messageId, forKey: .messageId)
  }
}

extension DataFactory {
  public static func createEdifactMessageIdentifierProtocol(messageId: String) -> EdifactMessageIdentifierProtocol {
    return EdifactMessageIdentifierData(messageId: messageId)
  }
}
