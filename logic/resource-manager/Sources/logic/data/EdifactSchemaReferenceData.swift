// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EdifactSchemaReferenceData : EdifactSchemaReferenceProtocol {
    public var messageId: String
    public var messageVersion: String
    public var messageRelease: String
    public var senderApplicationId: String?
    public var senderApplicationQualifier: String?
    public var associationAssignedCode: String?
    public var schemaName: String

        enum CodingKeys: String, CodingKey {case messageId = "messageId"
        case messageVersion = "messageVersion"
        case messageRelease = "messageRelease"
        case senderApplicationId = "senderApplicationId"
        case senderApplicationQualifier = "senderApplicationQualifier"
        case associationAssignedCode = "associationAssignedCode"
        case schemaName = "schemaName"
        }

  public init(messageId: String, messageVersion: String, messageRelease: String, schemaName: String)  {
    self.messageId = messageId
    self.messageVersion = messageVersion
    self.messageRelease = messageRelease
    self.schemaName = schemaName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.messageId = try container.decode(String.self, forKey: .messageId)
    self.messageVersion = try container.decode(String.self, forKey: .messageVersion)
    self.messageRelease = try container.decode(String.self, forKey: .messageRelease)
    if container.contains(.senderApplicationId) {
        self.senderApplicationId = try container.decode(String?.self, forKey: .senderApplicationId)
    }
    if container.contains(.senderApplicationQualifier) {
        self.senderApplicationQualifier = try container.decode(String?.self, forKey: .senderApplicationQualifier)
    }
    if container.contains(.associationAssignedCode) {
        self.associationAssignedCode = try container.decode(String?.self, forKey: .associationAssignedCode)
    }
    self.schemaName = try container.decode(String.self, forKey: .schemaName)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.messageId, forKey: .messageId)
    try container.encode(self.messageVersion, forKey: .messageVersion)
    try container.encode(self.messageRelease, forKey: .messageRelease)
    if self.senderApplicationId != nil {try container.encode(self.senderApplicationId, forKey: .senderApplicationId)}
    if self.senderApplicationQualifier != nil {try container.encode(self.senderApplicationQualifier, forKey: .senderApplicationQualifier)}
    if self.associationAssignedCode != nil {try container.encode(self.associationAssignedCode, forKey: .associationAssignedCode)}
    try container.encode(self.schemaName, forKey: .schemaName)
  }
}

extension DataFactory {
  public static func createEdifactSchemaReferenceProtocol(messageId: String, messageVersion: String, messageRelease: String, schemaName: String) -> EdifactSchemaReferenceProtocol {
    return EdifactSchemaReferenceData(messageId: messageId, messageVersion: messageVersion, messageRelease: messageRelease, schemaName: schemaName)
  }
}
