// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct X12MessageFilterData : X12MessageFilterProtocol {
    public var messageFilterType: MessageFilterTypeEnum

        enum CodingKeys: String, CodingKey {case messageFilterType = "messageFilterType"
        }

  public init(messageFilterType: MessageFilterTypeEnum)  {
    self.messageFilterType = messageFilterType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.messageFilterType = try container.decode(MessageFilterTypeEnum.self, forKey: .messageFilterType)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.messageFilterType, forKey: .messageFilterType)
  }
}

extension DataFactory {
  public static func createX12MessageFilterProtocol(messageFilterType: MessageFilterTypeEnum) -> X12MessageFilterProtocol {
    return X12MessageFilterData(messageFilterType: messageFilterType)
  }
}
