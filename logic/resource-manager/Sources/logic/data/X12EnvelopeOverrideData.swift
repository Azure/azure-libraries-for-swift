// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct X12EnvelopeOverrideData : X12EnvelopeOverrideProtocol {
    public var targetNamespace: String
    public var protocolVersion: String
    public var messageId: String
    public var responsibleAgencyCode: String
    public var headerVersion: String
    public var senderApplicationId: String
    public var receiverApplicationId: String
    public var functionalIdentifierCode: String?
    public var dateFormat: X12DateFormatEnum
    public var timeFormat: X12TimeFormatEnum

        enum CodingKeys: String, CodingKey {case targetNamespace = "targetNamespace"
        case protocolVersion = "protocolVersion"
        case messageId = "messageId"
        case responsibleAgencyCode = "responsibleAgencyCode"
        case headerVersion = "headerVersion"
        case senderApplicationId = "senderApplicationId"
        case receiverApplicationId = "receiverApplicationId"
        case functionalIdentifierCode = "functionalIdentifierCode"
        case dateFormat = "dateFormat"
        case timeFormat = "timeFormat"
        }

  public init(targetNamespace: String, protocolVersion: String, messageId: String, responsibleAgencyCode: String, headerVersion: String, senderApplicationId: String, receiverApplicationId: String, dateFormat: X12DateFormatEnum, timeFormat: X12TimeFormatEnum)  {
    self.targetNamespace = targetNamespace
    self.protocolVersion = protocolVersion
    self.messageId = messageId
    self.responsibleAgencyCode = responsibleAgencyCode
    self.headerVersion = headerVersion
    self.senderApplicationId = senderApplicationId
    self.receiverApplicationId = receiverApplicationId
    self.dateFormat = dateFormat
    self.timeFormat = timeFormat
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.targetNamespace = try container.decode(String.self, forKey: .targetNamespace)
    self.protocolVersion = try container.decode(String.self, forKey: .protocolVersion)
    self.messageId = try container.decode(String.self, forKey: .messageId)
    self.responsibleAgencyCode = try container.decode(String.self, forKey: .responsibleAgencyCode)
    self.headerVersion = try container.decode(String.self, forKey: .headerVersion)
    self.senderApplicationId = try container.decode(String.self, forKey: .senderApplicationId)
    self.receiverApplicationId = try container.decode(String.self, forKey: .receiverApplicationId)
    if container.contains(.functionalIdentifierCode) {
        self.functionalIdentifierCode = try container.decode(String?.self, forKey: .functionalIdentifierCode)
    }
    self.dateFormat = try container.decode(X12DateFormatEnum.self, forKey: .dateFormat)
    self.timeFormat = try container.decode(X12TimeFormatEnum.self, forKey: .timeFormat)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.targetNamespace, forKey: .targetNamespace)
    try container.encode(self.protocolVersion, forKey: .protocolVersion)
    try container.encode(self.messageId, forKey: .messageId)
    try container.encode(self.responsibleAgencyCode, forKey: .responsibleAgencyCode)
    try container.encode(self.headerVersion, forKey: .headerVersion)
    try container.encode(self.senderApplicationId, forKey: .senderApplicationId)
    try container.encode(self.receiverApplicationId, forKey: .receiverApplicationId)
    if self.functionalIdentifierCode != nil {try container.encode(self.functionalIdentifierCode, forKey: .functionalIdentifierCode)}
    try container.encode(self.dateFormat, forKey: .dateFormat)
    try container.encode(self.timeFormat, forKey: .timeFormat)
  }
}

extension DataFactory {
  public static func createX12EnvelopeOverrideProtocol(targetNamespace: String, protocolVersion: String, messageId: String, responsibleAgencyCode: String, headerVersion: String, senderApplicationId: String, receiverApplicationId: String, dateFormat: X12DateFormatEnum, timeFormat: X12TimeFormatEnum) -> X12EnvelopeOverrideProtocol {
    return X12EnvelopeOverrideData(targetNamespace: targetNamespace, protocolVersion: protocolVersion, messageId: messageId, responsibleAgencyCode: responsibleAgencyCode, headerVersion: headerVersion, senderApplicationId: senderApplicationId, receiverApplicationId: receiverApplicationId, dateFormat: dateFormat, timeFormat: timeFormat)
  }
}
