// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct IntegrationAccountAgreementPropertiesData : IntegrationAccountAgreementPropertiesProtocol {
    public var createdTime: Date?
    public var changedTime: Date?
    public var metadata: [String: String?]?
    public var agreementType: AgreementTypeEnum
    public var hostPartner: String
    public var guestPartner: String
    public var hostIdentity: BusinessIdentityProtocol
    public var guestIdentity: BusinessIdentityProtocol
    public var content: AgreementContentProtocol

        enum CodingKeys: String, CodingKey {case createdTime = "createdTime"
        case changedTime = "changedTime"
        case metadata = "metadata"
        case agreementType = "agreementType"
        case hostPartner = "hostPartner"
        case guestPartner = "guestPartner"
        case hostIdentity = "hostIdentity"
        case guestIdentity = "guestIdentity"
        case content = "content"
        }

  public init(agreementType: AgreementTypeEnum, hostPartner: String, guestPartner: String, hostIdentity: BusinessIdentityProtocol, guestIdentity: BusinessIdentityProtocol, content: AgreementContentProtocol)  {
    self.agreementType = agreementType
    self.hostPartner = hostPartner
    self.guestPartner = guestPartner
    self.hostIdentity = hostIdentity
    self.guestIdentity = guestIdentity
    self.content = content
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.createdTime) {
        self.createdTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdTime)), format: .dateTime)
    }
    if container.contains(.changedTime) {
        self.changedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .changedTime)), format: .dateTime)
    }
    if container.contains(.metadata) {
        self.metadata = try container.decode([String: String?]?.self, forKey: .metadata)
    }
    self.agreementType = try container.decode(AgreementTypeEnum.self, forKey: .agreementType)
    self.hostPartner = try container.decode(String.self, forKey: .hostPartner)
    self.guestPartner = try container.decode(String.self, forKey: .guestPartner)
    self.hostIdentity = try container.decode(BusinessIdentityData.self, forKey: .hostIdentity)
    self.guestIdentity = try container.decode(BusinessIdentityData.self, forKey: .guestIdentity)
    self.content = try container.decode(AgreementContentData.self, forKey: .content)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.createdTime != nil {
        try container.encode(DateConverter.toString(date: self.createdTime!, format: .dateTime), forKey: .createdTime)
    }
    if self.changedTime != nil {
        try container.encode(DateConverter.toString(date: self.changedTime!, format: .dateTime), forKey: .changedTime)
    }
    if self.metadata != nil {try container.encode(self.metadata, forKey: .metadata)}
    try container.encode(self.agreementType, forKey: .agreementType)
    try container.encode(self.hostPartner, forKey: .hostPartner)
    try container.encode(self.guestPartner, forKey: .guestPartner)
    try container.encode(self.hostIdentity as! BusinessIdentityData, forKey: .hostIdentity)
    try container.encode(self.guestIdentity as! BusinessIdentityData, forKey: .guestIdentity)
    try container.encode(self.content as! AgreementContentData, forKey: .content)
  }
}

extension DataFactory {
  public static func createIntegrationAccountAgreementPropertiesProtocol(agreementType: AgreementTypeEnum, hostPartner: String, guestPartner: String, hostIdentity: BusinessIdentityProtocol, guestIdentity: BusinessIdentityProtocol, content: AgreementContentProtocol) -> IntegrationAccountAgreementPropertiesProtocol {
    return IntegrationAccountAgreementPropertiesData(agreementType: agreementType, hostPartner: hostPartner, guestPartner: guestPartner, hostIdentity: hostIdentity, guestIdentity: guestIdentity, content: content)
  }
}
