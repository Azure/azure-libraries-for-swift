// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct X12SecuritySettingsData : X12SecuritySettingsProtocol {
    public var authorizationQualifier: String
    public var authorizationValue: String?
    public var securityQualifier: String
    public var passwordValue: String?

        enum CodingKeys: String, CodingKey {case authorizationQualifier = "authorizationQualifier"
        case authorizationValue = "authorizationValue"
        case securityQualifier = "securityQualifier"
        case passwordValue = "passwordValue"
        }

  public init(authorizationQualifier: String, securityQualifier: String)  {
    self.authorizationQualifier = authorizationQualifier
    self.securityQualifier = securityQualifier
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.authorizationQualifier = try container.decode(String.self, forKey: .authorizationQualifier)
    if container.contains(.authorizationValue) {
        self.authorizationValue = try container.decode(String?.self, forKey: .authorizationValue)
    }
    self.securityQualifier = try container.decode(String.self, forKey: .securityQualifier)
    if container.contains(.passwordValue) {
        self.passwordValue = try container.decode(String?.self, forKey: .passwordValue)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.authorizationQualifier, forKey: .authorizationQualifier)
    if self.authorizationValue != nil {try container.encode(self.authorizationValue, forKey: .authorizationValue)}
    try container.encode(self.securityQualifier, forKey: .securityQualifier)
    if self.passwordValue != nil {try container.encode(self.passwordValue, forKey: .passwordValue)}
  }
}

extension DataFactory {
  public static func createX12SecuritySettingsProtocol(authorizationQualifier: String, securityQualifier: String) -> X12SecuritySettingsProtocol {
    return X12SecuritySettingsData(authorizationQualifier: authorizationQualifier, securityQualifier: securityQualifier)
  }
}
