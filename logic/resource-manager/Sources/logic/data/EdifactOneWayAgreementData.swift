// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EdifactOneWayAgreementData : EdifactOneWayAgreementProtocol {
    public var senderBusinessIdentity: BusinessIdentityProtocol
    public var receiverBusinessIdentity: BusinessIdentityProtocol
    public var protocolSettings: EdifactProtocolSettingsProtocol

        enum CodingKeys: String, CodingKey {case senderBusinessIdentity = "senderBusinessIdentity"
        case receiverBusinessIdentity = "receiverBusinessIdentity"
        case protocolSettings = "protocolSettings"
        }

  public init(senderBusinessIdentity: BusinessIdentityProtocol, receiverBusinessIdentity: BusinessIdentityProtocol, protocolSettings: EdifactProtocolSettingsProtocol)  {
    self.senderBusinessIdentity = senderBusinessIdentity
    self.receiverBusinessIdentity = receiverBusinessIdentity
    self.protocolSettings = protocolSettings
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.senderBusinessIdentity = try container.decode(BusinessIdentityData.self, forKey: .senderBusinessIdentity)
    self.receiverBusinessIdentity = try container.decode(BusinessIdentityData.self, forKey: .receiverBusinessIdentity)
    self.protocolSettings = try container.decode(EdifactProtocolSettingsData.self, forKey: .protocolSettings)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.senderBusinessIdentity as! BusinessIdentityData, forKey: .senderBusinessIdentity)
    try container.encode(self.receiverBusinessIdentity as! BusinessIdentityData, forKey: .receiverBusinessIdentity)
    try container.encode(self.protocolSettings as! EdifactProtocolSettingsData, forKey: .protocolSettings)
  }
}

extension DataFactory {
  public static func createEdifactOneWayAgreementProtocol(senderBusinessIdentity: BusinessIdentityProtocol, receiverBusinessIdentity: BusinessIdentityProtocol, protocolSettings: EdifactProtocolSettingsProtocol) -> EdifactOneWayAgreementProtocol {
    return EdifactOneWayAgreementData(senderBusinessIdentity: senderBusinessIdentity, receiverBusinessIdentity: receiverBusinessIdentity, protocolSettings: protocolSettings)
  }
}
