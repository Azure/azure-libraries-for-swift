// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AS2ProtocolSettingsData : AS2ProtocolSettingsProtocol {
    public var messageConnectionSettings: AS2MessageConnectionSettingsProtocol
    public var acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettingsProtocol
    public var mdnSettings: AS2MdnSettingsProtocol
    public var securitySettings: AS2SecuritySettingsProtocol
    public var validationSettings: AS2ValidationSettingsProtocol
    public var envelopeSettings: AS2EnvelopeSettingsProtocol
    public var errorSettings: AS2ErrorSettingsProtocol

        enum CodingKeys: String, CodingKey {case messageConnectionSettings = "messageConnectionSettings"
        case acknowledgementConnectionSettings = "acknowledgementConnectionSettings"
        case mdnSettings = "mdnSettings"
        case securitySettings = "securitySettings"
        case validationSettings = "validationSettings"
        case envelopeSettings = "envelopeSettings"
        case errorSettings = "errorSettings"
        }

  public init(messageConnectionSettings: AS2MessageConnectionSettingsProtocol, acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettingsProtocol, mdnSettings: AS2MdnSettingsProtocol, securitySettings: AS2SecuritySettingsProtocol, validationSettings: AS2ValidationSettingsProtocol, envelopeSettings: AS2EnvelopeSettingsProtocol, errorSettings: AS2ErrorSettingsProtocol)  {
    self.messageConnectionSettings = messageConnectionSettings
    self.acknowledgementConnectionSettings = acknowledgementConnectionSettings
    self.mdnSettings = mdnSettings
    self.securitySettings = securitySettings
    self.validationSettings = validationSettings
    self.envelopeSettings = envelopeSettings
    self.errorSettings = errorSettings
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.messageConnectionSettings = try container.decode(AS2MessageConnectionSettingsData.self, forKey: .messageConnectionSettings)
    self.acknowledgementConnectionSettings = try container.decode(AS2AcknowledgementConnectionSettingsData.self, forKey: .acknowledgementConnectionSettings)
    self.mdnSettings = try container.decode(AS2MdnSettingsData.self, forKey: .mdnSettings)
    self.securitySettings = try container.decode(AS2SecuritySettingsData.self, forKey: .securitySettings)
    self.validationSettings = try container.decode(AS2ValidationSettingsData.self, forKey: .validationSettings)
    self.envelopeSettings = try container.decode(AS2EnvelopeSettingsData.self, forKey: .envelopeSettings)
    self.errorSettings = try container.decode(AS2ErrorSettingsData.self, forKey: .errorSettings)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.messageConnectionSettings as! AS2MessageConnectionSettingsData, forKey: .messageConnectionSettings)
    try container.encode(self.acknowledgementConnectionSettings as! AS2AcknowledgementConnectionSettingsData, forKey: .acknowledgementConnectionSettings)
    try container.encode(self.mdnSettings as! AS2MdnSettingsData, forKey: .mdnSettings)
    try container.encode(self.securitySettings as! AS2SecuritySettingsData, forKey: .securitySettings)
    try container.encode(self.validationSettings as! AS2ValidationSettingsData, forKey: .validationSettings)
    try container.encode(self.envelopeSettings as! AS2EnvelopeSettingsData, forKey: .envelopeSettings)
    try container.encode(self.errorSettings as! AS2ErrorSettingsData, forKey: .errorSettings)
  }
}

extension DataFactory {
  public static func createAS2ProtocolSettingsProtocol(messageConnectionSettings: AS2MessageConnectionSettingsProtocol, acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettingsProtocol, mdnSettings: AS2MdnSettingsProtocol, securitySettings: AS2SecuritySettingsProtocol, validationSettings: AS2ValidationSettingsProtocol, envelopeSettings: AS2EnvelopeSettingsProtocol, errorSettings: AS2ErrorSettingsProtocol) -> AS2ProtocolSettingsProtocol {
    return AS2ProtocolSettingsData(messageConnectionSettings: messageConnectionSettings, acknowledgementConnectionSettings: acknowledgementConnectionSettings, mdnSettings: mdnSettings, securitySettings: securitySettings, validationSettings: validationSettings, envelopeSettings: envelopeSettings, errorSettings: errorSettings)
  }
}
