// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct WorkflowTriggerPropertiesData : WorkflowTriggerPropertiesProtocol {
    public var provisioningState: WorkflowTriggerProvisioningStateEnum?
    public var createdTime: Date?
    public var changedTime: Date?
    public var state: WorkflowStateEnum?
    public var status: WorkflowStatusEnum?
    public var lastExecutionTime: Date?
    public var nextExecutionTime: Date?
    public var recurrence: WorkflowTriggerRecurrenceProtocol?
    public var workflow: ResourceReferenceProtocol?

        enum CodingKeys: String, CodingKey {case provisioningState = "provisioningState"
        case createdTime = "createdTime"
        case changedTime = "changedTime"
        case state = "state"
        case status = "status"
        case lastExecutionTime = "lastExecutionTime"
        case nextExecutionTime = "nextExecutionTime"
        case recurrence = "recurrence"
        case workflow = "workflow"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(WorkflowTriggerProvisioningStateEnum?.self, forKey: .provisioningState)
    }
    if container.contains(.createdTime) {
        self.createdTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdTime)), format: .dateTime)
    }
    if container.contains(.changedTime) {
        self.changedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .changedTime)), format: .dateTime)
    }
    if container.contains(.state) {
        self.state = try container.decode(WorkflowStateEnum?.self, forKey: .state)
    }
    if container.contains(.status) {
        self.status = try container.decode(WorkflowStatusEnum?.self, forKey: .status)
    }
    if container.contains(.lastExecutionTime) {
        self.lastExecutionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastExecutionTime)), format: .dateTime)
    }
    if container.contains(.nextExecutionTime) {
        self.nextExecutionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .nextExecutionTime)), format: .dateTime)
    }
    if container.contains(.recurrence) {
        self.recurrence = try container.decode(WorkflowTriggerRecurrenceData?.self, forKey: .recurrence)
    }
    if container.contains(.workflow) {
        self.workflow = try container.decode(ResourceReferenceData?.self, forKey: .workflow)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.createdTime != nil {
        try container.encode(DateConverter.toString(date: self.createdTime!, format: .dateTime), forKey: .createdTime)
    }
    if self.changedTime != nil {
        try container.encode(DateConverter.toString(date: self.changedTime!, format: .dateTime), forKey: .changedTime)
    }
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.lastExecutionTime != nil {
        try container.encode(DateConverter.toString(date: self.lastExecutionTime!, format: .dateTime), forKey: .lastExecutionTime)
    }
    if self.nextExecutionTime != nil {
        try container.encode(DateConverter.toString(date: self.nextExecutionTime!, format: .dateTime), forKey: .nextExecutionTime)
    }
    if self.recurrence != nil {try container.encode(self.recurrence as! WorkflowTriggerRecurrenceData?, forKey: .recurrence)}
    if self.workflow != nil {try container.encode(self.workflow as! ResourceReferenceData?, forKey: .workflow)}
  }
}

extension DataFactory {
  public static func createWorkflowTriggerPropertiesProtocol() -> WorkflowTriggerPropertiesProtocol {
    return WorkflowTriggerPropertiesData()
  }
}
