// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AgreementContentData : AgreementContentProtocol {
    public var aS2: AS2AgreementContentProtocol?
    public var x12: X12AgreementContentProtocol?
    public var edifact: EdifactAgreementContentProtocol?

        enum CodingKeys: String, CodingKey {case aS2 = "aS2"
        case x12 = "x12"
        case edifact = "edifact"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.aS2) {
        self.aS2 = try container.decode(AS2AgreementContentData?.self, forKey: .aS2)
    }
    if container.contains(.x12) {
        self.x12 = try container.decode(X12AgreementContentData?.self, forKey: .x12)
    }
    if container.contains(.edifact) {
        self.edifact = try container.decode(EdifactAgreementContentData?.self, forKey: .edifact)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.aS2 != nil {try container.encode(self.aS2 as! AS2AgreementContentData?, forKey: .aS2)}
    if self.x12 != nil {try container.encode(self.x12 as! X12AgreementContentData?, forKey: .x12)}
    if self.edifact != nil {try container.encode(self.edifact as! EdifactAgreementContentData?, forKey: .edifact)}
  }
}

extension DataFactory {
  public static func createAgreementContentProtocol() -> AgreementContentProtocol {
    return AgreementContentData()
  }
}
