// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct X12FramingSettingsData : X12FramingSettingsProtocol {
    public var dataElementSeparator: Int32
    public var componentSeparator: Int32
    public var replaceSeparatorsInPayload: Bool
    public var replaceCharacter: Int32
    public var segmentTerminator: Int32
    public var characterSet: X12CharacterSetEnum
    public var segmentTerminatorSuffix: SegmentTerminatorSuffixEnum

        enum CodingKeys: String, CodingKey {case dataElementSeparator = "dataElementSeparator"
        case componentSeparator = "componentSeparator"
        case replaceSeparatorsInPayload = "replaceSeparatorsInPayload"
        case replaceCharacter = "replaceCharacter"
        case segmentTerminator = "segmentTerminator"
        case characterSet = "characterSet"
        case segmentTerminatorSuffix = "segmentTerminatorSuffix"
        }

  public init(dataElementSeparator: Int32, componentSeparator: Int32, replaceSeparatorsInPayload: Bool, replaceCharacter: Int32, segmentTerminator: Int32, characterSet: X12CharacterSetEnum, segmentTerminatorSuffix: SegmentTerminatorSuffixEnum)  {
    self.dataElementSeparator = dataElementSeparator
    self.componentSeparator = componentSeparator
    self.replaceSeparatorsInPayload = replaceSeparatorsInPayload
    self.replaceCharacter = replaceCharacter
    self.segmentTerminator = segmentTerminator
    self.characterSet = characterSet
    self.segmentTerminatorSuffix = segmentTerminatorSuffix
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.dataElementSeparator = try container.decode(Int32.self, forKey: .dataElementSeparator)
    self.componentSeparator = try container.decode(Int32.self, forKey: .componentSeparator)
    self.replaceSeparatorsInPayload = try container.decode(Bool.self, forKey: .replaceSeparatorsInPayload)
    self.replaceCharacter = try container.decode(Int32.self, forKey: .replaceCharacter)
    self.segmentTerminator = try container.decode(Int32.self, forKey: .segmentTerminator)
    self.characterSet = try container.decode(X12CharacterSetEnum.self, forKey: .characterSet)
    self.segmentTerminatorSuffix = try container.decode(SegmentTerminatorSuffixEnum.self, forKey: .segmentTerminatorSuffix)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.dataElementSeparator, forKey: .dataElementSeparator)
    try container.encode(self.componentSeparator, forKey: .componentSeparator)
    try container.encode(self.replaceSeparatorsInPayload, forKey: .replaceSeparatorsInPayload)
    try container.encode(self.replaceCharacter, forKey: .replaceCharacter)
    try container.encode(self.segmentTerminator, forKey: .segmentTerminator)
    try container.encode(self.characterSet, forKey: .characterSet)
    try container.encode(self.segmentTerminatorSuffix, forKey: .segmentTerminatorSuffix)
  }
}

extension DataFactory {
  public static func createX12FramingSettingsProtocol(dataElementSeparator: Int32, componentSeparator: Int32, replaceSeparatorsInPayload: Bool, replaceCharacter: Int32, segmentTerminator: Int32, characterSet: X12CharacterSetEnum, segmentTerminatorSuffix: SegmentTerminatorSuffixEnum) -> X12FramingSettingsProtocol {
    return X12FramingSettingsData(dataElementSeparator: dataElementSeparator, componentSeparator: componentSeparator, replaceSeparatorsInPayload: replaceSeparatorsInPayload, replaceCharacter: replaceCharacter, segmentTerminator: segmentTerminator, characterSet: characterSet, segmentTerminatorSuffix: segmentTerminatorSuffix)
  }
}
