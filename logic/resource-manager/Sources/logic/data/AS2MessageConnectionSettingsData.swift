// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AS2MessageConnectionSettingsData : AS2MessageConnectionSettingsProtocol {
    public var ignoreCertificateNameMismatch: Bool
    public var supportHttpStatusCodeContinue: Bool
    public var keepHttpConnectionAlive: Bool
    public var unfoldHttpHeaders: Bool

        enum CodingKeys: String, CodingKey {case ignoreCertificateNameMismatch = "ignoreCertificateNameMismatch"
        case supportHttpStatusCodeContinue = "supportHttpStatusCodeContinue"
        case keepHttpConnectionAlive = "keepHttpConnectionAlive"
        case unfoldHttpHeaders = "unfoldHttpHeaders"
        }

  public init(ignoreCertificateNameMismatch: Bool, supportHttpStatusCodeContinue: Bool, keepHttpConnectionAlive: Bool, unfoldHttpHeaders: Bool)  {
    self.ignoreCertificateNameMismatch = ignoreCertificateNameMismatch
    self.supportHttpStatusCodeContinue = supportHttpStatusCodeContinue
    self.keepHttpConnectionAlive = keepHttpConnectionAlive
    self.unfoldHttpHeaders = unfoldHttpHeaders
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.ignoreCertificateNameMismatch = try container.decode(Bool.self, forKey: .ignoreCertificateNameMismatch)
    self.supportHttpStatusCodeContinue = try container.decode(Bool.self, forKey: .supportHttpStatusCodeContinue)
    self.keepHttpConnectionAlive = try container.decode(Bool.self, forKey: .keepHttpConnectionAlive)
    self.unfoldHttpHeaders = try container.decode(Bool.self, forKey: .unfoldHttpHeaders)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.ignoreCertificateNameMismatch, forKey: .ignoreCertificateNameMismatch)
    try container.encode(self.supportHttpStatusCodeContinue, forKey: .supportHttpStatusCodeContinue)
    try container.encode(self.keepHttpConnectionAlive, forKey: .keepHttpConnectionAlive)
    try container.encode(self.unfoldHttpHeaders, forKey: .unfoldHttpHeaders)
  }
}

extension DataFactory {
  public static func createAS2MessageConnectionSettingsProtocol(ignoreCertificateNameMismatch: Bool, supportHttpStatusCodeContinue: Bool, keepHttpConnectionAlive: Bool, unfoldHttpHeaders: Bool) -> AS2MessageConnectionSettingsProtocol {
    return AS2MessageConnectionSettingsData(ignoreCertificateNameMismatch: ignoreCertificateNameMismatch, supportHttpStatusCodeContinue: supportHttpStatusCodeContinue, keepHttpConnectionAlive: keepHttpConnectionAlive, unfoldHttpHeaders: unfoldHttpHeaders)
  }
}
