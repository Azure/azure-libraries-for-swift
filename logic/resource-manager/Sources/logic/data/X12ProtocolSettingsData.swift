// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct X12ProtocolSettingsData : X12ProtocolSettingsProtocol {
    public var validationSettings: X12ValidationSettingsProtocol
    public var framingSettings: X12FramingSettingsProtocol
    public var envelopeSettings: X12EnvelopeSettingsProtocol
    public var acknowledgementSettings: X12AcknowledgementSettingsProtocol
    public var messageFilter: X12MessageFilterProtocol
    public var securitySettings: X12SecuritySettingsProtocol
    public var processingSettings: X12ProcessingSettingsProtocol
    public var envelopeOverrides: [X12EnvelopeOverrideProtocol?]?
    public var validationOverrides: [X12ValidationOverrideProtocol?]?
    public var messageFilterList: [X12MessageIdentifierProtocol?]?
    public var schemaReferences: [X12SchemaReferenceProtocol]
    public var x12DelimiterOverrides: [X12DelimiterOverridesProtocol?]?

        enum CodingKeys: String, CodingKey {case validationSettings = "validationSettings"
        case framingSettings = "framingSettings"
        case envelopeSettings = "envelopeSettings"
        case acknowledgementSettings = "acknowledgementSettings"
        case messageFilter = "messageFilter"
        case securitySettings = "securitySettings"
        case processingSettings = "processingSettings"
        case envelopeOverrides = "envelopeOverrides"
        case validationOverrides = "validationOverrides"
        case messageFilterList = "messageFilterList"
        case schemaReferences = "schemaReferences"
        case x12DelimiterOverrides = "x12DelimiterOverrides"
        }

  public init(validationSettings: X12ValidationSettingsProtocol, framingSettings: X12FramingSettingsProtocol, envelopeSettings: X12EnvelopeSettingsProtocol, acknowledgementSettings: X12AcknowledgementSettingsProtocol, messageFilter: X12MessageFilterProtocol, securitySettings: X12SecuritySettingsProtocol, processingSettings: X12ProcessingSettingsProtocol, schemaReferences: [X12SchemaReferenceProtocol])  {
    self.validationSettings = validationSettings
    self.framingSettings = framingSettings
    self.envelopeSettings = envelopeSettings
    self.acknowledgementSettings = acknowledgementSettings
    self.messageFilter = messageFilter
    self.securitySettings = securitySettings
    self.processingSettings = processingSettings
    self.schemaReferences = schemaReferences
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.validationSettings = try container.decode(X12ValidationSettingsData.self, forKey: .validationSettings)
    self.framingSettings = try container.decode(X12FramingSettingsData.self, forKey: .framingSettings)
    self.envelopeSettings = try container.decode(X12EnvelopeSettingsData.self, forKey: .envelopeSettings)
    self.acknowledgementSettings = try container.decode(X12AcknowledgementSettingsData.self, forKey: .acknowledgementSettings)
    self.messageFilter = try container.decode(X12MessageFilterData.self, forKey: .messageFilter)
    self.securitySettings = try container.decode(X12SecuritySettingsData.self, forKey: .securitySettings)
    self.processingSettings = try container.decode(X12ProcessingSettingsData.self, forKey: .processingSettings)
    if container.contains(.envelopeOverrides) {
        self.envelopeOverrides = try container.decode([X12EnvelopeOverrideData?]?.self, forKey: .envelopeOverrides)
    }
    if container.contains(.validationOverrides) {
        self.validationOverrides = try container.decode([X12ValidationOverrideData?]?.self, forKey: .validationOverrides)
    }
    if container.contains(.messageFilterList) {
        self.messageFilterList = try container.decode([X12MessageIdentifierData?]?.self, forKey: .messageFilterList)
    }
    self.schemaReferences = try container.decode([X12SchemaReferenceData].self, forKey: .schemaReferences)
    if container.contains(.x12DelimiterOverrides) {
        self.x12DelimiterOverrides = try container.decode([X12DelimiterOverridesData?]?.self, forKey: .x12DelimiterOverrides)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.validationSettings as! X12ValidationSettingsData, forKey: .validationSettings)
    try container.encode(self.framingSettings as! X12FramingSettingsData, forKey: .framingSettings)
    try container.encode(self.envelopeSettings as! X12EnvelopeSettingsData, forKey: .envelopeSettings)
    try container.encode(self.acknowledgementSettings as! X12AcknowledgementSettingsData, forKey: .acknowledgementSettings)
    try container.encode(self.messageFilter as! X12MessageFilterData, forKey: .messageFilter)
    try container.encode(self.securitySettings as! X12SecuritySettingsData, forKey: .securitySettings)
    try container.encode(self.processingSettings as! X12ProcessingSettingsData, forKey: .processingSettings)
    if self.envelopeOverrides != nil {try container.encode(self.envelopeOverrides as! [X12EnvelopeOverrideData?]?, forKey: .envelopeOverrides)}
    if self.validationOverrides != nil {try container.encode(self.validationOverrides as! [X12ValidationOverrideData?]?, forKey: .validationOverrides)}
    if self.messageFilterList != nil {try container.encode(self.messageFilterList as! [X12MessageIdentifierData?]?, forKey: .messageFilterList)}
    try container.encode(self.schemaReferences as! [X12SchemaReferenceData], forKey: .schemaReferences)
    if self.x12DelimiterOverrides != nil {try container.encode(self.x12DelimiterOverrides as! [X12DelimiterOverridesData?]?, forKey: .x12DelimiterOverrides)}
  }
}

extension DataFactory {
  public static func createX12ProtocolSettingsProtocol(validationSettings: X12ValidationSettingsProtocol, framingSettings: X12FramingSettingsProtocol, envelopeSettings: X12EnvelopeSettingsProtocol, acknowledgementSettings: X12AcknowledgementSettingsProtocol, messageFilter: X12MessageFilterProtocol, securitySettings: X12SecuritySettingsProtocol, processingSettings: X12ProcessingSettingsProtocol, schemaReferences: [X12SchemaReferenceProtocol]) -> X12ProtocolSettingsProtocol {
    return X12ProtocolSettingsData(validationSettings: validationSettings, framingSettings: framingSettings, envelopeSettings: envelopeSettings, acknowledgementSettings: acknowledgementSettings, messageFilter: messageFilter, securitySettings: securitySettings, processingSettings: processingSettings, schemaReferences: schemaReferences)
  }
}
