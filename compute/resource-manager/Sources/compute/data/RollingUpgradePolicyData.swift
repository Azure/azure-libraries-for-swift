// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RollingUpgradePolicyData : RollingUpgradePolicyProtocol {
    public var maxBatchInstancePercent: Int32?
    public var maxUnhealthyInstancePercent: Int32?
    public var maxUnhealthyUpgradedInstancePercent: Int32?
    public var pauseTimeBetweenBatches: String?

        enum CodingKeys: String, CodingKey {case maxBatchInstancePercent = "maxBatchInstancePercent"
        case maxUnhealthyInstancePercent = "maxUnhealthyInstancePercent"
        case maxUnhealthyUpgradedInstancePercent = "maxUnhealthyUpgradedInstancePercent"
        case pauseTimeBetweenBatches = "pauseTimeBetweenBatches"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.maxBatchInstancePercent) {
        self.maxBatchInstancePercent = try container.decode(Int32?.self, forKey: .maxBatchInstancePercent)
    }
    if container.contains(.maxUnhealthyInstancePercent) {
        self.maxUnhealthyInstancePercent = try container.decode(Int32?.self, forKey: .maxUnhealthyInstancePercent)
    }
    if container.contains(.maxUnhealthyUpgradedInstancePercent) {
        self.maxUnhealthyUpgradedInstancePercent = try container.decode(Int32?.self, forKey: .maxUnhealthyUpgradedInstancePercent)
    }
    if container.contains(.pauseTimeBetweenBatches) {
        self.pauseTimeBetweenBatches = try container.decode(String?.self, forKey: .pauseTimeBetweenBatches)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.maxBatchInstancePercent != nil {try container.encode(self.maxBatchInstancePercent, forKey: .maxBatchInstancePercent)}
    if self.maxUnhealthyInstancePercent != nil {try container.encode(self.maxUnhealthyInstancePercent, forKey: .maxUnhealthyInstancePercent)}
    if self.maxUnhealthyUpgradedInstancePercent != nil {try container.encode(self.maxUnhealthyUpgradedInstancePercent, forKey: .maxUnhealthyUpgradedInstancePercent)}
    if self.pauseTimeBetweenBatches != nil {try container.encode(self.pauseTimeBetweenBatches, forKey: .pauseTimeBetweenBatches)}
  }
}

extension DataFactory {
  public static func createRollingUpgradePolicyProtocol() -> RollingUpgradePolicyProtocol {
    return RollingUpgradePolicyData()
  }
}
