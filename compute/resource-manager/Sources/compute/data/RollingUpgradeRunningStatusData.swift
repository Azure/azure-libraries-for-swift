// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RollingUpgradeRunningStatusData : RollingUpgradeRunningStatusProtocol {
    public var code: RollingUpgradeStatusCodeEnum?
    public var startTime: Date?
    public var lastAction: RollingUpgradeActionTypeEnum?
    public var lastActionTime: Date?

        enum CodingKeys: String, CodingKey {case code = "code"
        case startTime = "startTime"
        case lastAction = "lastAction"
        case lastActionTime = "lastActionTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.code) {
        self.code = try container.decode(RollingUpgradeStatusCodeEnum?.self, forKey: .code)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.lastAction) {
        self.lastAction = try container.decode(RollingUpgradeActionTypeEnum?.self, forKey: .lastAction)
    }
    if container.contains(.lastActionTime) {
        self.lastActionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastActionTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.code != nil {try container.encode(self.code, forKey: .code)}
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.lastAction != nil {try container.encode(self.lastAction, forKey: .lastAction)}
    if self.lastActionTime != nil {
        try container.encode(DateConverter.toString(date: self.lastActionTime!, format: .dateTime), forKey: .lastActionTime)
    }
  }
}

extension DataFactory {
  public static func createRollingUpgradeRunningStatusProtocol() -> RollingUpgradeRunningStatusProtocol {
    return RollingUpgradeRunningStatusData()
  }
}
