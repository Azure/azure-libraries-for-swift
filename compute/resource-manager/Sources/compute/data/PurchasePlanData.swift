// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PurchasePlanData : PurchasePlanProtocol {
    public var publisher: String
    public var name: String
    public var product: String

        enum CodingKeys: String, CodingKey {case publisher = "publisher"
        case name = "name"
        case product = "product"
        }

  public init(publisher: String, name: String, product: String)  {
    self.publisher = publisher
    self.name = name
    self.product = product
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.publisher = try container.decode(String.self, forKey: .publisher)
    self.name = try container.decode(String.self, forKey: .name)
    self.product = try container.decode(String.self, forKey: .product)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.publisher, forKey: .publisher)
    try container.encode(self.name, forKey: .name)
    try container.encode(self.product, forKey: .product)
  }
}

extension DataFactory {
  public static func createPurchasePlanProtocol(publisher: String, name: String, product: String) -> PurchasePlanProtocol {
    return PurchasePlanData(publisher: publisher, name: name, product: product)
  }
}
