// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DiskUpdatePropertiesData : DiskUpdatePropertiesProtocol {
    public var osType: OperatingSystemTypesEnum?
    public var diskSizeGB: Int32?
    public var encryptionSettings: EncryptionSettingsProtocol?

        enum CodingKeys: String, CodingKey {case osType = "osType"
        case diskSizeGB = "diskSizeGB"
        case encryptionSettings = "encryptionSettings"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.osType) {
        self.osType = try container.decode(OperatingSystemTypesEnum?.self, forKey: .osType)
    }
    if container.contains(.diskSizeGB) {
        self.diskSizeGB = try container.decode(Int32?.self, forKey: .diskSizeGB)
    }
    if container.contains(.encryptionSettings) {
        self.encryptionSettings = try container.decode(EncryptionSettingsData?.self, forKey: .encryptionSettings)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.diskSizeGB != nil {try container.encode(self.diskSizeGB, forKey: .diskSizeGB)}
    if self.encryptionSettings != nil {try container.encode(self.encryptionSettings as! EncryptionSettingsData?, forKey: .encryptionSettings)}
  }
}

extension DataFactory {
  public static func createDiskUpdatePropertiesProtocol() -> DiskUpdatePropertiesProtocol {
    return DiskUpdatePropertiesData()
  }
}
