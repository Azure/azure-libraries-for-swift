// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineInstanceViewData : VirtualMachineInstanceViewProtocol {
    public var platformUpdateDomain: Int32?
    public var platformFaultDomain: Int32?
    public var computerName: String?
    public var osName: String?
    public var osVersion: String?
    public var rdpThumbPrint: String?
    public var vmAgent: VirtualMachineAgentInstanceViewProtocol?
    public var maintenanceRedeployStatus: MaintenanceRedeployStatusProtocol?
    public var disks: [DiskInstanceViewProtocol?]?
    public var extensions: [VirtualMachineExtensionInstanceViewProtocol?]?
    public var bootDiagnostics: BootDiagnosticsInstanceViewProtocol?
    public var statuses: [InstanceViewStatusProtocol?]?

        enum CodingKeys: String, CodingKey {case platformUpdateDomain = "platformUpdateDomain"
        case platformFaultDomain = "platformFaultDomain"
        case computerName = "computerName"
        case osName = "osName"
        case osVersion = "osVersion"
        case rdpThumbPrint = "rdpThumbPrint"
        case vmAgent = "vmAgent"
        case maintenanceRedeployStatus = "maintenanceRedeployStatus"
        case disks = "disks"
        case extensions = "extensions"
        case bootDiagnostics = "bootDiagnostics"
        case statuses = "statuses"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.platformUpdateDomain) {
        self.platformUpdateDomain = try container.decode(Int32?.self, forKey: .platformUpdateDomain)
    }
    if container.contains(.platformFaultDomain) {
        self.platformFaultDomain = try container.decode(Int32?.self, forKey: .platformFaultDomain)
    }
    if container.contains(.computerName) {
        self.computerName = try container.decode(String?.self, forKey: .computerName)
    }
    if container.contains(.osName) {
        self.osName = try container.decode(String?.self, forKey: .osName)
    }
    if container.contains(.osVersion) {
        self.osVersion = try container.decode(String?.self, forKey: .osVersion)
    }
    if container.contains(.rdpThumbPrint) {
        self.rdpThumbPrint = try container.decode(String?.self, forKey: .rdpThumbPrint)
    }
    if container.contains(.vmAgent) {
        self.vmAgent = try container.decode(VirtualMachineAgentInstanceViewData?.self, forKey: .vmAgent)
    }
    if container.contains(.maintenanceRedeployStatus) {
        self.maintenanceRedeployStatus = try container.decode(MaintenanceRedeployStatusData?.self, forKey: .maintenanceRedeployStatus)
    }
    if container.contains(.disks) {
        self.disks = try container.decode([DiskInstanceViewData?]?.self, forKey: .disks)
    }
    if container.contains(.extensions) {
        self.extensions = try container.decode([VirtualMachineExtensionInstanceViewData?]?.self, forKey: .extensions)
    }
    if container.contains(.bootDiagnostics) {
        self.bootDiagnostics = try container.decode(BootDiagnosticsInstanceViewData?.self, forKey: .bootDiagnostics)
    }
    if container.contains(.statuses) {
        self.statuses = try container.decode([InstanceViewStatusData?]?.self, forKey: .statuses)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.platformUpdateDomain != nil {try container.encode(self.platformUpdateDomain, forKey: .platformUpdateDomain)}
    if self.platformFaultDomain != nil {try container.encode(self.platformFaultDomain, forKey: .platformFaultDomain)}
    if self.computerName != nil {try container.encode(self.computerName, forKey: .computerName)}
    if self.osName != nil {try container.encode(self.osName, forKey: .osName)}
    if self.osVersion != nil {try container.encode(self.osVersion, forKey: .osVersion)}
    if self.rdpThumbPrint != nil {try container.encode(self.rdpThumbPrint, forKey: .rdpThumbPrint)}
    if self.vmAgent != nil {try container.encode(self.vmAgent as! VirtualMachineAgentInstanceViewData?, forKey: .vmAgent)}
    if self.maintenanceRedeployStatus != nil {try container.encode(self.maintenanceRedeployStatus as! MaintenanceRedeployStatusData?, forKey: .maintenanceRedeployStatus)}
    if self.disks != nil {try container.encode(self.disks as! [DiskInstanceViewData?]?, forKey: .disks)}
    if self.extensions != nil {try container.encode(self.extensions as! [VirtualMachineExtensionInstanceViewData?]?, forKey: .extensions)}
    if self.bootDiagnostics != nil {try container.encode(self.bootDiagnostics as! BootDiagnosticsInstanceViewData?, forKey: .bootDiagnostics)}
    if self.statuses != nil {try container.encode(self.statuses as! [InstanceViewStatusData?]?, forKey: .statuses)}
  }
}

extension DataFactory {
  public static func createVirtualMachineInstanceViewProtocol() -> VirtualMachineInstanceViewProtocol {
    return VirtualMachineInstanceViewData()
  }
}
