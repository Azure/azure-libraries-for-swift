// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineScaleSetUpdateOSProfileData : VirtualMachineScaleSetUpdateOSProfileProtocol {
    public var customData: String?
    public var windowsConfiguration: WindowsConfigurationProtocol?
    public var linuxConfiguration: LinuxConfigurationProtocol?
    public var secrets: [VaultSecretGroupProtocol?]?

        enum CodingKeys: String, CodingKey {case customData = "customData"
        case windowsConfiguration = "windowsConfiguration"
        case linuxConfiguration = "linuxConfiguration"
        case secrets = "secrets"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.customData) {
        self.customData = try container.decode(String?.self, forKey: .customData)
    }
    if container.contains(.windowsConfiguration) {
        self.windowsConfiguration = try container.decode(WindowsConfigurationData?.self, forKey: .windowsConfiguration)
    }
    if container.contains(.linuxConfiguration) {
        self.linuxConfiguration = try container.decode(LinuxConfigurationData?.self, forKey: .linuxConfiguration)
    }
    if container.contains(.secrets) {
        self.secrets = try container.decode([VaultSecretGroupData?]?.self, forKey: .secrets)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.customData != nil {try container.encode(self.customData, forKey: .customData)}
    if self.windowsConfiguration != nil {try container.encode(self.windowsConfiguration as! WindowsConfigurationData?, forKey: .windowsConfiguration)}
    if self.linuxConfiguration != nil {try container.encode(self.linuxConfiguration as! LinuxConfigurationData?, forKey: .linuxConfiguration)}
    if self.secrets != nil {try container.encode(self.secrets as! [VaultSecretGroupData?]?, forKey: .secrets)}
  }
}

extension DataFactory {
  public static func createVirtualMachineScaleSetUpdateOSProfileProtocol() -> VirtualMachineScaleSetUpdateOSProfileProtocol {
    return VirtualMachineScaleSetUpdateOSProfileData()
  }
}
