// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineScaleSetUpdateVMProfileData : VirtualMachineScaleSetUpdateVMProfileProtocol {
    public var osProfile: VirtualMachineScaleSetUpdateOSProfileProtocol?
    public var storageProfile: VirtualMachineScaleSetUpdateStorageProfileProtocol?
    public var networkProfile: VirtualMachineScaleSetUpdateNetworkProfileProtocol?
    public var diagnosticsProfile: DiagnosticsProfileProtocol?
    public var extensionProfile: VirtualMachineScaleSetExtensionProfileProtocol?
    public var licenseType: String?

        enum CodingKeys: String, CodingKey {case osProfile = "osProfile"
        case storageProfile = "storageProfile"
        case networkProfile = "networkProfile"
        case diagnosticsProfile = "diagnosticsProfile"
        case extensionProfile = "extensionProfile"
        case licenseType = "licenseType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.osProfile) {
        self.osProfile = try container.decode(VirtualMachineScaleSetUpdateOSProfileData?.self, forKey: .osProfile)
    }
    if container.contains(.storageProfile) {
        self.storageProfile = try container.decode(VirtualMachineScaleSetUpdateStorageProfileData?.self, forKey: .storageProfile)
    }
    if container.contains(.networkProfile) {
        self.networkProfile = try container.decode(VirtualMachineScaleSetUpdateNetworkProfileData?.self, forKey: .networkProfile)
    }
    if container.contains(.diagnosticsProfile) {
        self.diagnosticsProfile = try container.decode(DiagnosticsProfileData?.self, forKey: .diagnosticsProfile)
    }
    if container.contains(.extensionProfile) {
        self.extensionProfile = try container.decode(VirtualMachineScaleSetExtensionProfileData?.self, forKey: .extensionProfile)
    }
    if container.contains(.licenseType) {
        self.licenseType = try container.decode(String?.self, forKey: .licenseType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.osProfile != nil {try container.encode(self.osProfile as! VirtualMachineScaleSetUpdateOSProfileData?, forKey: .osProfile)}
    if self.storageProfile != nil {try container.encode(self.storageProfile as! VirtualMachineScaleSetUpdateStorageProfileData?, forKey: .storageProfile)}
    if self.networkProfile != nil {try container.encode(self.networkProfile as! VirtualMachineScaleSetUpdateNetworkProfileData?, forKey: .networkProfile)}
    if self.diagnosticsProfile != nil {try container.encode(self.diagnosticsProfile as! DiagnosticsProfileData?, forKey: .diagnosticsProfile)}
    if self.extensionProfile != nil {try container.encode(self.extensionProfile as! VirtualMachineScaleSetExtensionProfileData?, forKey: .extensionProfile)}
    if self.licenseType != nil {try container.encode(self.licenseType, forKey: .licenseType)}
  }
}

extension DataFactory {
  public static func createVirtualMachineScaleSetUpdateVMProfileProtocol() -> VirtualMachineScaleSetUpdateVMProfileProtocol {
    return VirtualMachineScaleSetUpdateVMProfileData()
  }
}
