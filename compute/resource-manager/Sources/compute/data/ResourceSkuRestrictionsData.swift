// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ResourceSkuRestrictionsData : ResourceSkuRestrictionsProtocol {
    public var type: ResourceSkuRestrictionsTypeEnum?
    public var values: [String]?
    public var restrictionInfo: ResourceSkuRestrictionInfoProtocol?
    public var reasonCode: ResourceSkuRestrictionsReasonCodeEnum?

        enum CodingKeys: String, CodingKey {case type = "type"
        case values = "values"
        case restrictionInfo = "restrictionInfo"
        case reasonCode = "reasonCode"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.type) {
        self.type = try container.decode(ResourceSkuRestrictionsTypeEnum?.self, forKey: .type)
    }
    if container.contains(.values) {
        self.values = try container.decode([String]?.self, forKey: .values)
    }
    if container.contains(.restrictionInfo) {
        self.restrictionInfo = try container.decode(ResourceSkuRestrictionInfoData?.self, forKey: .restrictionInfo)
    }
    if container.contains(.reasonCode) {
        self.reasonCode = try container.decode(ResourceSkuRestrictionsReasonCodeEnum?.self, forKey: .reasonCode)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.values != nil {try container.encode(self.values as! [String]?, forKey: .values)}
    if self.restrictionInfo != nil {try container.encode(self.restrictionInfo as! ResourceSkuRestrictionInfoData?, forKey: .restrictionInfo)}
    if self.reasonCode != nil {try container.encode(self.reasonCode, forKey: .reasonCode)}
  }
}

extension DataFactory {
  public static func createResourceSkuRestrictionsProtocol() -> ResourceSkuRestrictionsProtocol {
    return ResourceSkuRestrictionsData()
  }
}
