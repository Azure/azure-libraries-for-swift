// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineExtensionImagePropertiesData : VirtualMachineExtensionImagePropertiesProtocol {
    public var operatingSystem: String
    public var computeRole: String
    public var handlerSchema: String
    public var vmScaleSetEnabled: Bool?
    public var supportsMultipleExtensions: Bool?

        enum CodingKeys: String, CodingKey {case operatingSystem = "operatingSystem"
        case computeRole = "computeRole"
        case handlerSchema = "handlerSchema"
        case vmScaleSetEnabled = "vmScaleSetEnabled"
        case supportsMultipleExtensions = "supportsMultipleExtensions"
        }

  public init(operatingSystem: String, computeRole: String, handlerSchema: String)  {
    self.operatingSystem = operatingSystem
    self.computeRole = computeRole
    self.handlerSchema = handlerSchema
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.operatingSystem = try container.decode(String.self, forKey: .operatingSystem)
    self.computeRole = try container.decode(String.self, forKey: .computeRole)
    self.handlerSchema = try container.decode(String.self, forKey: .handlerSchema)
    if container.contains(.vmScaleSetEnabled) {
        self.vmScaleSetEnabled = try container.decode(Bool?.self, forKey: .vmScaleSetEnabled)
    }
    if container.contains(.supportsMultipleExtensions) {
        self.supportsMultipleExtensions = try container.decode(Bool?.self, forKey: .supportsMultipleExtensions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.operatingSystem, forKey: .operatingSystem)
    try container.encode(self.computeRole, forKey: .computeRole)
    try container.encode(self.handlerSchema, forKey: .handlerSchema)
    if self.vmScaleSetEnabled != nil {try container.encode(self.vmScaleSetEnabled, forKey: .vmScaleSetEnabled)}
    if self.supportsMultipleExtensions != nil {try container.encode(self.supportsMultipleExtensions, forKey: .supportsMultipleExtensions)}
  }
}

extension DataFactory {
  public static func createVirtualMachineExtensionImagePropertiesProtocol(operatingSystem: String, computeRole: String, handlerSchema: String) -> VirtualMachineExtensionImagePropertiesProtocol {
    return VirtualMachineExtensionImagePropertiesData(operatingSystem: operatingSystem, computeRole: computeRole, handlerSchema: handlerSchema)
  }
}
