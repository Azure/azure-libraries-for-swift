// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerServicePropertiesData : ContainerServicePropertiesProtocol {
    public var provisioningState: String?
    public var orchestratorProfile: ContainerServiceOrchestratorProfileProtocol?
    public var customProfile: ContainerServiceCustomProfileProtocol?
    public var servicePrincipalProfile: ContainerServiceServicePrincipalProfileProtocol?
    public var masterProfile: ContainerServiceMasterProfileProtocol
    public var agentPoolProfiles: [ContainerServiceAgentPoolProfileProtocol]
    public var windowsProfile: ContainerServiceWindowsProfileProtocol?
    public var linuxProfile: ContainerServiceLinuxProfileProtocol
    public var diagnosticsProfile: ContainerServiceDiagnosticsProfileProtocol?

        enum CodingKeys: String, CodingKey {case provisioningState = "provisioningState"
        case orchestratorProfile = "orchestratorProfile"
        case customProfile = "customProfile"
        case servicePrincipalProfile = "servicePrincipalProfile"
        case masterProfile = "masterProfile"
        case agentPoolProfiles = "agentPoolProfiles"
        case windowsProfile = "windowsProfile"
        case linuxProfile = "linuxProfile"
        case diagnosticsProfile = "diagnosticsProfile"
        }

  public init(masterProfile: ContainerServiceMasterProfileProtocol, agentPoolProfiles: [ContainerServiceAgentPoolProfileProtocol], linuxProfile: ContainerServiceLinuxProfileProtocol)  {
    self.masterProfile = masterProfile
    self.agentPoolProfiles = agentPoolProfiles
    self.linuxProfile = linuxProfile
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.orchestratorProfile) {
        self.orchestratorProfile = try container.decode(ContainerServiceOrchestratorProfileData?.self, forKey: .orchestratorProfile)
    }
    if container.contains(.customProfile) {
        self.customProfile = try container.decode(ContainerServiceCustomProfileData?.self, forKey: .customProfile)
    }
    if container.contains(.servicePrincipalProfile) {
        self.servicePrincipalProfile = try container.decode(ContainerServiceServicePrincipalProfileData?.self, forKey: .servicePrincipalProfile)
    }
    self.masterProfile = try container.decode(ContainerServiceMasterProfileData.self, forKey: .masterProfile)
    self.agentPoolProfiles = try container.decode([ContainerServiceAgentPoolProfileData].self, forKey: .agentPoolProfiles)
    if container.contains(.windowsProfile) {
        self.windowsProfile = try container.decode(ContainerServiceWindowsProfileData?.self, forKey: .windowsProfile)
    }
    self.linuxProfile = try container.decode(ContainerServiceLinuxProfileData.self, forKey: .linuxProfile)
    if container.contains(.diagnosticsProfile) {
        self.diagnosticsProfile = try container.decode(ContainerServiceDiagnosticsProfileData?.self, forKey: .diagnosticsProfile)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.orchestratorProfile != nil {try container.encode(self.orchestratorProfile as! ContainerServiceOrchestratorProfileData?, forKey: .orchestratorProfile)}
    if self.customProfile != nil {try container.encode(self.customProfile as! ContainerServiceCustomProfileData?, forKey: .customProfile)}
    if self.servicePrincipalProfile != nil {try container.encode(self.servicePrincipalProfile as! ContainerServiceServicePrincipalProfileData?, forKey: .servicePrincipalProfile)}
    try container.encode(self.masterProfile as! ContainerServiceMasterProfileData, forKey: .masterProfile)
    try container.encode(self.agentPoolProfiles as! [ContainerServiceAgentPoolProfileData], forKey: .agentPoolProfiles)
    if self.windowsProfile != nil {try container.encode(self.windowsProfile as! ContainerServiceWindowsProfileData?, forKey: .windowsProfile)}
    try container.encode(self.linuxProfile as! ContainerServiceLinuxProfileData, forKey: .linuxProfile)
    if self.diagnosticsProfile != nil {try container.encode(self.diagnosticsProfile as! ContainerServiceDiagnosticsProfileData?, forKey: .diagnosticsProfile)}
  }
}

extension DataFactory {
  public static func createContainerServicePropertiesProtocol(masterProfile: ContainerServiceMasterProfileProtocol, agentPoolProfiles: [ContainerServiceAgentPoolProfileProtocol], linuxProfile: ContainerServiceLinuxProfileProtocol) -> ContainerServicePropertiesProtocol {
    return ContainerServicePropertiesData(masterProfile: masterProfile, agentPoolProfiles: agentPoolProfiles, linuxProfile: linuxProfile)
  }
}
