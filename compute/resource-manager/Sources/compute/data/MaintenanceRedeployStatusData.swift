// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MaintenanceRedeployStatusData : MaintenanceRedeployStatusProtocol {
    public var isCustomerInitiatedMaintenanceAllowed: Bool?
    public var preMaintenanceWindowStartTime: Date?
    public var preMaintenanceWindowEndTime: Date?
    public var maintenanceWindowStartTime: Date?
    public var maintenanceWindowEndTime: Date?
    public var lastOperationResultCode: MaintenanceOperationResultCodeTypesEnum?
    public var lastOperationMessage: String?

        enum CodingKeys: String, CodingKey {case isCustomerInitiatedMaintenanceAllowed = "isCustomerInitiatedMaintenanceAllowed"
        case preMaintenanceWindowStartTime = "preMaintenanceWindowStartTime"
        case preMaintenanceWindowEndTime = "preMaintenanceWindowEndTime"
        case maintenanceWindowStartTime = "maintenanceWindowStartTime"
        case maintenanceWindowEndTime = "maintenanceWindowEndTime"
        case lastOperationResultCode = "lastOperationResultCode"
        case lastOperationMessage = "lastOperationMessage"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.isCustomerInitiatedMaintenanceAllowed) {
        self.isCustomerInitiatedMaintenanceAllowed = try container.decode(Bool?.self, forKey: .isCustomerInitiatedMaintenanceAllowed)
    }
    if container.contains(.preMaintenanceWindowStartTime) {
        self.preMaintenanceWindowStartTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .preMaintenanceWindowStartTime)), format: .dateTime)
    }
    if container.contains(.preMaintenanceWindowEndTime) {
        self.preMaintenanceWindowEndTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .preMaintenanceWindowEndTime)), format: .dateTime)
    }
    if container.contains(.maintenanceWindowStartTime) {
        self.maintenanceWindowStartTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .maintenanceWindowStartTime)), format: .dateTime)
    }
    if container.contains(.maintenanceWindowEndTime) {
        self.maintenanceWindowEndTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .maintenanceWindowEndTime)), format: .dateTime)
    }
    if container.contains(.lastOperationResultCode) {
        self.lastOperationResultCode = try container.decode(MaintenanceOperationResultCodeTypesEnum?.self, forKey: .lastOperationResultCode)
    }
    if container.contains(.lastOperationMessage) {
        self.lastOperationMessage = try container.decode(String?.self, forKey: .lastOperationMessage)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.isCustomerInitiatedMaintenanceAllowed != nil {try container.encode(self.isCustomerInitiatedMaintenanceAllowed, forKey: .isCustomerInitiatedMaintenanceAllowed)}
    if self.preMaintenanceWindowStartTime != nil {
        try container.encode(DateConverter.toString(date: self.preMaintenanceWindowStartTime!, format: .dateTime), forKey: .preMaintenanceWindowStartTime)
    }
    if self.preMaintenanceWindowEndTime != nil {
        try container.encode(DateConverter.toString(date: self.preMaintenanceWindowEndTime!, format: .dateTime), forKey: .preMaintenanceWindowEndTime)
    }
    if self.maintenanceWindowStartTime != nil {
        try container.encode(DateConverter.toString(date: self.maintenanceWindowStartTime!, format: .dateTime), forKey: .maintenanceWindowStartTime)
    }
    if self.maintenanceWindowEndTime != nil {
        try container.encode(DateConverter.toString(date: self.maintenanceWindowEndTime!, format: .dateTime), forKey: .maintenanceWindowEndTime)
    }
    if self.lastOperationResultCode != nil {try container.encode(self.lastOperationResultCode, forKey: .lastOperationResultCode)}
    if self.lastOperationMessage != nil {try container.encode(self.lastOperationMessage, forKey: .lastOperationMessage)}
  }
}

extension DataFactory {
  public static func createMaintenanceRedeployStatusProtocol() -> MaintenanceRedeployStatusProtocol {
    return MaintenanceRedeployStatusData()
  }
}
