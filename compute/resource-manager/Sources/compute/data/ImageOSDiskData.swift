// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ImageOSDiskData : ImageOSDiskProtocol {
    public var osType: OperatingSystemTypesEnum
    public var osState: OperatingSystemStateTypesEnum
    public var snapshot: SubResourceProtocol?
    public var managedDisk: SubResourceProtocol?
    public var blobUri: String?
    public var caching: CachingTypesEnum?
    public var diskSizeGB: Int32?
    public var storageAccountType: StorageAccountTypesEnum?

        enum CodingKeys: String, CodingKey {case osType = "osType"
        case osState = "osState"
        case snapshot = "snapshot"
        case managedDisk = "managedDisk"
        case blobUri = "blobUri"
        case caching = "caching"
        case diskSizeGB = "diskSizeGB"
        case storageAccountType = "storageAccountType"
        }

  public init(osType: OperatingSystemTypesEnum, osState: OperatingSystemStateTypesEnum)  {
    self.osType = osType
    self.osState = osState
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.osType = try container.decode(OperatingSystemTypesEnum.self, forKey: .osType)
    self.osState = try container.decode(OperatingSystemStateTypesEnum.self, forKey: .osState)
    if container.contains(.snapshot) {
        self.snapshot = try container.decode(SubResourceData?.self, forKey: .snapshot)
    }
    if container.contains(.managedDisk) {
        self.managedDisk = try container.decode(SubResourceData?.self, forKey: .managedDisk)
    }
    if container.contains(.blobUri) {
        self.blobUri = try container.decode(String?.self, forKey: .blobUri)
    }
    if container.contains(.caching) {
        self.caching = try container.decode(CachingTypesEnum?.self, forKey: .caching)
    }
    if container.contains(.diskSizeGB) {
        self.diskSizeGB = try container.decode(Int32?.self, forKey: .diskSizeGB)
    }
    if container.contains(.storageAccountType) {
        self.storageAccountType = try container.decode(StorageAccountTypesEnum?.self, forKey: .storageAccountType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.osType, forKey: .osType)
    try container.encode(self.osState, forKey: .osState)
    if self.snapshot != nil {try container.encode(self.snapshot as! SubResourceData?, forKey: .snapshot)}
    if self.managedDisk != nil {try container.encode(self.managedDisk as! SubResourceData?, forKey: .managedDisk)}
    if self.blobUri != nil {try container.encode(self.blobUri, forKey: .blobUri)}
    if self.caching != nil {try container.encode(self.caching, forKey: .caching)}
    if self.diskSizeGB != nil {try container.encode(self.diskSizeGB, forKey: .diskSizeGB)}
    if self.storageAccountType != nil {try container.encode(self.storageAccountType, forKey: .storageAccountType)}
  }
}

extension DataFactory {
  public static func createImageOSDiskProtocol(osType: OperatingSystemTypesEnum, osState: OperatingSystemStateTypesEnum) -> ImageOSDiskProtocol {
    return ImageOSDiskData(osType: osType, osState: osState)
  }
}
