// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// NotificationHubs is the azure NotificationHub client
import Foundation
import azureSwiftRuntime
extension Commands {
public struct NotificationHubs {
    public static func CheckAvailability(resourceGroupName: String, namespaceName: String, subscriptionId: String, parameters: CheckAvailabilityParametersProtocol) -> NotificationHubsCheckAvailability {
        return CheckAvailabilityCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func CreateOrUpdate(resourceGroupName: String, namespaceName: String, notificationHubName: String, subscriptionId: String, parameters: NotificationHubCreateOrUpdateParametersProtocol) -> NotificationHubsCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func CreateOrUpdateAuthorizationRule(resourceGroupName: String, namespaceName: String, notificationHubName: String, authorizationRuleName: String, subscriptionId: String, parameters: SharedAccessAuthorizationRuleCreateOrUpdateParametersProtocol) -> NotificationHubsCreateOrUpdateAuthorizationRule {
        return CreateOrUpdateAuthorizationRuleCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func Delete(resourceGroupName: String, namespaceName: String, notificationHubName: String, subscriptionId: String) -> NotificationHubsDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, subscriptionId: subscriptionId)
    }
    public static func DeleteAuthorizationRule(resourceGroupName: String, namespaceName: String, notificationHubName: String, authorizationRuleName: String, subscriptionId: String) -> NotificationHubsDeleteAuthorizationRule {
        return DeleteAuthorizationRuleCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, namespaceName: String, notificationHubName: String, subscriptionId: String) -> NotificationHubsGet {
        return GetCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, subscriptionId: subscriptionId)
    }
    public static func GetAuthorizationRule(resourceGroupName: String, namespaceName: String, notificationHubName: String, authorizationRuleName: String, subscriptionId: String) -> NotificationHubsGetAuthorizationRule {
        return GetAuthorizationRuleCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId)
    }
    public static func GetPnsCredentials(resourceGroupName: String, namespaceName: String, notificationHubName: String, subscriptionId: String) -> NotificationHubsGetPnsCredentials {
        return GetPnsCredentialsCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, subscriptionId: subscriptionId)
    }
    public static func List(resourceGroupName: String, namespaceName: String, subscriptionId: String) -> NotificationHubsList {
        return ListCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, subscriptionId: subscriptionId)
    }
    public static func ListAuthorizationRules(resourceGroupName: String, namespaceName: String, notificationHubName: String, subscriptionId: String) -> NotificationHubsListAuthorizationRules {
        return ListAuthorizationRulesCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, subscriptionId: subscriptionId)
    }
    public static func ListKeys(resourceGroupName: String, namespaceName: String, notificationHubName: String, authorizationRuleName: String, subscriptionId: String) -> NotificationHubsListKeys {
        return ListKeysCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId)
    }
    public static func RegenerateKeys(resourceGroupName: String, namespaceName: String, notificationHubName: String, authorizationRuleName: String, subscriptionId: String, parameters: PolicykeyResourceProtocol) -> NotificationHubsRegenerateKeys {
        return RegenerateKeysCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, notificationHubName: notificationHubName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId, parameters: parameters)
    }
}
}
