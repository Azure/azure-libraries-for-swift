// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApnsCredentialPropertiesData : ApnsCredentialPropertiesProtocol {
    public var apnsCertificate: String?
    public var certificateKey: String?
    public var endpoint: String?
    public var thumbprint: String?
    public var keyId: String?
    public var appName: String?
    public var appId: String?
    public var token: String?

        enum CodingKeys: String, CodingKey {case apnsCertificate = "apnsCertificate"
        case certificateKey = "certificateKey"
        case endpoint = "endpoint"
        case thumbprint = "thumbprint"
        case keyId = "keyId"
        case appName = "appName"
        case appId = "appId"
        case token = "token"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.apnsCertificate) {
        self.apnsCertificate = try container.decode(String?.self, forKey: .apnsCertificate)
    }
    if container.contains(.certificateKey) {
        self.certificateKey = try container.decode(String?.self, forKey: .certificateKey)
    }
    if container.contains(.endpoint) {
        self.endpoint = try container.decode(String?.self, forKey: .endpoint)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.keyId) {
        self.keyId = try container.decode(String?.self, forKey: .keyId)
    }
    if container.contains(.appName) {
        self.appName = try container.decode(String?.self, forKey: .appName)
    }
    if container.contains(.appId) {
        self.appId = try container.decode(String?.self, forKey: .appId)
    }
    if container.contains(.token) {
        self.token = try container.decode(String?.self, forKey: .token)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.apnsCertificate != nil {try container.encode(self.apnsCertificate, forKey: .apnsCertificate)}
    if self.certificateKey != nil {try container.encode(self.certificateKey, forKey: .certificateKey)}
    if self.endpoint != nil {try container.encode(self.endpoint, forKey: .endpoint)}
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.keyId != nil {try container.encode(self.keyId, forKey: .keyId)}
    if self.appName != nil {try container.encode(self.appName, forKey: .appName)}
    if self.appId != nil {try container.encode(self.appId, forKey: .appId)}
    if self.token != nil {try container.encode(self.token, forKey: .token)}
  }
}

extension DataFactory {
  public static func createApnsCredentialPropertiesProtocol() -> ApnsCredentialPropertiesProtocol {
    return ApnsCredentialPropertiesData()
  }
}
