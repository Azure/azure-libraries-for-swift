// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BaiduCredentialPropertiesData : BaiduCredentialPropertiesProtocol {
    public var baiduApiKey: String?
    public var baiduEndPoint: String?
    public var baiduSecretKey: String?

        enum CodingKeys: String, CodingKey {case baiduApiKey = "baiduApiKey"
        case baiduEndPoint = "baiduEndPoint"
        case baiduSecretKey = "baiduSecretKey"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.baiduApiKey) {
        self.baiduApiKey = try container.decode(String?.self, forKey: .baiduApiKey)
    }
    if container.contains(.baiduEndPoint) {
        self.baiduEndPoint = try container.decode(String?.self, forKey: .baiduEndPoint)
    }
    if container.contains(.baiduSecretKey) {
        self.baiduSecretKey = try container.decode(String?.self, forKey: .baiduSecretKey)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.baiduApiKey != nil {try container.encode(self.baiduApiKey, forKey: .baiduApiKey)}
    if self.baiduEndPoint != nil {try container.encode(self.baiduEndPoint, forKey: .baiduEndPoint)}
    if self.baiduSecretKey != nil {try container.encode(self.baiduSecretKey, forKey: .baiduSecretKey)}
  }
}

extension DataFactory {
  public static func createBaiduCredentialPropertiesProtocol() -> BaiduCredentialPropertiesProtocol {
    return BaiduCredentialPropertiesData()
  }
}
