// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureTableOutputDataSourcePropertiesData : AzureTableOutputDataSourcePropertiesProtocol {
    public var accountName: String?
    public var accountKey: String?
    public var table: String?
    public var partitionKey: String?
    public var rowKey: String?
    public var columnsToRemove: [String]?
    public var batchSize: Int32?

        enum CodingKeys: String, CodingKey {case accountName = "accountName"
        case accountKey = "accountKey"
        case table = "table"
        case partitionKey = "partitionKey"
        case rowKey = "rowKey"
        case columnsToRemove = "columnsToRemove"
        case batchSize = "batchSize"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.accountName) {
        self.accountName = try container.decode(String?.self, forKey: .accountName)
    }
    if container.contains(.accountKey) {
        self.accountKey = try container.decode(String?.self, forKey: .accountKey)
    }
    if container.contains(.table) {
        self.table = try container.decode(String?.self, forKey: .table)
    }
    if container.contains(.partitionKey) {
        self.partitionKey = try container.decode(String?.self, forKey: .partitionKey)
    }
    if container.contains(.rowKey) {
        self.rowKey = try container.decode(String?.self, forKey: .rowKey)
    }
    if container.contains(.columnsToRemove) {
        self.columnsToRemove = try container.decode([String]?.self, forKey: .columnsToRemove)
    }
    if container.contains(.batchSize) {
        self.batchSize = try container.decode(Int32?.self, forKey: .batchSize)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.accountName != nil {try container.encode(self.accountName, forKey: .accountName)}
    if self.accountKey != nil {try container.encode(self.accountKey, forKey: .accountKey)}
    if self.table != nil {try container.encode(self.table, forKey: .table)}
    if self.partitionKey != nil {try container.encode(self.partitionKey, forKey: .partitionKey)}
    if self.rowKey != nil {try container.encode(self.rowKey, forKey: .rowKey)}
    if self.columnsToRemove != nil {try container.encode(self.columnsToRemove as! [String]?, forKey: .columnsToRemove)}
    if self.batchSize != nil {try container.encode(self.batchSize, forKey: .batchSize)}
  }
}

extension DataFactory {
  public static func createAzureTableOutputDataSourcePropertiesProtocol() -> AzureTableOutputDataSourcePropertiesProtocol {
    return AzureTableOutputDataSourcePropertiesData()
  }
}
