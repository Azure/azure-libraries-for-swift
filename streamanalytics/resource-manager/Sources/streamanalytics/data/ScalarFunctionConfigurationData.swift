// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ScalarFunctionConfigurationData : ScalarFunctionConfigurationProtocol {
    public var inputs: [FunctionInputProtocol?]?
    public var output: FunctionOutputProtocol?
    public var binding: FunctionBindingProtocol?

        enum CodingKeys: String, CodingKey {case inputs = "inputs"
        case output = "output"
        case binding = "binding"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.inputs) {
        self.inputs = try container.decode([FunctionInputData?]?.self, forKey: .inputs)
    }
    if container.contains(.output) {
        self.output = try container.decode(FunctionOutputData?.self, forKey: .output)
    }
    if container.contains(.binding) {
        self.binding = try container.decode(FunctionBindingData?.self, forKey: .binding)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.inputs != nil {try container.encode(self.inputs as! [FunctionInputData?]?, forKey: .inputs)}
    if self.output != nil {try container.encode(self.output as! FunctionOutputData?, forKey: .output)}
    if self.binding != nil {try container.encode(self.binding as! FunctionBindingData?, forKey: .binding)}
  }
}

extension DataFactory {
  public static func createScalarFunctionConfigurationProtocol() -> ScalarFunctionConfigurationProtocol {
    return ScalarFunctionConfigurationData()
  }
}
