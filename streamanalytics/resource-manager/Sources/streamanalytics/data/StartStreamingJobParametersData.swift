// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StartStreamingJobParametersData : StartStreamingJobParametersProtocol {
    public var outputStartMode: OutputStartModeEnum?
    public var outputStartTime: Date?

        enum CodingKeys: String, CodingKey {case outputStartMode = "outputStartMode"
        case outputStartTime = "outputStartTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.outputStartMode) {
        self.outputStartMode = try container.decode(OutputStartModeEnum?.self, forKey: .outputStartMode)
    }
    if container.contains(.outputStartTime) {
        self.outputStartTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .outputStartTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.outputStartMode != nil {try container.encode(self.outputStartMode, forKey: .outputStartMode)}
    if self.outputStartTime != nil {
        try container.encode(DateConverter.toString(date: self.outputStartTime!, format: .dateTime), forKey: .outputStartTime)
    }
  }
}

extension DataFactory {
  public static func createStartStreamingJobParametersProtocol() -> StartStreamingJobParametersProtocol {
    return StartStreamingJobParametersData()
  }
}
