// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DocumentDbOutputDataSourcePropertiesData : DocumentDbOutputDataSourcePropertiesProtocol {
    public var accountId: String?
    public var accountKey: String?
    public var database: String?
    public var collectionNamePattern: String?
    public var partitionKey: String?
    public var documentId: String?

        enum CodingKeys: String, CodingKey {case accountId = "accountId"
        case accountKey = "accountKey"
        case database = "database"
        case collectionNamePattern = "collectionNamePattern"
        case partitionKey = "partitionKey"
        case documentId = "documentId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.accountId) {
        self.accountId = try container.decode(String?.self, forKey: .accountId)
    }
    if container.contains(.accountKey) {
        self.accountKey = try container.decode(String?.self, forKey: .accountKey)
    }
    if container.contains(.database) {
        self.database = try container.decode(String?.self, forKey: .database)
    }
    if container.contains(.collectionNamePattern) {
        self.collectionNamePattern = try container.decode(String?.self, forKey: .collectionNamePattern)
    }
    if container.contains(.partitionKey) {
        self.partitionKey = try container.decode(String?.self, forKey: .partitionKey)
    }
    if container.contains(.documentId) {
        self.documentId = try container.decode(String?.self, forKey: .documentId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.accountId != nil {try container.encode(self.accountId, forKey: .accountId)}
    if self.accountKey != nil {try container.encode(self.accountKey, forKey: .accountKey)}
    if self.database != nil {try container.encode(self.database, forKey: .database)}
    if self.collectionNamePattern != nil {try container.encode(self.collectionNamePattern, forKey: .collectionNamePattern)}
    if self.partitionKey != nil {try container.encode(self.partitionKey, forKey: .partitionKey)}
    if self.documentId != nil {try container.encode(self.documentId, forKey: .documentId)}
  }
}

extension DataFactory {
  public static func createDocumentDbOutputDataSourcePropertiesProtocol() -> DocumentDbOutputDataSourcePropertiesProtocol {
    return DocumentDbOutputDataSourcePropertiesData()
  }
}
