// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StreamingJobPropertiesData : StreamingJobPropertiesProtocol {
    public var sku: SkuProtocol?
    public var jobId: String?
    public var provisioningState: String?
    public var jobState: String?
    public var outputStartMode: OutputStartModeEnum?
    public var outputStartTime: Date?
    public var lastOutputEventTime: Date?
    public var eventsOutOfOrderPolicy: EventsOutOfOrderPolicyEnum?
    public var outputErrorPolicy: OutputErrorPolicyEnum?
    public var eventsOutOfOrderMaxDelayInSeconds: Int32?
    public var eventsLateArrivalMaxDelayInSeconds: Int32?
    public var dataLocale: String?
    public var compatibilityLevel: CompatibilityLevelEnum?
    public var createdDate: Date?
    public var inputs: [InputProtocol?]?
    public var transformation: TransformationProtocol?
    public var outputs: [OutputProtocol?]?
    public var functions: [FunctionProtocol?]?
    public var etag: String?

        enum CodingKeys: String, CodingKey {case sku = "sku"
        case jobId = "jobId"
        case provisioningState = "provisioningState"
        case jobState = "jobState"
        case outputStartMode = "outputStartMode"
        case outputStartTime = "outputStartTime"
        case lastOutputEventTime = "lastOutputEventTime"
        case eventsOutOfOrderPolicy = "eventsOutOfOrderPolicy"
        case outputErrorPolicy = "outputErrorPolicy"
        case eventsOutOfOrderMaxDelayInSeconds = "eventsOutOfOrderMaxDelayInSeconds"
        case eventsLateArrivalMaxDelayInSeconds = "eventsLateArrivalMaxDelayInSeconds"
        case dataLocale = "dataLocale"
        case compatibilityLevel = "compatibilityLevel"
        case createdDate = "createdDate"
        case inputs = "inputs"
        case transformation = "transformation"
        case outputs = "outputs"
        case functions = "functions"
        case etag = "etag"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.sku) {
        self.sku = try container.decode(SkuData?.self, forKey: .sku)
    }
    if container.contains(.jobId) {
        self.jobId = try container.decode(String?.self, forKey: .jobId)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.jobState) {
        self.jobState = try container.decode(String?.self, forKey: .jobState)
    }
    if container.contains(.outputStartMode) {
        self.outputStartMode = try container.decode(OutputStartModeEnum?.self, forKey: .outputStartMode)
    }
    if container.contains(.outputStartTime) {
        self.outputStartTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .outputStartTime)), format: .dateTime)
    }
    if container.contains(.lastOutputEventTime) {
        self.lastOutputEventTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastOutputEventTime)), format: .dateTime)
    }
    if container.contains(.eventsOutOfOrderPolicy) {
        self.eventsOutOfOrderPolicy = try container.decode(EventsOutOfOrderPolicyEnum?.self, forKey: .eventsOutOfOrderPolicy)
    }
    if container.contains(.outputErrorPolicy) {
        self.outputErrorPolicy = try container.decode(OutputErrorPolicyEnum?.self, forKey: .outputErrorPolicy)
    }
    if container.contains(.eventsOutOfOrderMaxDelayInSeconds) {
        self.eventsOutOfOrderMaxDelayInSeconds = try container.decode(Int32?.self, forKey: .eventsOutOfOrderMaxDelayInSeconds)
    }
    if container.contains(.eventsLateArrivalMaxDelayInSeconds) {
        self.eventsLateArrivalMaxDelayInSeconds = try container.decode(Int32?.self, forKey: .eventsLateArrivalMaxDelayInSeconds)
    }
    if container.contains(.dataLocale) {
        self.dataLocale = try container.decode(String?.self, forKey: .dataLocale)
    }
    if container.contains(.compatibilityLevel) {
        self.compatibilityLevel = try container.decode(CompatibilityLevelEnum?.self, forKey: .compatibilityLevel)
    }
    if container.contains(.createdDate) {
        self.createdDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdDate)), format: .dateTime)
    }
    if container.contains(.inputs) {
        self.inputs = try container.decode([InputData?]?.self, forKey: .inputs)
    }
    if container.contains(.transformation) {
        self.transformation = try container.decode(TransformationData?.self, forKey: .transformation)
    }
    if container.contains(.outputs) {
        self.outputs = try container.decode([OutputData?]?.self, forKey: .outputs)
    }
    if container.contains(.functions) {
        self.functions = try container.decode([FunctionData?]?.self, forKey: .functions)
    }
    if container.contains(.etag) {
        self.etag = try container.decode(String?.self, forKey: .etag)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.sku != nil {try container.encode(self.sku as! SkuData?, forKey: .sku)}
    if self.jobId != nil {try container.encode(self.jobId, forKey: .jobId)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.jobState != nil {try container.encode(self.jobState, forKey: .jobState)}
    if self.outputStartMode != nil {try container.encode(self.outputStartMode, forKey: .outputStartMode)}
    if self.outputStartTime != nil {
        try container.encode(DateConverter.toString(date: self.outputStartTime!, format: .dateTime), forKey: .outputStartTime)
    }
    if self.lastOutputEventTime != nil {
        try container.encode(DateConverter.toString(date: self.lastOutputEventTime!, format: .dateTime), forKey: .lastOutputEventTime)
    }
    if self.eventsOutOfOrderPolicy != nil {try container.encode(self.eventsOutOfOrderPolicy, forKey: .eventsOutOfOrderPolicy)}
    if self.outputErrorPolicy != nil {try container.encode(self.outputErrorPolicy, forKey: .outputErrorPolicy)}
    if self.eventsOutOfOrderMaxDelayInSeconds != nil {try container.encode(self.eventsOutOfOrderMaxDelayInSeconds, forKey: .eventsOutOfOrderMaxDelayInSeconds)}
    if self.eventsLateArrivalMaxDelayInSeconds != nil {try container.encode(self.eventsLateArrivalMaxDelayInSeconds, forKey: .eventsLateArrivalMaxDelayInSeconds)}
    if self.dataLocale != nil {try container.encode(self.dataLocale, forKey: .dataLocale)}
    if self.compatibilityLevel != nil {try container.encode(self.compatibilityLevel, forKey: .compatibilityLevel)}
    if self.createdDate != nil {
        try container.encode(DateConverter.toString(date: self.createdDate!, format: .dateTime), forKey: .createdDate)
    }
    if self.inputs != nil {try container.encode(self.inputs as! [InputData?]?, forKey: .inputs)}
    if self.transformation != nil {try container.encode(self.transformation as! TransformationData?, forKey: .transformation)}
    if self.outputs != nil {try container.encode(self.outputs as! [OutputData?]?, forKey: .outputs)}
    if self.functions != nil {try container.encode(self.functions as! [FunctionData?]?, forKey: .functions)}
    if self.etag != nil {try container.encode(self.etag, forKey: .etag)}
  }
}

extension DataFactory {
  public static func createStreamingJobPropertiesProtocol() -> StreamingJobPropertiesProtocol {
    return StreamingJobPropertiesData()
  }
}
