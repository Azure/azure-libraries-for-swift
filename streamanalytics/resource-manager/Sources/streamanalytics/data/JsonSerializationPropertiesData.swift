// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JsonSerializationPropertiesData : JsonSerializationPropertiesProtocol {
    public var encoding: EncodingEnum?
    public var format: JsonOutputSerializationFormatEnum?

        enum CodingKeys: String, CodingKey {case encoding = "encoding"
        case format = "format"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.encoding) {
        self.encoding = try container.decode(EncodingEnum?.self, forKey: .encoding)
    }
    if container.contains(.format) {
        self.format = try container.decode(JsonOutputSerializationFormatEnum?.self, forKey: .format)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.encoding != nil {try container.encode(self.encoding, forKey: .encoding)}
    if self.format != nil {try container.encode(self.format, forKey: .format)}
  }
}

extension DataFactory {
  public static func createJsonSerializationPropertiesProtocol() -> JsonSerializationPropertiesProtocol {
    return JsonSerializationPropertiesData()
  }
}
