// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ClientCertAuthenticationData : ClientCertAuthenticationProtocol, HttpAuthenticationProtocol {
    public var password: String?
    public var pfx: String?
    public var certificateThumbprint: String?
    public var certificateExpirationDate: Date?
    public var certificateSubjectName: String?

        enum CodingKeys: String, CodingKey {case password = "password"
        case pfx = "pfx"
        case certificateThumbprint = "certificateThumbprint"
        case certificateExpirationDate = "certificateExpirationDate"
        case certificateSubjectName = "certificateSubjectName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.password) {
        self.password = try container.decode(String?.self, forKey: .password)
    }
    if container.contains(.pfx) {
        self.pfx = try container.decode(String?.self, forKey: .pfx)
    }
    if container.contains(.certificateThumbprint) {
        self.certificateThumbprint = try container.decode(String?.self, forKey: .certificateThumbprint)
    }
    if container.contains(.certificateExpirationDate) {
        self.certificateExpirationDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .certificateExpirationDate)), format: .dateTime)
    }
    if container.contains(.certificateSubjectName) {
        self.certificateSubjectName = try container.decode(String?.self, forKey: .certificateSubjectName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.password != nil {try container.encode(self.password, forKey: .password)}
    if self.pfx != nil {try container.encode(self.pfx, forKey: .pfx)}
    if self.certificateThumbprint != nil {try container.encode(self.certificateThumbprint, forKey: .certificateThumbprint)}
    if self.certificateExpirationDate != nil {
        try container.encode(DateConverter.toString(date: self.certificateExpirationDate!, format: .dateTime), forKey: .certificateExpirationDate)
    }
    if self.certificateSubjectName != nil {try container.encode(self.certificateSubjectName, forKey: .certificateSubjectName)}
  }
}

extension DataFactory {
  public static func createClientCertAuthenticationProtocol() -> ClientCertAuthenticationProtocol {
    return ClientCertAuthenticationData()
  }
}
