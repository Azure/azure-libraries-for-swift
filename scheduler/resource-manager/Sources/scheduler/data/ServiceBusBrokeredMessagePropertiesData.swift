// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ServiceBusBrokeredMessagePropertiesData : ServiceBusBrokeredMessagePropertiesProtocol {
    public var contentType: String?
    public var correlationId: String?
    public var forcePersistence: Bool?
    public var label: String?
    public var messageId: String?
    public var partitionKey: String?
    public var replyTo: String?
    public var replyToSessionId: String?
    public var scheduledEnqueueTimeUtc: Date?
    public var sessionId: String?
    public var timeToLive: String?
    public var to: String?
    public var viaPartitionKey: String?

        enum CodingKeys: String, CodingKey {case contentType = "contentType"
        case correlationId = "correlationId"
        case forcePersistence = "forcePersistence"
        case label = "label"
        case messageId = "messageId"
        case partitionKey = "partitionKey"
        case replyTo = "replyTo"
        case replyToSessionId = "replyToSessionId"
        case scheduledEnqueueTimeUtc = "scheduledEnqueueTimeUtc"
        case sessionId = "sessionId"
        case timeToLive = "timeToLive"
        case to = "to"
        case viaPartitionKey = "viaPartitionKey"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.contentType) {
        self.contentType = try container.decode(String?.self, forKey: .contentType)
    }
    if container.contains(.correlationId) {
        self.correlationId = try container.decode(String?.self, forKey: .correlationId)
    }
    if container.contains(.forcePersistence) {
        self.forcePersistence = try container.decode(Bool?.self, forKey: .forcePersistence)
    }
    if container.contains(.label) {
        self.label = try container.decode(String?.self, forKey: .label)
    }
    if container.contains(.messageId) {
        self.messageId = try container.decode(String?.self, forKey: .messageId)
    }
    if container.contains(.partitionKey) {
        self.partitionKey = try container.decode(String?.self, forKey: .partitionKey)
    }
    if container.contains(.replyTo) {
        self.replyTo = try container.decode(String?.self, forKey: .replyTo)
    }
    if container.contains(.replyToSessionId) {
        self.replyToSessionId = try container.decode(String?.self, forKey: .replyToSessionId)
    }
    if container.contains(.scheduledEnqueueTimeUtc) {
        self.scheduledEnqueueTimeUtc = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .scheduledEnqueueTimeUtc)), format: .dateTime)
    }
    if container.contains(.sessionId) {
        self.sessionId = try container.decode(String?.self, forKey: .sessionId)
    }
    if container.contains(.timeToLive) {
        self.timeToLive = try container.decode(String?.self, forKey: .timeToLive)
    }
    if container.contains(.to) {
        self.to = try container.decode(String?.self, forKey: .to)
    }
    if container.contains(.viaPartitionKey) {
        self.viaPartitionKey = try container.decode(String?.self, forKey: .viaPartitionKey)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.contentType != nil {try container.encode(self.contentType, forKey: .contentType)}
    if self.correlationId != nil {try container.encode(self.correlationId, forKey: .correlationId)}
    if self.forcePersistence != nil {try container.encode(self.forcePersistence, forKey: .forcePersistence)}
    if self.label != nil {try container.encode(self.label, forKey: .label)}
    if self.messageId != nil {try container.encode(self.messageId, forKey: .messageId)}
    if self.partitionKey != nil {try container.encode(self.partitionKey, forKey: .partitionKey)}
    if self.replyTo != nil {try container.encode(self.replyTo, forKey: .replyTo)}
    if self.replyToSessionId != nil {try container.encode(self.replyToSessionId, forKey: .replyToSessionId)}
    if self.scheduledEnqueueTimeUtc != nil {
        try container.encode(DateConverter.toString(date: self.scheduledEnqueueTimeUtc!, format: .dateTime), forKey: .scheduledEnqueueTimeUtc)
    }
    if self.sessionId != nil {try container.encode(self.sessionId, forKey: .sessionId)}
    if self.timeToLive != nil {try container.encode(self.timeToLive, forKey: .timeToLive)}
    if self.to != nil {try container.encode(self.to, forKey: .to)}
    if self.viaPartitionKey != nil {try container.encode(self.viaPartitionKey, forKey: .viaPartitionKey)}
  }
}

extension DataFactory {
  public static func createServiceBusBrokeredMessagePropertiesProtocol() -> ServiceBusBrokeredMessagePropertiesProtocol {
    return ServiceBusBrokeredMessagePropertiesData()
  }
}
