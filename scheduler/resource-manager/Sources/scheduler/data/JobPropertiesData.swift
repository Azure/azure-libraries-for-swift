// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobPropertiesData : JobPropertiesProtocol {
    public var startTime: Date?
    public var action: JobActionProtocol?
    public var recurrence: JobRecurrenceProtocol?
    public var state: JobStateEnum?
    public var status: JobStatusProtocol?

        enum CodingKeys: String, CodingKey {case startTime = "startTime"
        case action = "action"
        case recurrence = "recurrence"
        case state = "state"
        case status = "status"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.action) {
        self.action = try container.decode(JobActionData?.self, forKey: .action)
    }
    if container.contains(.recurrence) {
        self.recurrence = try container.decode(JobRecurrenceData?.self, forKey: .recurrence)
    }
    if container.contains(.state) {
        self.state = try container.decode(JobStateEnum?.self, forKey: .state)
    }
    if container.contains(.status) {
        self.status = try container.decode(JobStatusData?.self, forKey: .status)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.action != nil {try container.encode(self.action as! JobActionData?, forKey: .action)}
    if self.recurrence != nil {try container.encode(self.recurrence as! JobRecurrenceData?, forKey: .recurrence)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.status != nil {try container.encode(self.status as! JobStatusData?, forKey: .status)}
  }
}

extension DataFactory {
  public static func createJobPropertiesProtocol() -> JobPropertiesProtocol {
    return JobPropertiesData()
  }
}
