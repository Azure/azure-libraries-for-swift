// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobCollectionQuotaData : JobCollectionQuotaProtocol {
    public var maxJobCount: Int32?
    public var maxJobOccurrence: Int32?
    public var maxRecurrence: JobMaxRecurrenceProtocol?

        enum CodingKeys: String, CodingKey {case maxJobCount = "maxJobCount"
        case maxJobOccurrence = "maxJobOccurrence"
        case maxRecurrence = "maxRecurrence"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.maxJobCount) {
        self.maxJobCount = try container.decode(Int32?.self, forKey: .maxJobCount)
    }
    if container.contains(.maxJobOccurrence) {
        self.maxJobOccurrence = try container.decode(Int32?.self, forKey: .maxJobOccurrence)
    }
    if container.contains(.maxRecurrence) {
        self.maxRecurrence = try container.decode(JobMaxRecurrenceData?.self, forKey: .maxRecurrence)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.maxJobCount != nil {try container.encode(self.maxJobCount, forKey: .maxJobCount)}
    if self.maxJobOccurrence != nil {try container.encode(self.maxJobOccurrence, forKey: .maxJobOccurrence)}
    if self.maxRecurrence != nil {try container.encode(self.maxRecurrence as! JobMaxRecurrenceData?, forKey: .maxRecurrence)}
  }
}

extension DataFactory {
  public static func createJobCollectionQuotaProtocol() -> JobCollectionQuotaProtocol {
    return JobCollectionQuotaData()
  }
}
