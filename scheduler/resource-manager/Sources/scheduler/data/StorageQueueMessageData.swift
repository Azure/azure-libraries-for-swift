// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StorageQueueMessageData : StorageQueueMessageProtocol {
    public var storageAccount: String?
    public var queueName: String?
    public var sasToken: String?
    public var message: String?

        enum CodingKeys: String, CodingKey {case storageAccount = "storageAccount"
        case queueName = "queueName"
        case sasToken = "sasToken"
        case message = "message"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.storageAccount) {
        self.storageAccount = try container.decode(String?.self, forKey: .storageAccount)
    }
    if container.contains(.queueName) {
        self.queueName = try container.decode(String?.self, forKey: .queueName)
    }
    if container.contains(.sasToken) {
        self.sasToken = try container.decode(String?.self, forKey: .sasToken)
    }
    if container.contains(.message) {
        self.message = try container.decode(String?.self, forKey: .message)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.storageAccount != nil {try container.encode(self.storageAccount, forKey: .storageAccount)}
    if self.queueName != nil {try container.encode(self.queueName, forKey: .queueName)}
    if self.sasToken != nil {try container.encode(self.sasToken, forKey: .sasToken)}
    if self.message != nil {try container.encode(self.message, forKey: .message)}
  }
}

extension DataFactory {
  public static func createStorageQueueMessageProtocol() -> StorageQueueMessageProtocol {
    return StorageQueueMessageData()
  }
}
