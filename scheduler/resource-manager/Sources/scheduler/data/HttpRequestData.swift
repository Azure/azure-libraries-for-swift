// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct HttpRequestData : HttpRequestProtocol {
    public var authentication: HttpAuthenticationProtocol?
    public var uri: String?
    public var method: String?
    public var _body: String?
    public var headers: [String:String]?

        enum CodingKeys: String, CodingKey {case authentication = "authentication"
        case uri = "uri"
        case method = "method"
        case _body = "body"
        case headers = "headers"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.authentication) {
        self.authentication = try container.decode(HttpAuthenticationData?.self, forKey: .authentication)
    }
    if container.contains(.uri) {
        self.uri = try container.decode(String?.self, forKey: .uri)
    }
    if container.contains(.method) {
        self.method = try container.decode(String?.self, forKey: .method)
    }
    if container.contains(._body) {
        self._body = try container.decode(String?.self, forKey: ._body)
    }
    if container.contains(.headers) {
        self.headers = try container.decode([String:String]?.self, forKey: .headers)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.authentication != nil {try container.encode(self.authentication as! HttpAuthenticationData?, forKey: .authentication)}
    if self.uri != nil {try container.encode(self.uri, forKey: .uri)}
    if self.method != nil {try container.encode(self.method, forKey: .method)}
    if self._body != nil {try container.encode(self._body, forKey: ._body)}
    if self.headers != nil {try container.encode(self.headers, forKey: .headers)}
  }
}

extension DataFactory {
  public static func createHttpRequestProtocol() -> HttpRequestProtocol {
    return HttpRequestData()
  }
}
