// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BaselineData : BaselineProtocol {
    public var sensitivity: SensitivityEnum
    public var lowThresholds: [Double]
    public var highThresholds: [Double]

        enum CodingKeys: String, CodingKey {case sensitivity = "sensitivity"
        case lowThresholds = "lowThresholds"
        case highThresholds = "highThresholds"
        }

  public init(sensitivity: SensitivityEnum, lowThresholds: [Double], highThresholds: [Double])  {
    self.sensitivity = sensitivity
    self.lowThresholds = lowThresholds
    self.highThresholds = highThresholds
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.sensitivity = try container.decode(SensitivityEnum.self, forKey: .sensitivity)
    self.lowThresholds = try container.decode([Double].self, forKey: .lowThresholds)
    self.highThresholds = try container.decode([Double].self, forKey: .highThresholds)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.sensitivity, forKey: .sensitivity)
    try container.encode(self.lowThresholds as! [Double], forKey: .lowThresholds)
    try container.encode(self.highThresholds as! [Double], forKey: .highThresholds)
  }
}

extension DataFactory {
  public static func createBaselineProtocol(sensitivity: SensitivityEnum, lowThresholds: [Double], highThresholds: [Double]) -> BaselineProtocol {
    return BaselineData(sensitivity: sensitivity, lowThresholds: lowThresholds, highThresholds: highThresholds)
  }
}
