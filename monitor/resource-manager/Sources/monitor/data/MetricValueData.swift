// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MetricValueData : MetricValueProtocol {
    public var timeStamp: Date
    public var average: Double?
    public var minimum: Double?
    public var maximum: Double?
    public var total: Double?
    public var count: Int64?

        enum CodingKeys: String, CodingKey {case timeStamp = "timeStamp"
        case average = "average"
        case minimum = "minimum"
        case maximum = "maximum"
        case total = "total"
        case count = "count"
        }

  public init(timeStamp: Date)  {
    self.timeStamp = timeStamp
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
          self.timeStamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .timeStamp)), format: .dateTime)!
    if container.contains(.average) {
        self.average = try container.decode(Double?.self, forKey: .average)
    }
    if container.contains(.minimum) {
        self.minimum = try container.decode(Double?.self, forKey: .minimum)
    }
    if container.contains(.maximum) {
        self.maximum = try container.decode(Double?.self, forKey: .maximum)
    }
    if container.contains(.total) {
        self.total = try container.decode(Double?.self, forKey: .total)
    }
    if container.contains(.count) {
        self.count = try container.decode(Int64?.self, forKey: .count)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(DateConverter.toString(date: self.timeStamp, format: .dateTime), forKey: .timeStamp)
    if self.average != nil {try container.encode(self.average, forKey: .average)}
    if self.minimum != nil {try container.encode(self.minimum, forKey: .minimum)}
    if self.maximum != nil {try container.encode(self.maximum, forKey: .maximum)}
    if self.total != nil {try container.encode(self.total, forKey: .total)}
    if self.count != nil {try container.encode(self.count, forKey: .count)}
  }
}

extension DataFactory {
  public static func createMetricValueProtocol(timeStamp: Date) -> MetricValueProtocol {
    return MetricValueData(timeStamp: timeStamp)
  }
}
