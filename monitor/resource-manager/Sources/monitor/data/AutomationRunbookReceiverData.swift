// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AutomationRunbookReceiverData : AutomationRunbookReceiverProtocol {
    public var automationAccountId: String
    public var runbookName: String
    public var webhookResourceId: String
    public var isGlobalRunbook: Bool
    public var name: String?
    public var serviceUri: String?

        enum CodingKeys: String, CodingKey {case automationAccountId = "automationAccountId"
        case runbookName = "runbookName"
        case webhookResourceId = "webhookResourceId"
        case isGlobalRunbook = "isGlobalRunbook"
        case name = "name"
        case serviceUri = "serviceUri"
        }

  public init(automationAccountId: String, runbookName: String, webhookResourceId: String, isGlobalRunbook: Bool)  {
    self.automationAccountId = automationAccountId
    self.runbookName = runbookName
    self.webhookResourceId = webhookResourceId
    self.isGlobalRunbook = isGlobalRunbook
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.automationAccountId = try container.decode(String.self, forKey: .automationAccountId)
    self.runbookName = try container.decode(String.self, forKey: .runbookName)
    self.webhookResourceId = try container.decode(String.self, forKey: .webhookResourceId)
    self.isGlobalRunbook = try container.decode(Bool.self, forKey: .isGlobalRunbook)
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.serviceUri) {
        self.serviceUri = try container.decode(String?.self, forKey: .serviceUri)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.automationAccountId, forKey: .automationAccountId)
    try container.encode(self.runbookName, forKey: .runbookName)
    try container.encode(self.webhookResourceId, forKey: .webhookResourceId)
    try container.encode(self.isGlobalRunbook, forKey: .isGlobalRunbook)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.serviceUri != nil {try container.encode(self.serviceUri, forKey: .serviceUri)}
  }
}

extension DataFactory {
  public static func createAutomationRunbookReceiverProtocol(automationAccountId: String, runbookName: String, webhookResourceId: String, isGlobalRunbook: Bool) -> AutomationRunbookReceiverProtocol {
    return AutomationRunbookReceiverData(automationAccountId: automationAccountId, runbookName: runbookName, webhookResourceId: webhookResourceId, isGlobalRunbook: isGlobalRunbook)
  }
}
