// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TimeSeriesInformationData : TimeSeriesInformationProtocol {
    public var sensitivities: [String]
    public var values: [Double]
    public var timestamps: [Date]?

        enum CodingKeys: String, CodingKey {case sensitivities = "sensitivities"
        case values = "values"
        case timestamps = "timestamps"
        }

  public init(sensitivities: [String], values: [Double])  {
    self.sensitivities = sensitivities
    self.values = values
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.sensitivities = try container.decode([String].self, forKey: .sensitivities)
    self.values = try container.decode([Double].self, forKey: .values)
    if container.contains(.timestamps) {
        self.timestamps = try container.decode([Date]?.self, forKey: .timestamps)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.sensitivities as! [String], forKey: .sensitivities)
    try container.encode(self.values as! [Double], forKey: .values)
    if self.timestamps != nil {try container.encode(self.timestamps as! [Date]?, forKey: .timestamps)}
  }
}

extension DataFactory {
  public static func createTimeSeriesInformationProtocol(sensitivities: [String], values: [Double]) -> TimeSeriesInformationProtocol {
    return TimeSeriesInformationData(sensitivities: sensitivities, values: values)
  }
}
