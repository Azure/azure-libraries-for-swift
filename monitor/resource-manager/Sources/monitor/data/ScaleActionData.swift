// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ScaleActionData : ScaleActionProtocol {
    public var direction: ScaleDirectionEnum
    public var type: ScaleTypeEnum
    public var value: String?
    public var cooldown: String

        enum CodingKeys: String, CodingKey {case direction = "direction"
        case type = "type"
        case value = "value"
        case cooldown = "cooldown"
        }

  public init(direction: ScaleDirectionEnum, type: ScaleTypeEnum, cooldown: String)  {
    self.direction = direction
    self.type = type
    self.cooldown = cooldown
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.direction = try container.decode(ScaleDirectionEnum.self, forKey: .direction)
    self.type = try container.decode(ScaleTypeEnum.self, forKey: .type)
    if container.contains(.value) {
        self.value = try container.decode(String?.self, forKey: .value)
    }
    self.cooldown = try container.decode(String.self, forKey: .cooldown)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.direction, forKey: .direction)
    try container.encode(self.type, forKey: .type)
    if self.value != nil {try container.encode(self.value, forKey: .value)}
    try container.encode(self.cooldown, forKey: .cooldown)
  }
}

extension DataFactory {
  public static func createScaleActionProtocol(direction: ScaleDirectionEnum, type: ScaleTypeEnum, cooldown: String) -> ScaleActionProtocol {
    return ScaleActionData(direction: direction, type: type, cooldown: cooldown)
  }
}
