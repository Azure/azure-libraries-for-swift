// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ActionGroupData : ActionGroupProtocol {
    public var groupShortName: String
    public var enabled: Bool
    public var emailReceivers: [EmailReceiverProtocol?]?
    public var smsReceivers: [SmsReceiverProtocol?]?
    public var webhookReceivers: [WebhookReceiverProtocol?]?
    public var itsmReceivers: [ItsmReceiverProtocol?]?
    public var azureAppPushReceivers: [AzureAppPushReceiverProtocol?]?
    public var automationRunbookReceivers: [AutomationRunbookReceiverProtocol?]?
    public var voiceReceivers: [VoiceReceiverProtocol?]?

        enum CodingKeys: String, CodingKey {case groupShortName = "groupShortName"
        case enabled = "enabled"
        case emailReceivers = "emailReceivers"
        case smsReceivers = "smsReceivers"
        case webhookReceivers = "webhookReceivers"
        case itsmReceivers = "itsmReceivers"
        case azureAppPushReceivers = "azureAppPushReceivers"
        case automationRunbookReceivers = "automationRunbookReceivers"
        case voiceReceivers = "voiceReceivers"
        }

  public init(groupShortName: String, enabled: Bool)  {
    self.groupShortName = groupShortName
    self.enabled = enabled
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.groupShortName = try container.decode(String.self, forKey: .groupShortName)
    self.enabled = try container.decode(Bool.self, forKey: .enabled)
    if container.contains(.emailReceivers) {
        self.emailReceivers = try container.decode([EmailReceiverData?]?.self, forKey: .emailReceivers)
    }
    if container.contains(.smsReceivers) {
        self.smsReceivers = try container.decode([SmsReceiverData?]?.self, forKey: .smsReceivers)
    }
    if container.contains(.webhookReceivers) {
        self.webhookReceivers = try container.decode([WebhookReceiverData?]?.self, forKey: .webhookReceivers)
    }
    if container.contains(.itsmReceivers) {
        self.itsmReceivers = try container.decode([ItsmReceiverData?]?.self, forKey: .itsmReceivers)
    }
    if container.contains(.azureAppPushReceivers) {
        self.azureAppPushReceivers = try container.decode([AzureAppPushReceiverData?]?.self, forKey: .azureAppPushReceivers)
    }
    if container.contains(.automationRunbookReceivers) {
        self.automationRunbookReceivers = try container.decode([AutomationRunbookReceiverData?]?.self, forKey: .automationRunbookReceivers)
    }
    if container.contains(.voiceReceivers) {
        self.voiceReceivers = try container.decode([VoiceReceiverData?]?.self, forKey: .voiceReceivers)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.groupShortName, forKey: .groupShortName)
    try container.encode(self.enabled, forKey: .enabled)
    if self.emailReceivers != nil {try container.encode(self.emailReceivers as! [EmailReceiverData?]?, forKey: .emailReceivers)}
    if self.smsReceivers != nil {try container.encode(self.smsReceivers as! [SmsReceiverData?]?, forKey: .smsReceivers)}
    if self.webhookReceivers != nil {try container.encode(self.webhookReceivers as! [WebhookReceiverData?]?, forKey: .webhookReceivers)}
    if self.itsmReceivers != nil {try container.encode(self.itsmReceivers as! [ItsmReceiverData?]?, forKey: .itsmReceivers)}
    if self.azureAppPushReceivers != nil {try container.encode(self.azureAppPushReceivers as! [AzureAppPushReceiverData?]?, forKey: .azureAppPushReceivers)}
    if self.automationRunbookReceivers != nil {try container.encode(self.automationRunbookReceivers as! [AutomationRunbookReceiverData?]?, forKey: .automationRunbookReceivers)}
    if self.voiceReceivers != nil {try container.encode(self.voiceReceivers as! [VoiceReceiverData?]?, forKey: .voiceReceivers)}
  }
}

extension DataFactory {
  public static func createActionGroupProtocol(groupShortName: String, enabled: Bool) -> ActionGroupProtocol {
    return ActionGroupData(groupShortName: groupShortName, enabled: enabled)
  }
}
