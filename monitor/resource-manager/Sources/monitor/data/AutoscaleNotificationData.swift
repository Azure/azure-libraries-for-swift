// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AutoscaleNotificationData : AutoscaleNotificationProtocol {
    public var operation: String
    public var email: EmailNotificationProtocol?
    public var webhooks: [WebhookNotificationProtocol?]?

        enum CodingKeys: String, CodingKey {case operation = "operation"
        case email = "email"
        case webhooks = "webhooks"
        }

  public init(operation: String)  {
    self.operation = operation
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.operation = try container.decode(String.self, forKey: .operation)
    if container.contains(.email) {
        self.email = try container.decode(EmailNotificationData?.self, forKey: .email)
    }
    if container.contains(.webhooks) {
        self.webhooks = try container.decode([WebhookNotificationData?]?.self, forKey: .webhooks)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.operation, forKey: .operation)
    if self.email != nil {try container.encode(self.email as! EmailNotificationData?, forKey: .email)}
    if self.webhooks != nil {try container.encode(self.webhooks as! [WebhookNotificationData?]?, forKey: .webhooks)}
  }
}

extension DataFactory {
  public static func createAutoscaleNotificationProtocol(operation: String) -> AutoscaleNotificationProtocol {
    return AutoscaleNotificationData(operation: operation)
  }
}
