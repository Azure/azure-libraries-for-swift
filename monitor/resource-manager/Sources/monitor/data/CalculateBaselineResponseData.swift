// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CalculateBaselineResponseData : CalculateBaselineResponseProtocol {
    public var type: String
    public var timestamps: [Date]?
    public var baseline: [BaselineProtocol]

        enum CodingKeys: String, CodingKey {case type = "type"
        case timestamps = "timestamps"
        case baseline = "baseline"
        }

  public init(type: String, baseline: [BaselineProtocol])  {
    self.type = type
    self.baseline = baseline
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.type = try container.decode(String.self, forKey: .type)
    if container.contains(.timestamps) {
        self.timestamps = try container.decode([Date]?.self, forKey: .timestamps)
    }
    self.baseline = try container.decode([BaselineData].self, forKey: .baseline)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.type, forKey: .type)
    if self.timestamps != nil {try container.encode(self.timestamps as! [Date]?, forKey: .timestamps)}
    try container.encode(self.baseline as! [BaselineData], forKey: .baseline)
  }
}

extension DataFactory {
  public static func createCalculateBaselineResponseProtocol(type: String, baseline: [BaselineProtocol]) -> CalculateBaselineResponseProtocol {
    return CalculateBaselineResponseData(type: type, baseline: baseline)
  }
}
