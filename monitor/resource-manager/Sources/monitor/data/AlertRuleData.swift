// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AlertRuleData : AlertRuleProtocol {
    public var name: String
    public var description: String?
    public var isEnabled: Bool
    public var condition: RuleConditionProtocol
    public var actions: [RuleActionProtocol?]?
    public var lastUpdatedTime: Date?

        enum CodingKeys: String, CodingKey {case name = "name"
        case description = "description"
        case isEnabled = "isEnabled"
        case condition = "condition"
        case actions = "actions"
        case lastUpdatedTime = "lastUpdatedTime"
        }

  public init(name: String, isEnabled: Bool, condition: RuleConditionProtocol)  {
    self.name = name
    self.isEnabled = isEnabled
    self.condition = condition
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.name = try container.decode(String.self, forKey: .name)
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    self.isEnabled = try container.decode(Bool.self, forKey: .isEnabled)
    self.condition = try container.decode(RuleConditionData.self, forKey: .condition)
    if container.contains(.actions) {
        self.actions = try container.decode([RuleActionData?]?.self, forKey: .actions)
    }
    if container.contains(.lastUpdatedTime) {
        self.lastUpdatedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastUpdatedTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.name, forKey: .name)
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    try container.encode(self.isEnabled, forKey: .isEnabled)
    try container.encode(self.condition as! RuleConditionData, forKey: .condition)
    if self.actions != nil {try container.encode(self.actions as! [RuleActionData?]?, forKey: .actions)}
    if self.lastUpdatedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastUpdatedTime!, format: .dateTime), forKey: .lastUpdatedTime)
    }
  }
}

extension DataFactory {
  public static func createAlertRuleProtocol(name: String, isEnabled: Bool, condition: RuleConditionProtocol) -> AlertRuleProtocol {
    return AlertRuleData(name: name, isEnabled: isEnabled, condition: condition)
  }
}
