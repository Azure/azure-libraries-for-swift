// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ActivityLogAlertActionGroupData : ActivityLogAlertActionGroupProtocol {
    public var actionGroupId: String
    public var webhookProperties: [String:String]?

        enum CodingKeys: String, CodingKey {case actionGroupId = "actionGroupId"
        case webhookProperties = "webhookProperties"
        }

  public init(actionGroupId: String)  {
    self.actionGroupId = actionGroupId
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.actionGroupId = try container.decode(String.self, forKey: .actionGroupId)
    if container.contains(.webhookProperties) {
        self.webhookProperties = try container.decode([String:String]?.self, forKey: .webhookProperties)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.actionGroupId, forKey: .actionGroupId)
    if self.webhookProperties != nil {try container.encode(self.webhookProperties, forKey: .webhookProperties)}
  }
}

extension DataFactory {
  public static func createActivityLogAlertActionGroupProtocol(actionGroupId: String) -> ActivityLogAlertActionGroupProtocol {
    return ActivityLogAlertActionGroupData(actionGroupId: actionGroupId)
  }
}
