// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DiagnosticSettingsData : DiagnosticSettingsProtocol {
    public var storageAccountId: String?
    public var eventHubAuthorizationRuleId: String?
    public var eventHubName: String?
    public var metrics: [MetricSettingsProtocol?]?
    public var logs: [LogSettingsProtocol?]?
    public var workspaceId: String?

        enum CodingKeys: String, CodingKey {case storageAccountId = "storageAccountId"
        case eventHubAuthorizationRuleId = "eventHubAuthorizationRuleId"
        case eventHubName = "eventHubName"
        case metrics = "metrics"
        case logs = "logs"
        case workspaceId = "workspaceId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.storageAccountId) {
        self.storageAccountId = try container.decode(String?.self, forKey: .storageAccountId)
    }
    if container.contains(.eventHubAuthorizationRuleId) {
        self.eventHubAuthorizationRuleId = try container.decode(String?.self, forKey: .eventHubAuthorizationRuleId)
    }
    if container.contains(.eventHubName) {
        self.eventHubName = try container.decode(String?.self, forKey: .eventHubName)
    }
    if container.contains(.metrics) {
        self.metrics = try container.decode([MetricSettingsData?]?.self, forKey: .metrics)
    }
    if container.contains(.logs) {
        self.logs = try container.decode([LogSettingsData?]?.self, forKey: .logs)
    }
    if container.contains(.workspaceId) {
        self.workspaceId = try container.decode(String?.self, forKey: .workspaceId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.storageAccountId != nil {try container.encode(self.storageAccountId, forKey: .storageAccountId)}
    if self.eventHubAuthorizationRuleId != nil {try container.encode(self.eventHubAuthorizationRuleId, forKey: .eventHubAuthorizationRuleId)}
    if self.eventHubName != nil {try container.encode(self.eventHubName, forKey: .eventHubName)}
    if self.metrics != nil {try container.encode(self.metrics as! [MetricSettingsData?]?, forKey: .metrics)}
    if self.logs != nil {try container.encode(self.logs as! [LogSettingsData?]?, forKey: .logs)}
    if self.workspaceId != nil {try container.encode(self.workspaceId, forKey: .workspaceId)}
  }
}

extension DataFactory {
  public static func createDiagnosticSettingsProtocol() -> DiagnosticSettingsProtocol {
    return DiagnosticSettingsData()
  }
}
