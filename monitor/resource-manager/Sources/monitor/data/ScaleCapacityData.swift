// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ScaleCapacityData : ScaleCapacityProtocol {
    public var minimum: String
    public var maximum: String
    public var _default: String

        enum CodingKeys: String, CodingKey {case minimum = "minimum"
        case maximum = "maximum"
        case _default = "default"
        }

  public init(minimum: String, maximum: String, _default: String)  {
    self.minimum = minimum
    self.maximum = maximum
    self._default = _default
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.minimum = try container.decode(String.self, forKey: .minimum)
    self.maximum = try container.decode(String.self, forKey: .maximum)
    self._default = try container.decode(String.self, forKey: ._default)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.minimum, forKey: .minimum)
    try container.encode(self.maximum, forKey: .maximum)
    try container.encode(self._default, forKey: ._default)
  }
}

extension DataFactory {
  public static func createScaleCapacityProtocol(minimum: String, maximum: String, _default: String) -> ScaleCapacityProtocol {
    return ScaleCapacityData(minimum: minimum, maximum: maximum, _default: _default)
  }
}
