// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TimeSeriesElementData : TimeSeriesElementProtocol {
    public var metadatavalues: [MetadataValueProtocol?]?
    public var data: [MetricValueProtocol?]?

        enum CodingKeys: String, CodingKey {case metadatavalues = "metadatavalues"
        case data = "data"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.metadatavalues) {
        self.metadatavalues = try container.decode([MetadataValueData?]?.self, forKey: .metadatavalues)
    }
    if container.contains(.data) {
        self.data = try container.decode([MetricValueData?]?.self, forKey: .data)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.metadatavalues != nil {try container.encode(self.metadatavalues as! [MetadataValueData?]?, forKey: .metadatavalues)}
    if self.data != nil {try container.encode(self.data as! [MetricValueData?]?, forKey: .data)}
  }
}

extension DataFactory {
  public static func createTimeSeriesElementProtocol() -> TimeSeriesElementProtocol {
    return TimeSeriesElementData()
  }
}
