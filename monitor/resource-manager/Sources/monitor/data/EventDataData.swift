// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EventDataData : EventDataProtocol {
    public var authorization: SenderAuthorizationProtocol?
    public var claims: [String:String]?
    public var caller: String?
    public var description: String?
    public var id: String?
    public var eventDataId: String?
    public var correlationId: String?
    public var eventName: LocalizableStringProtocol?
    public var category: LocalizableStringProtocol?
    public var httpRequest: HttpRequestInfoProtocol?
    public var level: EventLevelEnum?
    public var resourceGroupName: String?
    public var resourceProviderName: LocalizableStringProtocol?
    public var resourceId: String?
    public var resourceType: LocalizableStringProtocol?
    public var operationId: String?
    public var operationName: LocalizableStringProtocol?
    public var properties: [String:String]?
    public var status: LocalizableStringProtocol?
    public var subStatus: LocalizableStringProtocol?
    public var eventTimestamp: Date?
    public var submissionTimestamp: Date?
    public var subscriptionId: String?
    public var tenantId: String?

        enum CodingKeys: String, CodingKey {case authorization = "authorization"
        case claims = "claims"
        case caller = "caller"
        case description = "description"
        case id = "id"
        case eventDataId = "eventDataId"
        case correlationId = "correlationId"
        case eventName = "eventName"
        case category = "category"
        case httpRequest = "httpRequest"
        case level = "level"
        case resourceGroupName = "resourceGroupName"
        case resourceProviderName = "resourceProviderName"
        case resourceId = "resourceId"
        case resourceType = "resourceType"
        case operationId = "operationId"
        case operationName = "operationName"
        case properties = "properties"
        case status = "status"
        case subStatus = "subStatus"
        case eventTimestamp = "eventTimestamp"
        case submissionTimestamp = "submissionTimestamp"
        case subscriptionId = "subscriptionId"
        case tenantId = "tenantId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.authorization) {
        self.authorization = try container.decode(SenderAuthorizationData?.self, forKey: .authorization)
    }
    if container.contains(.claims) {
        self.claims = try container.decode([String:String]?.self, forKey: .claims)
    }
    if container.contains(.caller) {
        self.caller = try container.decode(String?.self, forKey: .caller)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.eventDataId) {
        self.eventDataId = try container.decode(String?.self, forKey: .eventDataId)
    }
    if container.contains(.correlationId) {
        self.correlationId = try container.decode(String?.self, forKey: .correlationId)
    }
    if container.contains(.eventName) {
        self.eventName = try container.decode(LocalizableStringData?.self, forKey: .eventName)
    }
    if container.contains(.category) {
        self.category = try container.decode(LocalizableStringData?.self, forKey: .category)
    }
    if container.contains(.httpRequest) {
        self.httpRequest = try container.decode(HttpRequestInfoData?.self, forKey: .httpRequest)
    }
    if container.contains(.level) {
        self.level = try container.decode(EventLevelEnum?.self, forKey: .level)
    }
    if container.contains(.resourceGroupName) {
        self.resourceGroupName = try container.decode(String?.self, forKey: .resourceGroupName)
    }
    if container.contains(.resourceProviderName) {
        self.resourceProviderName = try container.decode(LocalizableStringData?.self, forKey: .resourceProviderName)
    }
    if container.contains(.resourceId) {
        self.resourceId = try container.decode(String?.self, forKey: .resourceId)
    }
    if container.contains(.resourceType) {
        self.resourceType = try container.decode(LocalizableStringData?.self, forKey: .resourceType)
    }
    if container.contains(.operationId) {
        self.operationId = try container.decode(String?.self, forKey: .operationId)
    }
    if container.contains(.operationName) {
        self.operationName = try container.decode(LocalizableStringData?.self, forKey: .operationName)
    }
    if container.contains(.properties) {
        self.properties = try container.decode([String:String]?.self, forKey: .properties)
    }
    if container.contains(.status) {
        self.status = try container.decode(LocalizableStringData?.self, forKey: .status)
    }
    if container.contains(.subStatus) {
        self.subStatus = try container.decode(LocalizableStringData?.self, forKey: .subStatus)
    }
    if container.contains(.eventTimestamp) {
        self.eventTimestamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .eventTimestamp)), format: .dateTime)
    }
    if container.contains(.submissionTimestamp) {
        self.submissionTimestamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .submissionTimestamp)), format: .dateTime)
    }
    if container.contains(.subscriptionId) {
        self.subscriptionId = try container.decode(String?.self, forKey: .subscriptionId)
    }
    if container.contains(.tenantId) {
        self.tenantId = try container.decode(String?.self, forKey: .tenantId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.authorization != nil {try container.encode(self.authorization as! SenderAuthorizationData?, forKey: .authorization)}
    if self.claims != nil {try container.encode(self.claims, forKey: .claims)}
    if self.caller != nil {try container.encode(self.caller, forKey: .caller)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.eventDataId != nil {try container.encode(self.eventDataId, forKey: .eventDataId)}
    if self.correlationId != nil {try container.encode(self.correlationId, forKey: .correlationId)}
    if self.eventName != nil {try container.encode(self.eventName as! LocalizableStringData?, forKey: .eventName)}
    if self.category != nil {try container.encode(self.category as! LocalizableStringData?, forKey: .category)}
    if self.httpRequest != nil {try container.encode(self.httpRequest as! HttpRequestInfoData?, forKey: .httpRequest)}
    if self.level != nil {try container.encode(self.level, forKey: .level)}
    if self.resourceGroupName != nil {try container.encode(self.resourceGroupName, forKey: .resourceGroupName)}
    if self.resourceProviderName != nil {try container.encode(self.resourceProviderName as! LocalizableStringData?, forKey: .resourceProviderName)}
    if self.resourceId != nil {try container.encode(self.resourceId, forKey: .resourceId)}
    if self.resourceType != nil {try container.encode(self.resourceType as! LocalizableStringData?, forKey: .resourceType)}
    if self.operationId != nil {try container.encode(self.operationId, forKey: .operationId)}
    if self.operationName != nil {try container.encode(self.operationName as! LocalizableStringData?, forKey: .operationName)}
    if self.properties != nil {try container.encode(self.properties, forKey: .properties)}
    if self.status != nil {try container.encode(self.status as! LocalizableStringData?, forKey: .status)}
    if self.subStatus != nil {try container.encode(self.subStatus as! LocalizableStringData?, forKey: .subStatus)}
    if self.eventTimestamp != nil {
        try container.encode(DateConverter.toString(date: self.eventTimestamp!, format: .dateTime), forKey: .eventTimestamp)
    }
    if self.submissionTimestamp != nil {
        try container.encode(DateConverter.toString(date: self.submissionTimestamp!, format: .dateTime), forKey: .submissionTimestamp)
    }
    if self.subscriptionId != nil {try container.encode(self.subscriptionId, forKey: .subscriptionId)}
    if self.tenantId != nil {try container.encode(self.tenantId, forKey: .tenantId)}
  }
}

extension DataFactory {
  public static func createEventDataProtocol() -> EventDataProtocol {
    return EventDataData()
  }
}
