// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecurrentScheduleData : RecurrentScheduleProtocol {
    public var timeZone: String
    public var days: [String]
    public var hours: [Int32]
    public var minutes: [Int32]

        enum CodingKeys: String, CodingKey {case timeZone = "timeZone"
        case days = "days"
        case hours = "hours"
        case minutes = "minutes"
        }

  public init(timeZone: String, days: [String], hours: [Int32], minutes: [Int32])  {
    self.timeZone = timeZone
    self.days = days
    self.hours = hours
    self.minutes = minutes
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.timeZone = try container.decode(String.self, forKey: .timeZone)
    self.days = try container.decode([String].self, forKey: .days)
    self.hours = try container.decode([Int32].self, forKey: .hours)
    self.minutes = try container.decode([Int32].self, forKey: .minutes)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.timeZone, forKey: .timeZone)
    try container.encode(self.days as! [String], forKey: .days)
    try container.encode(self.hours as! [Int32], forKey: .hours)
    try container.encode(self.minutes as! [Int32], forKey: .minutes)
  }
}

extension DataFactory {
  public static func createRecurrentScheduleProtocol(timeZone: String, days: [String], hours: [Int32], minutes: [Int32]) -> RecurrentScheduleProtocol {
    return RecurrentScheduleData(timeZone: timeZone, days: days, hours: hours, minutes: minutes)
  }
}
