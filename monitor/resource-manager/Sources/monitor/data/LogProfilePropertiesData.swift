// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LogProfilePropertiesData : LogProfilePropertiesProtocol {
    public var storageAccountId: String?
    public var serviceBusRuleId: String?
    public var locations: [String]
    public var categories: [String]
    public var retentionPolicy: RetentionPolicyProtocol

        enum CodingKeys: String, CodingKey {case storageAccountId = "storageAccountId"
        case serviceBusRuleId = "serviceBusRuleId"
        case locations = "locations"
        case categories = "categories"
        case retentionPolicy = "retentionPolicy"
        }

  public init(locations: [String], categories: [String], retentionPolicy: RetentionPolicyProtocol)  {
    self.locations = locations
    self.categories = categories
    self.retentionPolicy = retentionPolicy
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.storageAccountId) {
        self.storageAccountId = try container.decode(String?.self, forKey: .storageAccountId)
    }
    if container.contains(.serviceBusRuleId) {
        self.serviceBusRuleId = try container.decode(String?.self, forKey: .serviceBusRuleId)
    }
    self.locations = try container.decode([String].self, forKey: .locations)
    self.categories = try container.decode([String].self, forKey: .categories)
    self.retentionPolicy = try container.decode(RetentionPolicyData.self, forKey: .retentionPolicy)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.storageAccountId != nil {try container.encode(self.storageAccountId, forKey: .storageAccountId)}
    if self.serviceBusRuleId != nil {try container.encode(self.serviceBusRuleId, forKey: .serviceBusRuleId)}
    try container.encode(self.locations as! [String], forKey: .locations)
    try container.encode(self.categories as! [String], forKey: .categories)
    try container.encode(self.retentionPolicy as! RetentionPolicyData, forKey: .retentionPolicy)
  }
}

extension DataFactory {
  public static func createLogProfilePropertiesProtocol(locations: [String], categories: [String], retentionPolicy: RetentionPolicyProtocol) -> LogProfilePropertiesProtocol {
    return LogProfilePropertiesData(locations: locations, categories: categories, retentionPolicy: retentionPolicy)
  }
}
