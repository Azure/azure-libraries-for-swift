// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AutoscaleSettingData : AutoscaleSettingProtocol {
    public var profiles: [AutoscaleProfileProtocol]
    public var notifications: [AutoscaleNotificationProtocol?]?
    public var enabled: Bool?
    public var name: String?
    public var targetResourceUri: String?

        enum CodingKeys: String, CodingKey {case profiles = "profiles"
        case notifications = "notifications"
        case enabled = "enabled"
        case name = "name"
        case targetResourceUri = "targetResourceUri"
        }

  public init(profiles: [AutoscaleProfileProtocol])  {
    self.profiles = profiles
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.profiles = try container.decode([AutoscaleProfileData].self, forKey: .profiles)
    if container.contains(.notifications) {
        self.notifications = try container.decode([AutoscaleNotificationData?]?.self, forKey: .notifications)
    }
    if container.contains(.enabled) {
        self.enabled = try container.decode(Bool?.self, forKey: .enabled)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.targetResourceUri) {
        self.targetResourceUri = try container.decode(String?.self, forKey: .targetResourceUri)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.profiles as! [AutoscaleProfileData], forKey: .profiles)
    if self.notifications != nil {try container.encode(self.notifications as! [AutoscaleNotificationData?]?, forKey: .notifications)}
    if self.enabled != nil {try container.encode(self.enabled, forKey: .enabled)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.targetResourceUri != nil {try container.encode(self.targetResourceUri, forKey: .targetResourceUri)}
  }
}

extension DataFactory {
  public static func createAutoscaleSettingProtocol(profiles: [AutoscaleProfileProtocol]) -> AutoscaleSettingProtocol {
    return AutoscaleSettingData(profiles: profiles)
  }
}
