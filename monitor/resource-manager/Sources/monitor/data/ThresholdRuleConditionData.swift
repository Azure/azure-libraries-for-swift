// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ThresholdRuleConditionData : ThresholdRuleConditionProtocol, RuleConditionProtocol {
    public var dataSource: RuleDataSourceProtocol?
    public var _operator: ConditionOperatorEnum
    public var threshold: Double
    public var windowSize: String?
    public var timeAggregation: TimeAggregationOperatorEnum?

        enum CodingKeys: String, CodingKey {case dataSource = "dataSource"
        case _operator = "operator"
        case threshold = "threshold"
        case windowSize = "windowSize"
        case timeAggregation = "timeAggregation"
        }

  public init(_operator: ConditionOperatorEnum, threshold: Double)  {
    self._operator = _operator
    self.threshold = threshold
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.dataSource) {
        self.dataSource = try container.decode(RuleDataSourceData?.self, forKey: .dataSource)
    }
    self._operator = try container.decode(ConditionOperatorEnum.self, forKey: ._operator)
    self.threshold = try container.decode(Double.self, forKey: .threshold)
    if container.contains(.windowSize) {
        self.windowSize = try container.decode(String?.self, forKey: .windowSize)
    }
    if container.contains(.timeAggregation) {
        self.timeAggregation = try container.decode(TimeAggregationOperatorEnum?.self, forKey: .timeAggregation)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.dataSource != nil {try container.encode(self.dataSource as! RuleDataSourceData?, forKey: .dataSource)}
    try container.encode(self._operator, forKey: ._operator)
    try container.encode(self.threshold, forKey: .threshold)
    if self.windowSize != nil {try container.encode(self.windowSize, forKey: .windowSize)}
    if self.timeAggregation != nil {try container.encode(self.timeAggregation, forKey: .timeAggregation)}
  }
}

extension DataFactory {
  public static func createThresholdRuleConditionProtocol(_operator: ConditionOperatorEnum, threshold: Double) -> ThresholdRuleConditionProtocol {
    return ThresholdRuleConditionData(_operator: _operator, threshold: threshold)
  }
}
