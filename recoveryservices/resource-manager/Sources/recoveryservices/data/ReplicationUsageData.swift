// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ReplicationUsageData : ReplicationUsageProtocol {
    public var monitoringSummary: MonitoringSummaryProtocol?
    public var jobsSummary: JobsSummaryProtocol?
    public var protectedItemCount: Int32?
    public var recoveryPlanCount: Int32?
    public var registeredServersCount: Int32?
    public var recoveryServicesProviderAuthType: Int32?

        enum CodingKeys: String, CodingKey {case monitoringSummary = "monitoringSummary"
        case jobsSummary = "jobsSummary"
        case protectedItemCount = "protectedItemCount"
        case recoveryPlanCount = "recoveryPlanCount"
        case registeredServersCount = "registeredServersCount"
        case recoveryServicesProviderAuthType = "recoveryServicesProviderAuthType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.monitoringSummary) {
        self.monitoringSummary = try container.decode(MonitoringSummaryData?.self, forKey: .monitoringSummary)
    }
    if container.contains(.jobsSummary) {
        self.jobsSummary = try container.decode(JobsSummaryData?.self, forKey: .jobsSummary)
    }
    if container.contains(.protectedItemCount) {
        self.protectedItemCount = try container.decode(Int32?.self, forKey: .protectedItemCount)
    }
    if container.contains(.recoveryPlanCount) {
        self.recoveryPlanCount = try container.decode(Int32?.self, forKey: .recoveryPlanCount)
    }
    if container.contains(.registeredServersCount) {
        self.registeredServersCount = try container.decode(Int32?.self, forKey: .registeredServersCount)
    }
    if container.contains(.recoveryServicesProviderAuthType) {
        self.recoveryServicesProviderAuthType = try container.decode(Int32?.self, forKey: .recoveryServicesProviderAuthType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.monitoringSummary != nil {try container.encode(self.monitoringSummary as! MonitoringSummaryData?, forKey: .monitoringSummary)}
    if self.jobsSummary != nil {try container.encode(self.jobsSummary as! JobsSummaryData?, forKey: .jobsSummary)}
    if self.protectedItemCount != nil {try container.encode(self.protectedItemCount, forKey: .protectedItemCount)}
    if self.recoveryPlanCount != nil {try container.encode(self.recoveryPlanCount, forKey: .recoveryPlanCount)}
    if self.registeredServersCount != nil {try container.encode(self.registeredServersCount, forKey: .registeredServersCount)}
    if self.recoveryServicesProviderAuthType != nil {try container.encode(self.recoveryServicesProviderAuthType, forKey: .recoveryServicesProviderAuthType)}
  }
}

extension DataFactory {
  public static func createReplicationUsageProtocol() -> ReplicationUsageProtocol {
    return ReplicationUsageData()
  }
}
