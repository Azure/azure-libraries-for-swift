// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ResourceCertificateAndAcsDetailsData : ResourceCertificateAndAcsDetailsProtocol, ResourceCertificateDetailsProtocol {
    public var certificate: [UInt8]?
    public var friendlyName: String?
    public var issuer: String?
    public var resourceId: Int64?
    public var subject: String?
    public var thumbprint: String?
    public var validFrom: Date?
    public var validTo: Date?
    public var globalAcsNamespace: String
    public var globalAcsHostName: String
    public var globalAcsRPRealm: String

        enum CodingKeys: String, CodingKey {case certificate = "certificate"
        case friendlyName = "friendlyName"
        case issuer = "issuer"
        case resourceId = "resourceId"
        case subject = "subject"
        case thumbprint = "thumbprint"
        case validFrom = "validFrom"
        case validTo = "validTo"
        case globalAcsNamespace = "globalAcsNamespace"
        case globalAcsHostName = "globalAcsHostName"
        case globalAcsRPRealm = "globalAcsRPRealm"
        }

  public init(globalAcsNamespace: String, globalAcsHostName: String, globalAcsRPRealm: String)  {
    self.globalAcsNamespace = globalAcsNamespace
    self.globalAcsHostName = globalAcsHostName
    self.globalAcsRPRealm = globalAcsRPRealm
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.certificate) {
        self.certificate = try container.decode([UInt8]?.self, forKey: .certificate)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.issuer) {
        self.issuer = try container.decode(String?.self, forKey: .issuer)
    }
    if container.contains(.resourceId) {
        self.resourceId = try container.decode(Int64?.self, forKey: .resourceId)
    }
    if container.contains(.subject) {
        self.subject = try container.decode(String?.self, forKey: .subject)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.validFrom) {
        self.validFrom = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .validFrom)), format: .dateTime)
    }
    if container.contains(.validTo) {
        self.validTo = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .validTo)), format: .dateTime)
    }
    self.globalAcsNamespace = try container.decode(String.self, forKey: .globalAcsNamespace)
    self.globalAcsHostName = try container.decode(String.self, forKey: .globalAcsHostName)
    self.globalAcsRPRealm = try container.decode(String.self, forKey: .globalAcsRPRealm)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.certificate != nil {try container.encode(self.certificate, forKey: .certificate)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.issuer != nil {try container.encode(self.issuer, forKey: .issuer)}
    if self.resourceId != nil {try container.encode(self.resourceId, forKey: .resourceId)}
    if self.subject != nil {try container.encode(self.subject, forKey: .subject)}
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.validFrom != nil {
        try container.encode(DateConverter.toString(date: self.validFrom!, format: .dateTime), forKey: .validFrom)
    }
    if self.validTo != nil {
        try container.encode(DateConverter.toString(date: self.validTo!, format: .dateTime), forKey: .validTo)
    }
    try container.encode(self.globalAcsNamespace, forKey: .globalAcsNamespace)
    try container.encode(self.globalAcsHostName, forKey: .globalAcsHostName)
    try container.encode(self.globalAcsRPRealm, forKey: .globalAcsRPRealm)
  }
}

extension DataFactory {
  public static func createResourceCertificateAndAcsDetailsProtocol(globalAcsNamespace: String, globalAcsHostName: String, globalAcsRPRealm: String) -> ResourceCertificateAndAcsDetailsProtocol {
    return ResourceCertificateAndAcsDetailsData(globalAcsNamespace: globalAcsNamespace, globalAcsHostName: globalAcsHostName, globalAcsRPRealm: globalAcsRPRealm)
  }
}
