// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobsSummaryData : JobsSummaryProtocol {
    public var failedJobs: Int32?
    public var suspendedJobs: Int32?
    public var inProgressJobs: Int32?

        enum CodingKeys: String, CodingKey {case failedJobs = "failedJobs"
        case suspendedJobs = "suspendedJobs"
        case inProgressJobs = "inProgressJobs"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.failedJobs) {
        self.failedJobs = try container.decode(Int32?.self, forKey: .failedJobs)
    }
    if container.contains(.suspendedJobs) {
        self.suspendedJobs = try container.decode(Int32?.self, forKey: .suspendedJobs)
    }
    if container.contains(.inProgressJobs) {
        self.inProgressJobs = try container.decode(Int32?.self, forKey: .inProgressJobs)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.failedJobs != nil {try container.encode(self.failedJobs, forKey: .failedJobs)}
    if self.suspendedJobs != nil {try container.encode(self.suspendedJobs, forKey: .suspendedJobs)}
    if self.inProgressJobs != nil {try container.encode(self.inProgressJobs, forKey: .inProgressJobs)}
  }
}

extension DataFactory {
  public static func createJobsSummaryProtocol() -> JobsSummaryProtocol {
    return JobsSummaryData()
  }
}
