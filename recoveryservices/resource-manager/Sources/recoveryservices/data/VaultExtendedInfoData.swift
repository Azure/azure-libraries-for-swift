// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VaultExtendedInfoData : VaultExtendedInfoProtocol {
    public var integrityKey: String?
    public var encryptionKey: String?
    public var encryptionKeyThumbprint: String?
    public var algorithm: String?

        enum CodingKeys: String, CodingKey {case integrityKey = "integrityKey"
        case encryptionKey = "encryptionKey"
        case encryptionKeyThumbprint = "encryptionKeyThumbprint"
        case algorithm = "algorithm"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.integrityKey) {
        self.integrityKey = try container.decode(String?.self, forKey: .integrityKey)
    }
    if container.contains(.encryptionKey) {
        self.encryptionKey = try container.decode(String?.self, forKey: .encryptionKey)
    }
    if container.contains(.encryptionKeyThumbprint) {
        self.encryptionKeyThumbprint = try container.decode(String?.self, forKey: .encryptionKeyThumbprint)
    }
    if container.contains(.algorithm) {
        self.algorithm = try container.decode(String?.self, forKey: .algorithm)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.integrityKey != nil {try container.encode(self.integrityKey, forKey: .integrityKey)}
    if self.encryptionKey != nil {try container.encode(self.encryptionKey, forKey: .encryptionKey)}
    if self.encryptionKeyThumbprint != nil {try container.encode(self.encryptionKeyThumbprint, forKey: .encryptionKeyThumbprint)}
    if self.algorithm != nil {try container.encode(self.algorithm, forKey: .algorithm)}
  }
}

extension DataFactory {
  public static func createVaultExtendedInfoProtocol() -> VaultExtendedInfoProtocol {
    return VaultExtendedInfoData()
  }
}
