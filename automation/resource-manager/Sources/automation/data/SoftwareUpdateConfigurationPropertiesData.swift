// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SoftwareUpdateConfigurationPropertiesData : SoftwareUpdateConfigurationPropertiesProtocol {
    public var updateConfiguration: UpdateConfigurationProtocol
    public var scheduleInfo: SchedulePropertiesProtocol
    public var provisioningState: String?
    public var error: ErrorResponseProtocol?
    public var creationTime: Date?
    public var createdBy: String?
    public var lastModifiedTime: Date?
    public var lastModifiedBy: String?

        enum CodingKeys: String, CodingKey {case updateConfiguration = "updateConfiguration"
        case scheduleInfo = "scheduleInfo"
        case provisioningState = "provisioningState"
        case error = "error"
        case creationTime = "creationTime"
        case createdBy = "createdBy"
        case lastModifiedTime = "lastModifiedTime"
        case lastModifiedBy = "lastModifiedBy"
        }

  public init(updateConfiguration: UpdateConfigurationProtocol, scheduleInfo: SchedulePropertiesProtocol)  {
    self.updateConfiguration = updateConfiguration
    self.scheduleInfo = scheduleInfo
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.updateConfiguration = try container.decode(UpdateConfigurationData.self, forKey: .updateConfiguration)
    self.scheduleInfo = try container.decode(SchedulePropertiesData.self, forKey: .scheduleInfo)
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.error) {
        self.error = try container.decode(ErrorResponseData?.self, forKey: .error)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.createdBy) {
        self.createdBy = try container.decode(String?.self, forKey: .createdBy)
    }
    if container.contains(.lastModifiedTime) {
        self.lastModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTime)), format: .dateTime)
    }
    if container.contains(.lastModifiedBy) {
        self.lastModifiedBy = try container.decode(String?.self, forKey: .lastModifiedBy)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.updateConfiguration as! UpdateConfigurationData, forKey: .updateConfiguration)
    try container.encode(self.scheduleInfo as! SchedulePropertiesData, forKey: .scheduleInfo)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.error != nil {try container.encode(self.error as! ErrorResponseData?, forKey: .error)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.createdBy != nil {try container.encode(self.createdBy, forKey: .createdBy)}
    if self.lastModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTime!, format: .dateTime), forKey: .lastModifiedTime)
    }
    if self.lastModifiedBy != nil {try container.encode(self.lastModifiedBy, forKey: .lastModifiedBy)}
  }
}

extension DataFactory {
  public static func createSoftwareUpdateConfigurationPropertiesProtocol(updateConfiguration: UpdateConfigurationProtocol, scheduleInfo: SchedulePropertiesProtocol) -> SoftwareUpdateConfigurationPropertiesProtocol {
    return SoftwareUpdateConfigurationPropertiesData(updateConfiguration: updateConfiguration, scheduleInfo: scheduleInfo)
  }
}
