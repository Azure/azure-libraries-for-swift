// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DscCompilationJobPropertiesData : DscCompilationJobPropertiesProtocol {
    public var configuration: DscConfigurationAssociationPropertyProtocol?
    public var startedBy: String?
    public var jobId: String?
    public var creationTime: Date?
    public var provisioningState: JobProvisioningStatePropertyProtocol?
    public var runOn: String?
    public var status: JobStatusEnum?
    public var statusDetails: String?
    public var startTime: Date?
    public var endTime: Date?
    public var exception: String?
    public var lastModifiedTime: Date?
    public var lastStatusModifiedTime: Date?
    public var parameters: [String:String]?

        enum CodingKeys: String, CodingKey {case configuration = "configuration"
        case startedBy = "startedBy"
        case jobId = "jobId"
        case creationTime = "creationTime"
        case provisioningState = "provisioningState"
        case runOn = "runOn"
        case status = "status"
        case statusDetails = "statusDetails"
        case startTime = "startTime"
        case endTime = "endTime"
        case exception = "exception"
        case lastModifiedTime = "lastModifiedTime"
        case lastStatusModifiedTime = "lastStatusModifiedTime"
        case parameters = "parameters"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.configuration) {
        self.configuration = try container.decode(DscConfigurationAssociationPropertyData?.self, forKey: .configuration)
    }
    if container.contains(.startedBy) {
        self.startedBy = try container.decode(String?.self, forKey: .startedBy)
    }
    if container.contains(.jobId) {
        self.jobId = try container.decode(String?.self, forKey: .jobId)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(JobProvisioningStatePropertyData?.self, forKey: .provisioningState)
    }
    if container.contains(.runOn) {
        self.runOn = try container.decode(String?.self, forKey: .runOn)
    }
    if container.contains(.status) {
        self.status = try container.decode(JobStatusEnum?.self, forKey: .status)
    }
    if container.contains(.statusDetails) {
        self.statusDetails = try container.decode(String?.self, forKey: .statusDetails)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.exception) {
        self.exception = try container.decode(String?.self, forKey: .exception)
    }
    if container.contains(.lastModifiedTime) {
        self.lastModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTime)), format: .dateTime)
    }
    if container.contains(.lastStatusModifiedTime) {
        self.lastStatusModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastStatusModifiedTime)), format: .dateTime)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([String:String]?.self, forKey: .parameters)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.configuration != nil {try container.encode(self.configuration as! DscConfigurationAssociationPropertyData?, forKey: .configuration)}
    if self.startedBy != nil {try container.encode(self.startedBy, forKey: .startedBy)}
    if self.jobId != nil {try container.encode(self.jobId, forKey: .jobId)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.provisioningState != nil {try container.encode(self.provisioningState as! JobProvisioningStatePropertyData?, forKey: .provisioningState)}
    if self.runOn != nil {try container.encode(self.runOn, forKey: .runOn)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.statusDetails != nil {try container.encode(self.statusDetails, forKey: .statusDetails)}
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.exception != nil {try container.encode(self.exception, forKey: .exception)}
    if self.lastModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTime!, format: .dateTime), forKey: .lastModifiedTime)
    }
    if self.lastStatusModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastStatusModifiedTime!, format: .dateTime), forKey: .lastStatusModifiedTime)
    }
    if self.parameters != nil {try container.encode(self.parameters, forKey: .parameters)}
  }
}

extension DataFactory {
  public static func createDscCompilationJobPropertiesProtocol() -> DscCompilationJobPropertiesProtocol {
    return DscCompilationJobPropertiesData()
  }
}
