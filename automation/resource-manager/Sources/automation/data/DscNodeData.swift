// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DscNodeData : DscNodeProtocol, ResourceProtocol {
    public var id: String?
    public var name: String?
    public var type: String?
    public var location: String
    public var tags: [String:String]?
    public var lastSeen: Date?
    public var registrationTime: Date?
    public var ip: String?
    public var accountId: String?
    public var nodeConfiguration: DscNodeConfigurationAssociationPropertyProtocol?
    public var status: String?
    public var nodeId: String?
    public var etag: String?
    public var extensionHandler: [DscNodeExtensionHandlerAssociationPropertyProtocol?]?

        enum CodingKeys: String, CodingKey {case id = "id"
        case name = "name"
        case type = "type"
        case location = "location"
        case tags = "tags"
        case lastSeen = "lastSeen"
        case registrationTime = "registrationTime"
        case ip = "ip"
        case accountId = "accountId"
        case nodeConfiguration = "nodeConfiguration"
        case status = "status"
        case nodeId = "nodeId"
        case etag = "etag"
        case extensionHandler = "extensionHandler"
        }

  public init(location: String)  {
    self.location = location
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.type) {
        self.type = try container.decode(String?.self, forKey: .type)
    }
    self.location = try container.decode(String.self, forKey: .location)
    if container.contains(.tags) {
        self.tags = try container.decode([String:String]?.self, forKey: .tags)
    }
    if container.contains(.lastSeen) {
        self.lastSeen = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastSeen)), format: .dateTime)
    }
    if container.contains(.registrationTime) {
        self.registrationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .registrationTime)), format: .dateTime)
    }
    if container.contains(.ip) {
        self.ip = try container.decode(String?.self, forKey: .ip)
    }
    if container.contains(.accountId) {
        self.accountId = try container.decode(String?.self, forKey: .accountId)
    }
    if container.contains(.nodeConfiguration) {
        self.nodeConfiguration = try container.decode(DscNodeConfigurationAssociationPropertyData?.self, forKey: .nodeConfiguration)
    }
    if container.contains(.status) {
        self.status = try container.decode(String?.self, forKey: .status)
    }
    if container.contains(.nodeId) {
        self.nodeId = try container.decode(String?.self, forKey: .nodeId)
    }
    if container.contains(.etag) {
        self.etag = try container.decode(String?.self, forKey: .etag)
    }
    if container.contains(.extensionHandler) {
        self.extensionHandler = try container.decode([DscNodeExtensionHandlerAssociationPropertyData?]?.self, forKey: .extensionHandler)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    try container.encode(self.location, forKey: .location)
    if self.tags != nil {try container.encode(self.tags, forKey: .tags)}
    if self.lastSeen != nil {
        try container.encode(DateConverter.toString(date: self.lastSeen!, format: .dateTime), forKey: .lastSeen)
    }
    if self.registrationTime != nil {
        try container.encode(DateConverter.toString(date: self.registrationTime!, format: .dateTime), forKey: .registrationTime)
    }
    if self.ip != nil {try container.encode(self.ip, forKey: .ip)}
    if self.accountId != nil {try container.encode(self.accountId, forKey: .accountId)}
    if self.nodeConfiguration != nil {try container.encode(self.nodeConfiguration as! DscNodeConfigurationAssociationPropertyData?, forKey: .nodeConfiguration)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.nodeId != nil {try container.encode(self.nodeId, forKey: .nodeId)}
    if self.etag != nil {try container.encode(self.etag, forKey: .etag)}
    if self.extensionHandler != nil {try container.encode(self.extensionHandler as! [DscNodeExtensionHandlerAssociationPropertyData?]?, forKey: .extensionHandler)}
  }
}

extension DataFactory {
  public static func createDscNodeProtocol(location: String) -> DscNodeProtocol {
    return DscNodeData(location: location)
  }
}
