// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DscNodeReportData : DscNodeReportProtocol {
    public var endTime: Date?
    public var lastModifiedTime: Date?
    public var startTime: Date?
    public var type: String?
    public var reportId: String?
    public var status: String?
    public var refreshMode: String?
    public var rebootRequested: String?
    public var reportFormatVersion: String?
    public var configurationVersion: String?
    public var id: String?
    public var errors: [DscReportErrorProtocol?]?
    public var resources: [DscReportResourceProtocol?]?
    public var metaConfiguration: DscMetaConfigurationProtocol?
    public var hostName: String?
    public var iPV4Addresses: [String]?
    public var iPV6Addresses: [String]?
    public var numberOfResources: Int32?
    public var rawErrors: String?

        enum CodingKeys: String, CodingKey {case endTime = "endTime"
        case lastModifiedTime = "lastModifiedTime"
        case startTime = "startTime"
        case type = "type"
        case reportId = "reportId"
        case status = "status"
        case refreshMode = "refreshMode"
        case rebootRequested = "rebootRequested"
        case reportFormatVersion = "reportFormatVersion"
        case configurationVersion = "configurationVersion"
        case id = "id"
        case errors = "errors"
        case resources = "resources"
        case metaConfiguration = "metaConfiguration"
        case hostName = "hostName"
        case iPV4Addresses = "iPV4Addresses"
        case iPV6Addresses = "iPV6Addresses"
        case numberOfResources = "numberOfResources"
        case rawErrors = "rawErrors"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.lastModifiedTime) {
        self.lastModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTime)), format: .dateTime)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.type) {
        self.type = try container.decode(String?.self, forKey: .type)
    }
    if container.contains(.reportId) {
        self.reportId = try container.decode(String?.self, forKey: .reportId)
    }
    if container.contains(.status) {
        self.status = try container.decode(String?.self, forKey: .status)
    }
    if container.contains(.refreshMode) {
        self.refreshMode = try container.decode(String?.self, forKey: .refreshMode)
    }
    if container.contains(.rebootRequested) {
        self.rebootRequested = try container.decode(String?.self, forKey: .rebootRequested)
    }
    if container.contains(.reportFormatVersion) {
        self.reportFormatVersion = try container.decode(String?.self, forKey: .reportFormatVersion)
    }
    if container.contains(.configurationVersion) {
        self.configurationVersion = try container.decode(String?.self, forKey: .configurationVersion)
    }
    if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.errors) {
        self.errors = try container.decode([DscReportErrorData?]?.self, forKey: .errors)
    }
    if container.contains(.resources) {
        self.resources = try container.decode([DscReportResourceData?]?.self, forKey: .resources)
    }
    if container.contains(.metaConfiguration) {
        self.metaConfiguration = try container.decode(DscMetaConfigurationData?.self, forKey: .metaConfiguration)
    }
    if container.contains(.hostName) {
        self.hostName = try container.decode(String?.self, forKey: .hostName)
    }
    if container.contains(.iPV4Addresses) {
        self.iPV4Addresses = try container.decode([String]?.self, forKey: .iPV4Addresses)
    }
    if container.contains(.iPV6Addresses) {
        self.iPV6Addresses = try container.decode([String]?.self, forKey: .iPV6Addresses)
    }
    if container.contains(.numberOfResources) {
        self.numberOfResources = try container.decode(Int32?.self, forKey: .numberOfResources)
    }
    if container.contains(.rawErrors) {
        self.rawErrors = try container.decode(String?.self, forKey: .rawErrors)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.lastModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTime!, format: .dateTime), forKey: .lastModifiedTime)
    }
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.reportId != nil {try container.encode(self.reportId, forKey: .reportId)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.refreshMode != nil {try container.encode(self.refreshMode, forKey: .refreshMode)}
    if self.rebootRequested != nil {try container.encode(self.rebootRequested, forKey: .rebootRequested)}
    if self.reportFormatVersion != nil {try container.encode(self.reportFormatVersion, forKey: .reportFormatVersion)}
    if self.configurationVersion != nil {try container.encode(self.configurationVersion, forKey: .configurationVersion)}
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.errors != nil {try container.encode(self.errors as! [DscReportErrorData?]?, forKey: .errors)}
    if self.resources != nil {try container.encode(self.resources as! [DscReportResourceData?]?, forKey: .resources)}
    if self.metaConfiguration != nil {try container.encode(self.metaConfiguration as! DscMetaConfigurationData?, forKey: .metaConfiguration)}
    if self.hostName != nil {try container.encode(self.hostName, forKey: .hostName)}
    if self.iPV4Addresses != nil {try container.encode(self.iPV4Addresses as! [String]?, forKey: .iPV4Addresses)}
    if self.iPV6Addresses != nil {try container.encode(self.iPV6Addresses as! [String]?, forKey: .iPV6Addresses)}
    if self.numberOfResources != nil {try container.encode(self.numberOfResources, forKey: .numberOfResources)}
    if self.rawErrors != nil {try container.encode(self.rawErrors, forKey: .rawErrors)}
  }
}

extension DataFactory {
  public static func createDscNodeReportProtocol() -> DscNodeReportProtocol {
    return DscNodeReportData()
  }
}
