// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DscReportErrorData : DscReportErrorProtocol {
    public var errorSource: String?
    public var resourceId: String?
    public var errorCode: String?
    public var errorMessage: String?
    public var locale: String?
    public var errorDetails: String?

        enum CodingKeys: String, CodingKey {case errorSource = "errorSource"
        case resourceId = "resourceId"
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case locale = "locale"
        case errorDetails = "errorDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.errorSource) {
        self.errorSource = try container.decode(String?.self, forKey: .errorSource)
    }
    if container.contains(.resourceId) {
        self.resourceId = try container.decode(String?.self, forKey: .resourceId)
    }
    if container.contains(.errorCode) {
        self.errorCode = try container.decode(String?.self, forKey: .errorCode)
    }
    if container.contains(.errorMessage) {
        self.errorMessage = try container.decode(String?.self, forKey: .errorMessage)
    }
    if container.contains(.locale) {
        self.locale = try container.decode(String?.self, forKey: .locale)
    }
    if container.contains(.errorDetails) {
        self.errorDetails = try container.decode(String?.self, forKey: .errorDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.errorSource != nil {try container.encode(self.errorSource, forKey: .errorSource)}
    if self.resourceId != nil {try container.encode(self.resourceId, forKey: .resourceId)}
    if self.errorCode != nil {try container.encode(self.errorCode, forKey: .errorCode)}
    if self.errorMessage != nil {try container.encode(self.errorMessage, forKey: .errorMessage)}
    if self.locale != nil {try container.encode(self.locale, forKey: .locale)}
    if self.errorDetails != nil {try container.encode(self.errorDetails, forKey: .errorDetails)}
  }
}

extension DataFactory {
  public static func createDscReportErrorProtocol() -> DscReportErrorProtocol {
    return DscReportErrorData()
  }
}
