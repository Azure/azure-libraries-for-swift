// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct HybridRunbookWorkerGroupData : HybridRunbookWorkerGroupProtocol {
    public var id: String?
    public var name: String?
    public var hybridRunbookWorkers: [HybridRunbookWorkerProtocol?]?
    public var credential: RunAsCredentialAssociationPropertyProtocol?

        enum CodingKeys: String, CodingKey {case id = "id"
        case name = "name"
        case hybridRunbookWorkers = "hybridRunbookWorkers"
        case credential = "credential"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.hybridRunbookWorkers) {
        self.hybridRunbookWorkers = try container.decode([HybridRunbookWorkerData?]?.self, forKey: .hybridRunbookWorkers)
    }
    if container.contains(.credential) {
        self.credential = try container.decode(RunAsCredentialAssociationPropertyData?.self, forKey: .credential)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.hybridRunbookWorkers != nil {try container.encode(self.hybridRunbookWorkers as! [HybridRunbookWorkerData?]?, forKey: .hybridRunbookWorkers)}
    if self.credential != nil {try container.encode(self.credential as! RunAsCredentialAssociationPropertyData?, forKey: .credential)}
  }
}

extension DataFactory {
  public static func createHybridRunbookWorkerGroupProtocol() -> HybridRunbookWorkerGroupProtocol {
    return HybridRunbookWorkerGroupData()
  }
}
