// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DscMetaConfigurationData : DscMetaConfigurationProtocol {
    public var configurationModeFrequencyMins: Int32?
    public var rebootNodeIfNeeded: Bool?
    public var configurationMode: String?
    public var actionAfterReboot: String?
    public var certificateId: String?
    public var refreshFrequencyMins: Int32?
    public var allowModuleOverwrite: Bool?

        enum CodingKeys: String, CodingKey {case configurationModeFrequencyMins = "configurationModeFrequencyMins"
        case rebootNodeIfNeeded = "rebootNodeIfNeeded"
        case configurationMode = "configurationMode"
        case actionAfterReboot = "actionAfterReboot"
        case certificateId = "certificateId"
        case refreshFrequencyMins = "refreshFrequencyMins"
        case allowModuleOverwrite = "allowModuleOverwrite"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.configurationModeFrequencyMins) {
        self.configurationModeFrequencyMins = try container.decode(Int32?.self, forKey: .configurationModeFrequencyMins)
    }
    if container.contains(.rebootNodeIfNeeded) {
        self.rebootNodeIfNeeded = try container.decode(Bool?.self, forKey: .rebootNodeIfNeeded)
    }
    if container.contains(.configurationMode) {
        self.configurationMode = try container.decode(String?.self, forKey: .configurationMode)
    }
    if container.contains(.actionAfterReboot) {
        self.actionAfterReboot = try container.decode(String?.self, forKey: .actionAfterReboot)
    }
    if container.contains(.certificateId) {
        self.certificateId = try container.decode(String?.self, forKey: .certificateId)
    }
    if container.contains(.refreshFrequencyMins) {
        self.refreshFrequencyMins = try container.decode(Int32?.self, forKey: .refreshFrequencyMins)
    }
    if container.contains(.allowModuleOverwrite) {
        self.allowModuleOverwrite = try container.decode(Bool?.self, forKey: .allowModuleOverwrite)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.configurationModeFrequencyMins != nil {try container.encode(self.configurationModeFrequencyMins, forKey: .configurationModeFrequencyMins)}
    if self.rebootNodeIfNeeded != nil {try container.encode(self.rebootNodeIfNeeded, forKey: .rebootNodeIfNeeded)}
    if self.configurationMode != nil {try container.encode(self.configurationMode, forKey: .configurationMode)}
    if self.actionAfterReboot != nil {try container.encode(self.actionAfterReboot, forKey: .actionAfterReboot)}
    if self.certificateId != nil {try container.encode(self.certificateId, forKey: .certificateId)}
    if self.refreshFrequencyMins != nil {try container.encode(self.refreshFrequencyMins, forKey: .refreshFrequencyMins)}
    if self.allowModuleOverwrite != nil {try container.encode(self.allowModuleOverwrite, forKey: .allowModuleOverwrite)}
  }
}

extension DataFactory {
  public static func createDscMetaConfigurationProtocol() -> DscMetaConfigurationProtocol {
    return DscMetaConfigurationData()
  }
}
