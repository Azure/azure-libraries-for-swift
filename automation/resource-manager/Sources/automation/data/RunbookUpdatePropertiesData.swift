// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RunbookUpdatePropertiesData : RunbookUpdatePropertiesProtocol {
    public var description: String?
    public var logVerbose: Bool?
    public var logProgress: Bool?
    public var logActivityTrace: Int32?

        enum CodingKeys: String, CodingKey {case description = "description"
        case logVerbose = "logVerbose"
        case logProgress = "logProgress"
        case logActivityTrace = "logActivityTrace"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.logVerbose) {
        self.logVerbose = try container.decode(Bool?.self, forKey: .logVerbose)
    }
    if container.contains(.logProgress) {
        self.logProgress = try container.decode(Bool?.self, forKey: .logProgress)
    }
    if container.contains(.logActivityTrace) {
        self.logActivityTrace = try container.decode(Int32?.self, forKey: .logActivityTrace)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.logVerbose != nil {try container.encode(self.logVerbose, forKey: .logVerbose)}
    if self.logProgress != nil {try container.encode(self.logProgress, forKey: .logProgress)}
    if self.logActivityTrace != nil {try container.encode(self.logActivityTrace, forKey: .logActivityTrace)}
  }
}

extension DataFactory {
  public static func createRunbookUpdatePropertiesProtocol() -> RunbookUpdatePropertiesProtocol {
    return RunbookUpdatePropertiesData()
  }
}
