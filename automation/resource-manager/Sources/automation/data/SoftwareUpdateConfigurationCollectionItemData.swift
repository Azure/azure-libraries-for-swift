// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SoftwareUpdateConfigurationCollectionItemData : SoftwareUpdateConfigurationCollectionItemProtocol {
    public var name: String?
    public var id: String?
    public var properties: SoftwareUpdateConfigurationCollectionItemPropertiesProtocol

        enum CodingKeys: String, CodingKey {case name = "name"
        case id = "id"
        case properties = "properties"
        }

  public init(properties: SoftwareUpdateConfigurationCollectionItemPropertiesProtocol)  {
    self.properties = properties
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    self.properties = try container.decode(SoftwareUpdateConfigurationCollectionItemPropertiesData.self, forKey: .properties)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    try container.encode(self.properties as! SoftwareUpdateConfigurationCollectionItemPropertiesData, forKey: .properties)
  }
}

extension DataFactory {
  public static func createSoftwareUpdateConfigurationCollectionItemProtocol(properties: SoftwareUpdateConfigurationCollectionItemPropertiesProtocol) -> SoftwareUpdateConfigurationCollectionItemProtocol {
    return SoftwareUpdateConfigurationCollectionItemData(properties: properties)
  }
}
