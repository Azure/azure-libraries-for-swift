// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DscCompilationJobCreatePropertiesData : DscCompilationJobCreatePropertiesProtocol {
    public var configuration: DscConfigurationAssociationPropertyProtocol
    public var parameters: [String:String]?
    public var newNodeConfigurationBuildVersionRequired: Bool?

        enum CodingKeys: String, CodingKey {case configuration = "configuration"
        case parameters = "parameters"
        case newNodeConfigurationBuildVersionRequired = "newNodeConfigurationBuildVersionRequired"
        }

  public init(configuration: DscConfigurationAssociationPropertyProtocol)  {
    self.configuration = configuration
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.configuration = try container.decode(DscConfigurationAssociationPropertyData.self, forKey: .configuration)
    if container.contains(.parameters) {
        self.parameters = try container.decode([String:String]?.self, forKey: .parameters)
    }
    if container.contains(.newNodeConfigurationBuildVersionRequired) {
        self.newNodeConfigurationBuildVersionRequired = try container.decode(Bool?.self, forKey: .newNodeConfigurationBuildVersionRequired)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.configuration as! DscConfigurationAssociationPropertyData, forKey: .configuration)
    if self.parameters != nil {try container.encode(self.parameters, forKey: .parameters)}
    if self.newNodeConfigurationBuildVersionRequired != nil {try container.encode(self.newNodeConfigurationBuildVersionRequired, forKey: .newNodeConfigurationBuildVersionRequired)}
  }
}

extension DataFactory {
  public static func createDscCompilationJobCreatePropertiesProtocol(configuration: DscConfigurationAssociationPropertyProtocol) -> DscCompilationJobCreatePropertiesProtocol {
    return DscCompilationJobCreatePropertiesData(configuration: configuration)
  }
}
