// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct WebhookUpdatePropertiesData : WebhookUpdatePropertiesProtocol {
    public var isEnabled: Bool?
    public var runOn: String?
    public var parameters: [String:String]?
    public var description: String?

        enum CodingKeys: String, CodingKey {case isEnabled = "isEnabled"
        case runOn = "runOn"
        case parameters = "parameters"
        case description = "description"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.isEnabled) {
        self.isEnabled = try container.decode(Bool?.self, forKey: .isEnabled)
    }
    if container.contains(.runOn) {
        self.runOn = try container.decode(String?.self, forKey: .runOn)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([String:String]?.self, forKey: .parameters)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.isEnabled != nil {try container.encode(self.isEnabled, forKey: .isEnabled)}
    if self.runOn != nil {try container.encode(self.runOn, forKey: .runOn)}
    if self.parameters != nil {try container.encode(self.parameters, forKey: .parameters)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
  }
}

extension DataFactory {
  public static func createWebhookUpdatePropertiesProtocol() -> WebhookUpdatePropertiesProtocol {
    return WebhookUpdatePropertiesData()
  }
}
