// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DscConfigurationCreateOrUpdatePropertiesData : DscConfigurationCreateOrUpdatePropertiesProtocol {
    public var logVerbose: Bool?
    public var logProgress: Bool?
    public var source: ContentSourceProtocol
    public var parameters: [String:DscConfigurationParameterProtocol?]?
    public var description: String?

        enum CodingKeys: String, CodingKey {case logVerbose = "logVerbose"
        case logProgress = "logProgress"
        case source = "source"
        case parameters = "parameters"
        case description = "description"
        }

  public init(source: ContentSourceProtocol)  {
    self.source = source
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.logVerbose) {
        self.logVerbose = try container.decode(Bool?.self, forKey: .logVerbose)
    }
    if container.contains(.logProgress) {
        self.logProgress = try container.decode(Bool?.self, forKey: .logProgress)
    }
    self.source = try container.decode(ContentSourceData.self, forKey: .source)
    if container.contains(.parameters) {
        self.parameters = try container.decode([String:DscConfigurationParameterData?]?.self, forKey: .parameters)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.logVerbose != nil {try container.encode(self.logVerbose, forKey: .logVerbose)}
    if self.logProgress != nil {try container.encode(self.logProgress, forKey: .logProgress)}
    try container.encode(self.source as! ContentSourceData, forKey: .source)
    if self.parameters != nil {try container.encode(self.parameters, forKey: .parameters)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
  }
}

extension DataFactory {
  public static func createDscConfigurationCreateOrUpdatePropertiesProtocol(source: ContentSourceProtocol) -> DscConfigurationCreateOrUpdatePropertiesProtocol {
    return DscConfigurationCreateOrUpdatePropertiesData(source: source)
  }
}
