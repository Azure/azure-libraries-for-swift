// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UpdateConfigurationData : UpdateConfigurationProtocol {
    public var operatingSystem: OperatingSystemTypeEnum
    public var windows: WindowsPropertiesProtocol?
    public var linux: LinuxPropertiesProtocol?
    public var duration: String?
    public var azureVirtualMachines: [String]?
    public var nonAzureComputerNames: [String]?

        enum CodingKeys: String, CodingKey {case operatingSystem = "operatingSystem"
        case windows = "windows"
        case linux = "linux"
        case duration = "duration"
        case azureVirtualMachines = "azureVirtualMachines"
        case nonAzureComputerNames = "nonAzureComputerNames"
        }

  public init(operatingSystem: OperatingSystemTypeEnum)  {
    self.operatingSystem = operatingSystem
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.operatingSystem = try container.decode(OperatingSystemTypeEnum.self, forKey: .operatingSystem)
    if container.contains(.windows) {
        self.windows = try container.decode(WindowsPropertiesData?.self, forKey: .windows)
    }
    if container.contains(.linux) {
        self.linux = try container.decode(LinuxPropertiesData?.self, forKey: .linux)
    }
    if container.contains(.duration) {
        self.duration = try container.decode(String?.self, forKey: .duration)
    }
    if container.contains(.azureVirtualMachines) {
        self.azureVirtualMachines = try container.decode([String]?.self, forKey: .azureVirtualMachines)
    }
    if container.contains(.nonAzureComputerNames) {
        self.nonAzureComputerNames = try container.decode([String]?.self, forKey: .nonAzureComputerNames)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.operatingSystem, forKey: .operatingSystem)
    if self.windows != nil {try container.encode(self.windows as! WindowsPropertiesData?, forKey: .windows)}
    if self.linux != nil {try container.encode(self.linux as! LinuxPropertiesData?, forKey: .linux)}
    if self.duration != nil {try container.encode(self.duration, forKey: .duration)}
    if self.azureVirtualMachines != nil {try container.encode(self.azureVirtualMachines as! [String]?, forKey: .azureVirtualMachines)}
    if self.nonAzureComputerNames != nil {try container.encode(self.nonAzureComputerNames as! [String]?, forKey: .nonAzureComputerNames)}
  }
}

extension DataFactory {
  public static func createUpdateConfigurationProtocol(operatingSystem: OperatingSystemTypeEnum) -> UpdateConfigurationProtocol {
    return UpdateConfigurationData(operatingSystem: operatingSystem)
  }
}
