// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ModulePropertiesData : ModulePropertiesProtocol {
    public var isGlobal: Bool?
    public var version: String?
    public var sizeInBytes: Int64?
    public var activityCount: Int32?
    public var provisioningState: ModuleProvisioningStateEnum?
    public var contentLink: ContentLinkProtocol?
    public var error: ModuleErrorInfoProtocol?
    public var creationTime: Date?
    public var lastModifiedTime: Date?
    public var description: String?

        enum CodingKeys: String, CodingKey {case isGlobal = "isGlobal"
        case version = "version"
        case sizeInBytes = "sizeInBytes"
        case activityCount = "activityCount"
        case provisioningState = "provisioningState"
        case contentLink = "contentLink"
        case error = "error"
        case creationTime = "creationTime"
        case lastModifiedTime = "lastModifiedTime"
        case description = "description"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.isGlobal) {
        self.isGlobal = try container.decode(Bool?.self, forKey: .isGlobal)
    }
    if container.contains(.version) {
        self.version = try container.decode(String?.self, forKey: .version)
    }
    if container.contains(.sizeInBytes) {
        self.sizeInBytes = try container.decode(Int64?.self, forKey: .sizeInBytes)
    }
    if container.contains(.activityCount) {
        self.activityCount = try container.decode(Int32?.self, forKey: .activityCount)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(ModuleProvisioningStateEnum?.self, forKey: .provisioningState)
    }
    if container.contains(.contentLink) {
        self.contentLink = try container.decode(ContentLinkData?.self, forKey: .contentLink)
    }
    if container.contains(.error) {
        self.error = try container.decode(ModuleErrorInfoData?.self, forKey: .error)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.lastModifiedTime) {
        self.lastModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTime)), format: .dateTime)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.isGlobal != nil {try container.encode(self.isGlobal, forKey: .isGlobal)}
    if self.version != nil {try container.encode(self.version, forKey: .version)}
    if self.sizeInBytes != nil {try container.encode(self.sizeInBytes, forKey: .sizeInBytes)}
    if self.activityCount != nil {try container.encode(self.activityCount, forKey: .activityCount)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.contentLink != nil {try container.encode(self.contentLink as! ContentLinkData?, forKey: .contentLink)}
    if self.error != nil {try container.encode(self.error as! ModuleErrorInfoData?, forKey: .error)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.lastModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTime!, format: .dateTime), forKey: .lastModifiedTime)
    }
    if self.description != nil {try container.encode(self.description, forKey: .description)}
  }
}

extension DataFactory {
  public static func createModulePropertiesProtocol() -> ModulePropertiesProtocol {
    return ModulePropertiesData()
  }
}
