// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FieldDefinitionData : FieldDefinitionProtocol {
    public var isEncrypted: Bool?
    public var isOptional: Bool?
    public var type: String

        enum CodingKeys: String, CodingKey {case isEncrypted = "isEncrypted"
        case isOptional = "isOptional"
        case type = "type"
        }

  public init(type: String)  {
    self.type = type
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.isEncrypted) {
        self.isEncrypted = try container.decode(Bool?.self, forKey: .isEncrypted)
    }
    if container.contains(.isOptional) {
        self.isOptional = try container.decode(Bool?.self, forKey: .isOptional)
    }
    self.type = try container.decode(String.self, forKey: .type)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.isEncrypted != nil {try container.encode(self.isEncrypted, forKey: .isEncrypted)}
    if self.isOptional != nil {try container.encode(self.isOptional, forKey: .isOptional)}
    try container.encode(self.type, forKey: .type)
  }
}

extension DataFactory {
  public static func createFieldDefinitionProtocol(type: String) -> FieldDefinitionProtocol {
    return FieldDefinitionData(type: type)
  }
}
