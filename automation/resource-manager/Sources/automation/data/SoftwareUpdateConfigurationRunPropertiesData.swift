// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SoftwareUpdateConfigurationRunPropertiesData : SoftwareUpdateConfigurationRunPropertiesProtocol {
    public var softwareUpdateConfiguration: UpdateConfigurationNavigationProtocol?
    public var status: String?
    public var configuredDuration: String?
    public var osType: String?
    public var startTime: Date?
    public var endTime: Date?
    public var computerCount: Int32?
    public var failedCount: Int32?
    public var creationTime: Date?
    public var createdBy: String?
    public var lastModifiedTime: Date?
    public var lastModifiedBy: String?

        enum CodingKeys: String, CodingKey {case softwareUpdateConfiguration = "softwareUpdateConfiguration"
        case status = "status"
        case configuredDuration = "configuredDuration"
        case osType = "osType"
        case startTime = "startTime"
        case endTime = "endTime"
        case computerCount = "computerCount"
        case failedCount = "failedCount"
        case creationTime = "creationTime"
        case createdBy = "createdBy"
        case lastModifiedTime = "lastModifiedTime"
        case lastModifiedBy = "lastModifiedBy"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.softwareUpdateConfiguration) {
        self.softwareUpdateConfiguration = try container.decode(UpdateConfigurationNavigationData?.self, forKey: .softwareUpdateConfiguration)
    }
    if container.contains(.status) {
        self.status = try container.decode(String?.self, forKey: .status)
    }
    if container.contains(.configuredDuration) {
        self.configuredDuration = try container.decode(String?.self, forKey: .configuredDuration)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.computerCount) {
        self.computerCount = try container.decode(Int32?.self, forKey: .computerCount)
    }
    if container.contains(.failedCount) {
        self.failedCount = try container.decode(Int32?.self, forKey: .failedCount)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.createdBy) {
        self.createdBy = try container.decode(String?.self, forKey: .createdBy)
    }
    if container.contains(.lastModifiedTime) {
        self.lastModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTime)), format: .dateTime)
    }
    if container.contains(.lastModifiedBy) {
        self.lastModifiedBy = try container.decode(String?.self, forKey: .lastModifiedBy)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.softwareUpdateConfiguration != nil {try container.encode(self.softwareUpdateConfiguration as! UpdateConfigurationNavigationData?, forKey: .softwareUpdateConfiguration)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.configuredDuration != nil {try container.encode(self.configuredDuration, forKey: .configuredDuration)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.computerCount != nil {try container.encode(self.computerCount, forKey: .computerCount)}
    if self.failedCount != nil {try container.encode(self.failedCount, forKey: .failedCount)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.createdBy != nil {try container.encode(self.createdBy, forKey: .createdBy)}
    if self.lastModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTime!, format: .dateTime), forKey: .lastModifiedTime)
    }
    if self.lastModifiedBy != nil {try container.encode(self.lastModifiedBy, forKey: .lastModifiedBy)}
  }
}

extension DataFactory {
  public static func createSoftwareUpdateConfigurationRunPropertiesProtocol() -> SoftwareUpdateConfigurationRunPropertiesProtocol {
    return SoftwareUpdateConfigurationRunPropertiesData()
  }
}
