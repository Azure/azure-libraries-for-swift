// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CertificateCreateOrUpdatePropertiesData : CertificateCreateOrUpdatePropertiesProtocol {
    public var base64Value: String
    public var description: String?
    public var thumbprint: String?
    public var isExportable: Bool?

        enum CodingKeys: String, CodingKey {case base64Value = "base64Value"
        case description = "description"
        case thumbprint = "thumbprint"
        case isExportable = "isExportable"
        }

  public init(base64Value: String)  {
    self.base64Value = base64Value
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.base64Value = try container.decode(String.self, forKey: .base64Value)
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.isExportable) {
        self.isExportable = try container.decode(Bool?.self, forKey: .isExportable)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.base64Value, forKey: .base64Value)
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.isExportable != nil {try container.encode(self.isExportable, forKey: .isExportable)}
  }
}

extension DataFactory {
  public static func createCertificateCreateOrUpdatePropertiesProtocol(base64Value: String) -> CertificateCreateOrUpdatePropertiesProtocol {
    return CertificateCreateOrUpdatePropertiesData(base64Value: base64Value)
  }
}
