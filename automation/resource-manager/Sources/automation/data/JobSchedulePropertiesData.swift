// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobSchedulePropertiesData : JobSchedulePropertiesProtocol {
    public var jobScheduleId: String?
    public var schedule: ScheduleAssociationPropertyProtocol?
    public var runbook: RunbookAssociationPropertyProtocol?
    public var runOn: String?
    public var parameters: [String:String]?

        enum CodingKeys: String, CodingKey {case jobScheduleId = "jobScheduleId"
        case schedule = "schedule"
        case runbook = "runbook"
        case runOn = "runOn"
        case parameters = "parameters"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.jobScheduleId) {
        self.jobScheduleId = try container.decode(String?.self, forKey: .jobScheduleId)
    }
    if container.contains(.schedule) {
        self.schedule = try container.decode(ScheduleAssociationPropertyData?.self, forKey: .schedule)
    }
    if container.contains(.runbook) {
        self.runbook = try container.decode(RunbookAssociationPropertyData?.self, forKey: .runbook)
    }
    if container.contains(.runOn) {
        self.runOn = try container.decode(String?.self, forKey: .runOn)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([String:String]?.self, forKey: .parameters)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.jobScheduleId != nil {try container.encode(self.jobScheduleId, forKey: .jobScheduleId)}
    if self.schedule != nil {try container.encode(self.schedule as! ScheduleAssociationPropertyData?, forKey: .schedule)}
    if self.runbook != nil {try container.encode(self.runbook as! RunbookAssociationPropertyData?, forKey: .runbook)}
    if self.runOn != nil {try container.encode(self.runOn, forKey: .runOn)}
    if self.parameters != nil {try container.encode(self.parameters, forKey: .parameters)}
  }
}

extension DataFactory {
  public static func createJobSchedulePropertiesProtocol() -> JobSchedulePropertiesProtocol {
    return JobSchedulePropertiesData()
  }
}
