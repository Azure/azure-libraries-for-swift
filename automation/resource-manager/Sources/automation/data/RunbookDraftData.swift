// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RunbookDraftData : RunbookDraftProtocol {
    public var inEdit: Bool?
    public var draftContentLink: ContentLinkProtocol?
    public var creationTime: Date?
    public var lastModifiedTime: Date?
    public var parameters: [String:RunbookParameterProtocol?]?
    public var outputTypes: [String]?

        enum CodingKeys: String, CodingKey {case inEdit = "inEdit"
        case draftContentLink = "draftContentLink"
        case creationTime = "creationTime"
        case lastModifiedTime = "lastModifiedTime"
        case parameters = "parameters"
        case outputTypes = "outputTypes"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.inEdit) {
        self.inEdit = try container.decode(Bool?.self, forKey: .inEdit)
    }
    if container.contains(.draftContentLink) {
        self.draftContentLink = try container.decode(ContentLinkData?.self, forKey: .draftContentLink)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.lastModifiedTime) {
        self.lastModifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTime)), format: .dateTime)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([String:RunbookParameterData?]?.self, forKey: .parameters)
    }
    if container.contains(.outputTypes) {
        self.outputTypes = try container.decode([String]?.self, forKey: .outputTypes)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.inEdit != nil {try container.encode(self.inEdit, forKey: .inEdit)}
    if self.draftContentLink != nil {try container.encode(self.draftContentLink as! ContentLinkData?, forKey: .draftContentLink)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.lastModifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTime!, format: .dateTime), forKey: .lastModifiedTime)
    }
    if self.parameters != nil {try container.encode(self.parameters, forKey: .parameters)}
    if self.outputTypes != nil {try container.encode(self.outputTypes as! [String]?, forKey: .outputTypes)}
  }
}

extension DataFactory {
  public static func createRunbookDraftProtocol() -> RunbookDraftProtocol {
    return RunbookDraftData()
  }
}
