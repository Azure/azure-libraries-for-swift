// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ProfilePropertiesData : ProfilePropertiesProtocol {
    public var profileStatus: ProfileStatusEnum?
    public var trafficRoutingMethod: TrafficRoutingMethodEnum?
    public var dnsConfig: DnsConfigProtocol?
    public var monitorConfig: MonitorConfigProtocol?
    public var endpoints: [EndpointProtocol?]?

        enum CodingKeys: String, CodingKey {case profileStatus = "profileStatus"
        case trafficRoutingMethod = "trafficRoutingMethod"
        case dnsConfig = "dnsConfig"
        case monitorConfig = "monitorConfig"
        case endpoints = "endpoints"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.profileStatus) {
        self.profileStatus = try container.decode(ProfileStatusEnum?.self, forKey: .profileStatus)
    }
    if container.contains(.trafficRoutingMethod) {
        self.trafficRoutingMethod = try container.decode(TrafficRoutingMethodEnum?.self, forKey: .trafficRoutingMethod)
    }
    if container.contains(.dnsConfig) {
        self.dnsConfig = try container.decode(DnsConfigData?.self, forKey: .dnsConfig)
    }
    if container.contains(.monitorConfig) {
        self.monitorConfig = try container.decode(MonitorConfigData?.self, forKey: .monitorConfig)
    }
    if container.contains(.endpoints) {
        self.endpoints = try container.decode([EndpointData?]?.self, forKey: .endpoints)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.profileStatus != nil {try container.encode(self.profileStatus, forKey: .profileStatus)}
    if self.trafficRoutingMethod != nil {try container.encode(self.trafficRoutingMethod, forKey: .trafficRoutingMethod)}
    if self.dnsConfig != nil {try container.encode(self.dnsConfig as! DnsConfigData?, forKey: .dnsConfig)}
    if self.monitorConfig != nil {try container.encode(self.monitorConfig as! MonitorConfigData?, forKey: .monitorConfig)}
    if self.endpoints != nil {try container.encode(self.endpoints as! [EndpointData?]?, forKey: .endpoints)}
  }
}

extension DataFactory {
  public static func createProfilePropertiesProtocol() -> ProfilePropertiesProtocol {
    return ProfilePropertiesData()
  }
}
