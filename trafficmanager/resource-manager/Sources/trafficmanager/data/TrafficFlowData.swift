// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TrafficFlowData : TrafficFlowProtocol {
    public var sourceIp: String?
    public var latitude: Double?
    public var longitude: Double?
    public var queryExperiences: [QueryExperienceProtocol?]?

        enum CodingKeys: String, CodingKey {case sourceIp = "sourceIp"
        case latitude = "latitude"
        case longitude = "longitude"
        case queryExperiences = "queryExperiences"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.sourceIp) {
        self.sourceIp = try container.decode(String?.self, forKey: .sourceIp)
    }
    if container.contains(.latitude) {
        self.latitude = try container.decode(Double?.self, forKey: .latitude)
    }
    if container.contains(.longitude) {
        self.longitude = try container.decode(Double?.self, forKey: .longitude)
    }
    if container.contains(.queryExperiences) {
        self.queryExperiences = try container.decode([QueryExperienceData?]?.self, forKey: .queryExperiences)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.sourceIp != nil {try container.encode(self.sourceIp, forKey: .sourceIp)}
    if self.latitude != nil {try container.encode(self.latitude, forKey: .latitude)}
    if self.longitude != nil {try container.encode(self.longitude, forKey: .longitude)}
    if self.queryExperiences != nil {try container.encode(self.queryExperiences as! [QueryExperienceData?]?, forKey: .queryExperiences)}
  }
}

extension DataFactory {
  public static func createTrafficFlowProtocol() -> TrafficFlowProtocol {
    return TrafficFlowData()
  }
}
