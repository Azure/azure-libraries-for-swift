// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// NetworkWatchers is the network Client
import Foundation
import azureSwiftRuntime
extension Commands {
public struct NetworkWatchers {
    public static func CheckConnectivity(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: ConnectivityParametersProtocol) -> NetworkWatchersCheckConnectivity {
        return CheckConnectivityCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func CreateOrUpdate(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: NetworkWatcherProtocol) -> NetworkWatchersCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func Delete(resourceGroupName: String, networkWatcherName: String, subscriptionId: String) -> NetworkWatchersDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, networkWatcherName: String, subscriptionId: String) -> NetworkWatchersGet {
        return GetCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId)
    }
    public static func GetAzureReachabilityReport(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: AzureReachabilityReportParametersProtocol) -> NetworkWatchersGetAzureReachabilityReport {
        return GetAzureReachabilityReportCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func GetFlowLogStatus(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: FlowLogStatusParametersProtocol) -> NetworkWatchersGetFlowLogStatus {
        return GetFlowLogStatusCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func GetNextHop(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: NextHopParametersProtocol) -> NetworkWatchersGetNextHop {
        return GetNextHopCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func GetTopology(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: TopologyParametersProtocol) -> NetworkWatchersGetTopology {
        return GetTopologyCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func GetTroubleshooting(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: TroubleshootingParametersProtocol) -> NetworkWatchersGetTroubleshooting {
        return GetTroubleshootingCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func GetTroubleshootingResult(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: QueryTroubleshootingParametersProtocol) -> NetworkWatchersGetTroubleshootingResult {
        return GetTroubleshootingResultCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func GetVMSecurityRules(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: SecurityGroupViewParametersProtocol) -> NetworkWatchersGetVMSecurityRules {
        return GetVMSecurityRulesCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func List(resourceGroupName: String, subscriptionId: String) -> NetworkWatchersList {
        return ListCommand(resourceGroupName: resourceGroupName, subscriptionId: subscriptionId)
    }
    public static func ListAll(subscriptionId: String) -> NetworkWatchersListAll {
        return ListAllCommand(subscriptionId: subscriptionId)
    }
    public static func ListAvailableProviders(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: AvailableProvidersListParametersProtocol) -> NetworkWatchersListAvailableProviders {
        return ListAvailableProvidersCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func SetFlowLogConfiguration(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: FlowLogInformationProtocol) -> NetworkWatchersSetFlowLogConfiguration {
        return SetFlowLogConfigurationCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func UpdateTags(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: TagsObjectProtocol) -> NetworkWatchersUpdateTags {
        return UpdateTagsCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func VerifyIPFlow(resourceGroupName: String, networkWatcherName: String, subscriptionId: String, parameters: VerificationIPFlowParametersProtocol) -> NetworkWatchersVerifyIPFlow {
        return VerifyIPFlowCommand(resourceGroupName: resourceGroupName, networkWatcherName: networkWatcherName, subscriptionId: subscriptionId, parameters: parameters)
    }
}
}
