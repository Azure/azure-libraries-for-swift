// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TroubleshootingRecommendedActionsData : TroubleshootingRecommendedActionsProtocol {
    public var actionId: String?
    public var actionText: String?
    public var actionUri: String?
    public var actionUriText: String?

        enum CodingKeys: String, CodingKey {case actionId = "actionId"
        case actionText = "actionText"
        case actionUri = "actionUri"
        case actionUriText = "actionUriText"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.actionId) {
        self.actionId = try container.decode(String?.self, forKey: .actionId)
    }
    if container.contains(.actionText) {
        self.actionText = try container.decode(String?.self, forKey: .actionText)
    }
    if container.contains(.actionUri) {
        self.actionUri = try container.decode(String?.self, forKey: .actionUri)
    }
    if container.contains(.actionUriText) {
        self.actionUriText = try container.decode(String?.self, forKey: .actionUriText)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.actionId != nil {try container.encode(self.actionId, forKey: .actionId)}
    if self.actionText != nil {try container.encode(self.actionText, forKey: .actionText)}
    if self.actionUri != nil {try container.encode(self.actionUri, forKey: .actionUri)}
    if self.actionUriText != nil {try container.encode(self.actionUriText, forKey: .actionUriText)}
  }
}

extension DataFactory {
  public static func createTroubleshootingRecommendedActionsProtocol() -> TroubleshootingRecommendedActionsProtocol {
    return TroubleshootingRecommendedActionsData()
  }
}
