// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewayBackendHttpSettingsPropertiesFormatData : ApplicationGatewayBackendHttpSettingsPropertiesFormatProtocol {
    public var port: Int32?
    public var _protocol: ApplicationGatewayProtocolEnum?
    public var cookieBasedAffinity: ApplicationGatewayCookieBasedAffinityEnum?
    public var requestTimeout: Int32?
    public var probe: SubResourceProtocol?
    public var authenticationCertificates: [SubResourceProtocol?]?
    public var connectionDraining: ApplicationGatewayConnectionDrainingProtocol?
    public var hostName: String?
    public var pickHostNameFromBackendAddress: Bool?
    public var affinityCookieName: String?
    public var probeEnabled: Bool?
    public var path: String?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case port = "port"
        case _protocol = "protocol"
        case cookieBasedAffinity = "cookieBasedAffinity"
        case requestTimeout = "requestTimeout"
        case probe = "probe"
        case authenticationCertificates = "authenticationCertificates"
        case connectionDraining = "connectionDraining"
        case hostName = "hostName"
        case pickHostNameFromBackendAddress = "pickHostNameFromBackendAddress"
        case affinityCookieName = "affinityCookieName"
        case probeEnabled = "probeEnabled"
        case path = "path"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.port) {
        self.port = try container.decode(Int32?.self, forKey: .port)
    }
    if container.contains(._protocol) {
        self._protocol = try container.decode(ApplicationGatewayProtocolEnum?.self, forKey: ._protocol)
    }
    if container.contains(.cookieBasedAffinity) {
        self.cookieBasedAffinity = try container.decode(ApplicationGatewayCookieBasedAffinityEnum?.self, forKey: .cookieBasedAffinity)
    }
    if container.contains(.requestTimeout) {
        self.requestTimeout = try container.decode(Int32?.self, forKey: .requestTimeout)
    }
    if container.contains(.probe) {
        self.probe = try container.decode(SubResourceData?.self, forKey: .probe)
    }
    if container.contains(.authenticationCertificates) {
        self.authenticationCertificates = try container.decode([SubResourceData?]?.self, forKey: .authenticationCertificates)
    }
    if container.contains(.connectionDraining) {
        self.connectionDraining = try container.decode(ApplicationGatewayConnectionDrainingData?.self, forKey: .connectionDraining)
    }
    if container.contains(.hostName) {
        self.hostName = try container.decode(String?.self, forKey: .hostName)
    }
    if container.contains(.pickHostNameFromBackendAddress) {
        self.pickHostNameFromBackendAddress = try container.decode(Bool?.self, forKey: .pickHostNameFromBackendAddress)
    }
    if container.contains(.affinityCookieName) {
        self.affinityCookieName = try container.decode(String?.self, forKey: .affinityCookieName)
    }
    if container.contains(.probeEnabled) {
        self.probeEnabled = try container.decode(Bool?.self, forKey: .probeEnabled)
    }
    if container.contains(.path) {
        self.path = try container.decode(String?.self, forKey: .path)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.port != nil {try container.encode(self.port, forKey: .port)}
    if self._protocol != nil {try container.encode(self._protocol, forKey: ._protocol)}
    if self.cookieBasedAffinity != nil {try container.encode(self.cookieBasedAffinity, forKey: .cookieBasedAffinity)}
    if self.requestTimeout != nil {try container.encode(self.requestTimeout, forKey: .requestTimeout)}
    if self.probe != nil {try container.encode(self.probe as! SubResourceData?, forKey: .probe)}
    if self.authenticationCertificates != nil {try container.encode(self.authenticationCertificates as! [SubResourceData?]?, forKey: .authenticationCertificates)}
    if self.connectionDraining != nil {try container.encode(self.connectionDraining as! ApplicationGatewayConnectionDrainingData?, forKey: .connectionDraining)}
    if self.hostName != nil {try container.encode(self.hostName, forKey: .hostName)}
    if self.pickHostNameFromBackendAddress != nil {try container.encode(self.pickHostNameFromBackendAddress, forKey: .pickHostNameFromBackendAddress)}
    if self.affinityCookieName != nil {try container.encode(self.affinityCookieName, forKey: .affinityCookieName)}
    if self.probeEnabled != nil {try container.encode(self.probeEnabled, forKey: .probeEnabled)}
    if self.path != nil {try container.encode(self.path, forKey: .path)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createApplicationGatewayBackendHttpSettingsPropertiesFormatProtocol() -> ApplicationGatewayBackendHttpSettingsPropertiesFormatProtocol {
    return ApplicationGatewayBackendHttpSettingsPropertiesFormatData()
  }
}
