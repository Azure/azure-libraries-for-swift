// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PublicIPAddressPropertiesFormatData : PublicIPAddressPropertiesFormatProtocol {
    public var publicIPAllocationMethod: IPAllocationMethodEnum?
    public var publicIPAddressVersion: IPVersionEnum?
    public var ipConfiguration: IPConfigurationProtocol?
    public var dnsSettings: PublicIPAddressDnsSettingsProtocol?
    public var ipTags: [IpTagProtocol?]?
    public var ipAddress: String?
    public var idleTimeoutInMinutes: Int32?
    public var resourceGuid: String?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case publicIPAllocationMethod = "publicIPAllocationMethod"
        case publicIPAddressVersion = "publicIPAddressVersion"
        case ipConfiguration = "ipConfiguration"
        case dnsSettings = "dnsSettings"
        case ipTags = "ipTags"
        case ipAddress = "ipAddress"
        case idleTimeoutInMinutes = "idleTimeoutInMinutes"
        case resourceGuid = "resourceGuid"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.publicIPAllocationMethod) {
        self.publicIPAllocationMethod = try container.decode(IPAllocationMethodEnum?.self, forKey: .publicIPAllocationMethod)
    }
    if container.contains(.publicIPAddressVersion) {
        self.publicIPAddressVersion = try container.decode(IPVersionEnum?.self, forKey: .publicIPAddressVersion)
    }
    if container.contains(.ipConfiguration) {
        self.ipConfiguration = try container.decode(IPConfigurationData?.self, forKey: .ipConfiguration)
    }
    if container.contains(.dnsSettings) {
        self.dnsSettings = try container.decode(PublicIPAddressDnsSettingsData?.self, forKey: .dnsSettings)
    }
    if container.contains(.ipTags) {
        self.ipTags = try container.decode([IpTagData?]?.self, forKey: .ipTags)
    }
    if container.contains(.ipAddress) {
        self.ipAddress = try container.decode(String?.self, forKey: .ipAddress)
    }
    if container.contains(.idleTimeoutInMinutes) {
        self.idleTimeoutInMinutes = try container.decode(Int32?.self, forKey: .idleTimeoutInMinutes)
    }
    if container.contains(.resourceGuid) {
        self.resourceGuid = try container.decode(String?.self, forKey: .resourceGuid)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.publicIPAllocationMethod != nil {try container.encode(self.publicIPAllocationMethod, forKey: .publicIPAllocationMethod)}
    if self.publicIPAddressVersion != nil {try container.encode(self.publicIPAddressVersion, forKey: .publicIPAddressVersion)}
    if self.ipConfiguration != nil {try container.encode(self.ipConfiguration as! IPConfigurationData?, forKey: .ipConfiguration)}
    if self.dnsSettings != nil {try container.encode(self.dnsSettings as! PublicIPAddressDnsSettingsData?, forKey: .dnsSettings)}
    if self.ipTags != nil {try container.encode(self.ipTags as! [IpTagData?]?, forKey: .ipTags)}
    if self.ipAddress != nil {try container.encode(self.ipAddress, forKey: .ipAddress)}
    if self.idleTimeoutInMinutes != nil {try container.encode(self.idleTimeoutInMinutes, forKey: .idleTimeoutInMinutes)}
    if self.resourceGuid != nil {try container.encode(self.resourceGuid, forKey: .resourceGuid)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createPublicIPAddressPropertiesFormatProtocol() -> PublicIPAddressPropertiesFormatProtocol {
    return PublicIPAddressPropertiesFormatData()
  }
}
