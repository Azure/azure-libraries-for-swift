// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewayAvailableSslOptionsPropertiesFormatData : ApplicationGatewayAvailableSslOptionsPropertiesFormatProtocol {
    public var predefinedPolicies: [SubResourceProtocol?]?
    public var defaultPolicy: ApplicationGatewaySslPolicyNameEnum?
    public var availableCipherSuites: [ApplicationGatewaySslCipherSuiteEnum?]?
    public var availableProtocols: [ApplicationGatewaySslProtocolEnum?]?

        enum CodingKeys: String, CodingKey {case predefinedPolicies = "predefinedPolicies"
        case defaultPolicy = "defaultPolicy"
        case availableCipherSuites = "availableCipherSuites"
        case availableProtocols = "availableProtocols"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.predefinedPolicies) {
        self.predefinedPolicies = try container.decode([SubResourceData?]?.self, forKey: .predefinedPolicies)
    }
    if container.contains(.defaultPolicy) {
        self.defaultPolicy = try container.decode(ApplicationGatewaySslPolicyNameEnum?.self, forKey: .defaultPolicy)
    }
    if container.contains(.availableCipherSuites) {
        self.availableCipherSuites = try container.decode([ApplicationGatewaySslCipherSuiteEnum?]?.self, forKey: .availableCipherSuites)
    }
    if container.contains(.availableProtocols) {
        self.availableProtocols = try container.decode([ApplicationGatewaySslProtocolEnum?]?.self, forKey: .availableProtocols)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.predefinedPolicies != nil {try container.encode(self.predefinedPolicies as! [SubResourceData?]?, forKey: .predefinedPolicies)}
    if self.defaultPolicy != nil {try container.encode(self.defaultPolicy, forKey: .defaultPolicy)}
    if self.availableCipherSuites != nil {try container.encode(self.availableCipherSuites as! [ApplicationGatewaySslCipherSuiteEnum?]?, forKey: .availableCipherSuites)}
    if self.availableProtocols != nil {try container.encode(self.availableProtocols as! [ApplicationGatewaySslProtocolEnum?]?, forKey: .availableProtocols)}
  }
}

extension DataFactory {
  public static func createApplicationGatewayAvailableSslOptionsPropertiesFormatProtocol() -> ApplicationGatewayAvailableSslOptionsPropertiesFormatProtocol {
    return ApplicationGatewayAvailableSslOptionsPropertiesFormatData()
  }
}
