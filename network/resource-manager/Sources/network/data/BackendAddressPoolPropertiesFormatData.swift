// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BackendAddressPoolPropertiesFormatData : BackendAddressPoolPropertiesFormatProtocol {
    public var backendIPConfigurations: [NetworkInterfaceIPConfigurationProtocol?]?
    public var loadBalancingRules: [SubResourceProtocol?]?
    public var outboundNatRule: SubResourceProtocol?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case backendIPConfigurations = "backendIPConfigurations"
        case loadBalancingRules = "loadBalancingRules"
        case outboundNatRule = "outboundNatRule"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.backendIPConfigurations) {
        self.backendIPConfigurations = try container.decode([NetworkInterfaceIPConfigurationData?]?.self, forKey: .backendIPConfigurations)
    }
    if container.contains(.loadBalancingRules) {
        self.loadBalancingRules = try container.decode([SubResourceData?]?.self, forKey: .loadBalancingRules)
    }
    if container.contains(.outboundNatRule) {
        self.outboundNatRule = try container.decode(SubResourceData?.self, forKey: .outboundNatRule)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.backendIPConfigurations != nil {try container.encode(self.backendIPConfigurations as! [NetworkInterfaceIPConfigurationData?]?, forKey: .backendIPConfigurations)}
    if self.loadBalancingRules != nil {try container.encode(self.loadBalancingRules as! [SubResourceData?]?, forKey: .loadBalancingRules)}
    if self.outboundNatRule != nil {try container.encode(self.outboundNatRule as! SubResourceData?, forKey: .outboundNatRule)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createBackendAddressPoolPropertiesFormatProtocol() -> BackendAddressPoolPropertiesFormatProtocol {
    return BackendAddressPoolPropertiesFormatData()
  }
}
