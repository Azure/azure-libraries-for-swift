// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RouteTablePropertiesFormatData : RouteTablePropertiesFormatProtocol {
    public var routes: [RouteProtocol?]?
    public var subnets: [SubnetProtocol?]?
    public var disableBgpRoutePropagation: Bool?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case routes = "routes"
        case subnets = "subnets"
        case disableBgpRoutePropagation = "disableBgpRoutePropagation"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.routes) {
        self.routes = try container.decode([RouteData?]?.self, forKey: .routes)
    }
    if container.contains(.subnets) {
        self.subnets = try container.decode([SubnetData?]?.self, forKey: .subnets)
    }
    if container.contains(.disableBgpRoutePropagation) {
        self.disableBgpRoutePropagation = try container.decode(Bool?.self, forKey: .disableBgpRoutePropagation)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.routes != nil {try container.encode(self.routes as! [RouteData?]?, forKey: .routes)}
    if self.subnets != nil {try container.encode(self.subnets as! [SubnetData?]?, forKey: .subnets)}
    if self.disableBgpRoutePropagation != nil {try container.encode(self.disableBgpRoutePropagation, forKey: .disableBgpRoutePropagation)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createRouteTablePropertiesFormatProtocol() -> RouteTablePropertiesFormatProtocol {
    return RouteTablePropertiesFormatData()
  }
}
