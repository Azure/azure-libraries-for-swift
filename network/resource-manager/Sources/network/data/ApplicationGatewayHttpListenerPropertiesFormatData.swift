// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewayHttpListenerPropertiesFormatData : ApplicationGatewayHttpListenerPropertiesFormatProtocol {
    public var frontendIPConfiguration: SubResourceProtocol?
    public var frontendPort: SubResourceProtocol?
    public var _protocol: ApplicationGatewayProtocolEnum?
    public var hostName: String?
    public var sslCertificate: SubResourceProtocol?
    public var requireServerNameIndication: Bool?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case frontendIPConfiguration = "frontendIPConfiguration"
        case frontendPort = "frontendPort"
        case _protocol = "protocol"
        case hostName = "hostName"
        case sslCertificate = "sslCertificate"
        case requireServerNameIndication = "requireServerNameIndication"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.frontendIPConfiguration) {
        self.frontendIPConfiguration = try container.decode(SubResourceData?.self, forKey: .frontendIPConfiguration)
    }
    if container.contains(.frontendPort) {
        self.frontendPort = try container.decode(SubResourceData?.self, forKey: .frontendPort)
    }
    if container.contains(._protocol) {
        self._protocol = try container.decode(ApplicationGatewayProtocolEnum?.self, forKey: ._protocol)
    }
    if container.contains(.hostName) {
        self.hostName = try container.decode(String?.self, forKey: .hostName)
    }
    if container.contains(.sslCertificate) {
        self.sslCertificate = try container.decode(SubResourceData?.self, forKey: .sslCertificate)
    }
    if container.contains(.requireServerNameIndication) {
        self.requireServerNameIndication = try container.decode(Bool?.self, forKey: .requireServerNameIndication)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.frontendIPConfiguration != nil {try container.encode(self.frontendIPConfiguration as! SubResourceData?, forKey: .frontendIPConfiguration)}
    if self.frontendPort != nil {try container.encode(self.frontendPort as! SubResourceData?, forKey: .frontendPort)}
    if self._protocol != nil {try container.encode(self._protocol, forKey: ._protocol)}
    if self.hostName != nil {try container.encode(self.hostName, forKey: .hostName)}
    if self.sslCertificate != nil {try container.encode(self.sslCertificate as! SubResourceData?, forKey: .sslCertificate)}
    if self.requireServerNameIndication != nil {try container.encode(self.requireServerNameIndication, forKey: .requireServerNameIndication)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createApplicationGatewayHttpListenerPropertiesFormatProtocol() -> ApplicationGatewayHttpListenerPropertiesFormatProtocol {
    return ApplicationGatewayHttpListenerPropertiesFormatData()
  }
}
