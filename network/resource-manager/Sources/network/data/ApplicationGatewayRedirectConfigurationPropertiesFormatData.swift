// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewayRedirectConfigurationPropertiesFormatData : ApplicationGatewayRedirectConfigurationPropertiesFormatProtocol {
    public var redirectType: ApplicationGatewayRedirectTypeEnum?
    public var targetListener: SubResourceProtocol?
    public var targetUrl: String?
    public var includePath: Bool?
    public var includeQueryString: Bool?
    public var requestRoutingRules: [SubResourceProtocol?]?
    public var urlPathMaps: [SubResourceProtocol?]?
    public var pathRules: [SubResourceProtocol?]?

        enum CodingKeys: String, CodingKey {case redirectType = "redirectType"
        case targetListener = "targetListener"
        case targetUrl = "targetUrl"
        case includePath = "includePath"
        case includeQueryString = "includeQueryString"
        case requestRoutingRules = "requestRoutingRules"
        case urlPathMaps = "urlPathMaps"
        case pathRules = "pathRules"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.redirectType) {
        self.redirectType = try container.decode(ApplicationGatewayRedirectTypeEnum?.self, forKey: .redirectType)
    }
    if container.contains(.targetListener) {
        self.targetListener = try container.decode(SubResourceData?.self, forKey: .targetListener)
    }
    if container.contains(.targetUrl) {
        self.targetUrl = try container.decode(String?.self, forKey: .targetUrl)
    }
    if container.contains(.includePath) {
        self.includePath = try container.decode(Bool?.self, forKey: .includePath)
    }
    if container.contains(.includeQueryString) {
        self.includeQueryString = try container.decode(Bool?.self, forKey: .includeQueryString)
    }
    if container.contains(.requestRoutingRules) {
        self.requestRoutingRules = try container.decode([SubResourceData?]?.self, forKey: .requestRoutingRules)
    }
    if container.contains(.urlPathMaps) {
        self.urlPathMaps = try container.decode([SubResourceData?]?.self, forKey: .urlPathMaps)
    }
    if container.contains(.pathRules) {
        self.pathRules = try container.decode([SubResourceData?]?.self, forKey: .pathRules)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.redirectType != nil {try container.encode(self.redirectType, forKey: .redirectType)}
    if self.targetListener != nil {try container.encode(self.targetListener as! SubResourceData?, forKey: .targetListener)}
    if self.targetUrl != nil {try container.encode(self.targetUrl, forKey: .targetUrl)}
    if self.includePath != nil {try container.encode(self.includePath, forKey: .includePath)}
    if self.includeQueryString != nil {try container.encode(self.includeQueryString, forKey: .includeQueryString)}
    if self.requestRoutingRules != nil {try container.encode(self.requestRoutingRules as! [SubResourceData?]?, forKey: .requestRoutingRules)}
    if self.urlPathMaps != nil {try container.encode(self.urlPathMaps as! [SubResourceData?]?, forKey: .urlPathMaps)}
    if self.pathRules != nil {try container.encode(self.pathRules as! [SubResourceData?]?, forKey: .pathRules)}
  }
}

extension DataFactory {
  public static func createApplicationGatewayRedirectConfigurationPropertiesFormatProtocol() -> ApplicationGatewayRedirectConfigurationPropertiesFormatProtocol {
    return ApplicationGatewayRedirectConfigurationPropertiesFormatData()
  }
}
