// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualNetworkPropertiesFormatData : VirtualNetworkPropertiesFormatProtocol {
    public var addressSpace: AddressSpaceProtocol?
    public var dhcpOptions: DhcpOptionsProtocol?
    public var subnets: [SubnetProtocol?]?
    public var virtualNetworkPeerings: [VirtualNetworkPeeringProtocol?]?
    public var resourceGuid: String?
    public var provisioningState: String?
    public var enableDdosProtection: Bool?
    public var enableVmProtection: Bool?

        enum CodingKeys: String, CodingKey {case addressSpace = "addressSpace"
        case dhcpOptions = "dhcpOptions"
        case subnets = "subnets"
        case virtualNetworkPeerings = "virtualNetworkPeerings"
        case resourceGuid = "resourceGuid"
        case provisioningState = "provisioningState"
        case enableDdosProtection = "enableDdosProtection"
        case enableVmProtection = "enableVmProtection"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.addressSpace) {
        self.addressSpace = try container.decode(AddressSpaceData?.self, forKey: .addressSpace)
    }
    if container.contains(.dhcpOptions) {
        self.dhcpOptions = try container.decode(DhcpOptionsData?.self, forKey: .dhcpOptions)
    }
    if container.contains(.subnets) {
        self.subnets = try container.decode([SubnetData?]?.self, forKey: .subnets)
    }
    if container.contains(.virtualNetworkPeerings) {
        self.virtualNetworkPeerings = try container.decode([VirtualNetworkPeeringData?]?.self, forKey: .virtualNetworkPeerings)
    }
    if container.contains(.resourceGuid) {
        self.resourceGuid = try container.decode(String?.self, forKey: .resourceGuid)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.enableDdosProtection) {
        self.enableDdosProtection = try container.decode(Bool?.self, forKey: .enableDdosProtection)
    }
    if container.contains(.enableVmProtection) {
        self.enableVmProtection = try container.decode(Bool?.self, forKey: .enableVmProtection)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.addressSpace != nil {try container.encode(self.addressSpace as! AddressSpaceData?, forKey: .addressSpace)}
    if self.dhcpOptions != nil {try container.encode(self.dhcpOptions as! DhcpOptionsData?, forKey: .dhcpOptions)}
    if self.subnets != nil {try container.encode(self.subnets as! [SubnetData?]?, forKey: .subnets)}
    if self.virtualNetworkPeerings != nil {try container.encode(self.virtualNetworkPeerings as! [VirtualNetworkPeeringData?]?, forKey: .virtualNetworkPeerings)}
    if self.resourceGuid != nil {try container.encode(self.resourceGuid, forKey: .resourceGuid)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.enableDdosProtection != nil {try container.encode(self.enableDdosProtection, forKey: .enableDdosProtection)}
    if self.enableVmProtection != nil {try container.encode(self.enableVmProtection, forKey: .enableVmProtection)}
  }
}

extension DataFactory {
  public static func createVirtualNetworkPropertiesFormatProtocol() -> VirtualNetworkPropertiesFormatProtocol {
    return VirtualNetworkPropertiesFormatData()
  }
}
