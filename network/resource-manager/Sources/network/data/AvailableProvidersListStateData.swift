// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AvailableProvidersListStateData : AvailableProvidersListStateProtocol {
    public var stateName: String?
    public var providers: [String]?
    public var cities: [AvailableProvidersListCityProtocol?]?

        enum CodingKeys: String, CodingKey {case stateName = "stateName"
        case providers = "providers"
        case cities = "cities"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.stateName) {
        self.stateName = try container.decode(String?.self, forKey: .stateName)
    }
    if container.contains(.providers) {
        self.providers = try container.decode([String]?.self, forKey: .providers)
    }
    if container.contains(.cities) {
        self.cities = try container.decode([AvailableProvidersListCityData?]?.self, forKey: .cities)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.stateName != nil {try container.encode(self.stateName, forKey: .stateName)}
    if self.providers != nil {try container.encode(self.providers as! [String]?, forKey: .providers)}
    if self.cities != nil {try container.encode(self.cities as! [AvailableProvidersListCityData?]?, forKey: .cities)}
  }
}

extension DataFactory {
  public static func createAvailableProvidersListStateProtocol() -> AvailableProvidersListStateProtocol {
    return AvailableProvidersListStateData()
  }
}
