// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VpnClientParametersData : VpnClientParametersProtocol {
    public var processorArchitecture: ProcessorArchitectureEnum?
    public var authenticationMethod: AuthenticationMethodEnum?
    public var radiusServerAuthCertificate: String?
    public var clientRootCertificates: [String]?

        enum CodingKeys: String, CodingKey {case processorArchitecture = "processorArchitecture"
        case authenticationMethod = "authenticationMethod"
        case radiusServerAuthCertificate = "radiusServerAuthCertificate"
        case clientRootCertificates = "clientRootCertificates"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.processorArchitecture) {
        self.processorArchitecture = try container.decode(ProcessorArchitectureEnum?.self, forKey: .processorArchitecture)
    }
    if container.contains(.authenticationMethod) {
        self.authenticationMethod = try container.decode(AuthenticationMethodEnum?.self, forKey: .authenticationMethod)
    }
    if container.contains(.radiusServerAuthCertificate) {
        self.radiusServerAuthCertificate = try container.decode(String?.self, forKey: .radiusServerAuthCertificate)
    }
    if container.contains(.clientRootCertificates) {
        self.clientRootCertificates = try container.decode([String]?.self, forKey: .clientRootCertificates)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.processorArchitecture != nil {try container.encode(self.processorArchitecture, forKey: .processorArchitecture)}
    if self.authenticationMethod != nil {try container.encode(self.authenticationMethod, forKey: .authenticationMethod)}
    if self.radiusServerAuthCertificate != nil {try container.encode(self.radiusServerAuthCertificate, forKey: .radiusServerAuthCertificate)}
    if self.clientRootCertificates != nil {try container.encode(self.clientRootCertificates as! [String]?, forKey: .clientRootCertificates)}
  }
}

extension DataFactory {
  public static func createVpnClientParametersProtocol() -> VpnClientParametersProtocol {
    return VpnClientParametersData()
  }
}
