// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AvailableProvidersListCountryData : AvailableProvidersListCountryProtocol {
    public var countryName: String?
    public var providers: [String]?
    public var states: [AvailableProvidersListStateProtocol?]?

        enum CodingKeys: String, CodingKey {case countryName = "countryName"
        case providers = "providers"
        case states = "states"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.countryName) {
        self.countryName = try container.decode(String?.self, forKey: .countryName)
    }
    if container.contains(.providers) {
        self.providers = try container.decode([String]?.self, forKey: .providers)
    }
    if container.contains(.states) {
        self.states = try container.decode([AvailableProvidersListStateData?]?.self, forKey: .states)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.countryName != nil {try container.encode(self.countryName, forKey: .countryName)}
    if self.providers != nil {try container.encode(self.providers as! [String]?, forKey: .providers)}
    if self.states != nil {try container.encode(self.states as! [AvailableProvidersListStateData?]?, forKey: .states)}
  }
}

extension DataFactory {
  public static func createAvailableProvidersListCountryProtocol() -> AvailableProvidersListCountryProtocol {
    return AvailableProvidersListCountryData()
  }
}
