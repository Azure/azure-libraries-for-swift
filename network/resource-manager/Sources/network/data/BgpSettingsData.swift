// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BgpSettingsData : BgpSettingsProtocol {
    public var asn: Int64?
    public var bgpPeeringAddress: String?
    public var peerWeight: Int32?

        enum CodingKeys: String, CodingKey {case asn = "asn"
        case bgpPeeringAddress = "bgpPeeringAddress"
        case peerWeight = "peerWeight"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.asn) {
        self.asn = try container.decode(Int64?.self, forKey: .asn)
    }
    if container.contains(.bgpPeeringAddress) {
        self.bgpPeeringAddress = try container.decode(String?.self, forKey: .bgpPeeringAddress)
    }
    if container.contains(.peerWeight) {
        self.peerWeight = try container.decode(Int32?.self, forKey: .peerWeight)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.asn != nil {try container.encode(self.asn, forKey: .asn)}
    if self.bgpPeeringAddress != nil {try container.encode(self.bgpPeeringAddress, forKey: .bgpPeeringAddress)}
    if self.peerWeight != nil {try container.encode(self.peerWeight, forKey: .peerWeight)}
  }
}

extension DataFactory {
  public static func createBgpSettingsProtocol() -> BgpSettingsProtocol {
    return BgpSettingsData()
  }
}
