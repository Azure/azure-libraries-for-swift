// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SubnetPropertiesFormatData : SubnetPropertiesFormatProtocol {
    public var addressPrefix: String?
    public var networkSecurityGroup: NetworkSecurityGroupProtocol?
    public var routeTable: RouteTableProtocol?
    public var serviceEndpoints: [ServiceEndpointPropertiesFormatProtocol?]?
    public var ipConfigurations: [IPConfigurationProtocol?]?
    public var resourceNavigationLinks: [ResourceNavigationLinkProtocol?]?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case addressPrefix = "addressPrefix"
        case networkSecurityGroup = "networkSecurityGroup"
        case routeTable = "routeTable"
        case serviceEndpoints = "serviceEndpoints"
        case ipConfigurations = "ipConfigurations"
        case resourceNavigationLinks = "resourceNavigationLinks"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.addressPrefix) {
        self.addressPrefix = try container.decode(String?.self, forKey: .addressPrefix)
    }
    if container.contains(.networkSecurityGroup) {
        self.networkSecurityGroup = try container.decode(NetworkSecurityGroupData?.self, forKey: .networkSecurityGroup)
    }
    if container.contains(.routeTable) {
        self.routeTable = try container.decode(RouteTableData?.self, forKey: .routeTable)
    }
    if container.contains(.serviceEndpoints) {
        self.serviceEndpoints = try container.decode([ServiceEndpointPropertiesFormatData?]?.self, forKey: .serviceEndpoints)
    }
    if container.contains(.ipConfigurations) {
        self.ipConfigurations = try container.decode([IPConfigurationData?]?.self, forKey: .ipConfigurations)
    }
    if container.contains(.resourceNavigationLinks) {
        self.resourceNavigationLinks = try container.decode([ResourceNavigationLinkData?]?.self, forKey: .resourceNavigationLinks)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.addressPrefix != nil {try container.encode(self.addressPrefix, forKey: .addressPrefix)}
    if self.networkSecurityGroup != nil {try container.encode(self.networkSecurityGroup as! NetworkSecurityGroupData?, forKey: .networkSecurityGroup)}
    if self.routeTable != nil {try container.encode(self.routeTable as! RouteTableData?, forKey: .routeTable)}
    if self.serviceEndpoints != nil {try container.encode(self.serviceEndpoints as! [ServiceEndpointPropertiesFormatData?]?, forKey: .serviceEndpoints)}
    if self.ipConfigurations != nil {try container.encode(self.ipConfigurations as! [IPConfigurationData?]?, forKey: .ipConfigurations)}
    if self.resourceNavigationLinks != nil {try container.encode(self.resourceNavigationLinks as! [ResourceNavigationLinkData?]?, forKey: .resourceNavigationLinks)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createSubnetPropertiesFormatProtocol() -> SubnetPropertiesFormatProtocol {
    return SubnetPropertiesFormatData()
  }
}
