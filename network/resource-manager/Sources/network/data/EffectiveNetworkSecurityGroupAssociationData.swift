// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EffectiveNetworkSecurityGroupAssociationData : EffectiveNetworkSecurityGroupAssociationProtocol {
    public var subnet: SubResourceProtocol?
    public var networkInterface: SubResourceProtocol?

        enum CodingKeys: String, CodingKey {case subnet = "subnet"
        case networkInterface = "networkInterface"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.subnet) {
        self.subnet = try container.decode(SubResourceData?.self, forKey: .subnet)
    }
    if container.contains(.networkInterface) {
        self.networkInterface = try container.decode(SubResourceData?.self, forKey: .networkInterface)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.subnet != nil {try container.encode(self.subnet as! SubResourceData?, forKey: .subnet)}
    if self.networkInterface != nil {try container.encode(self.networkInterface as! SubResourceData?, forKey: .networkInterface)}
  }
}

extension DataFactory {
  public static func createEffectiveNetworkSecurityGroupAssociationProtocol() -> EffectiveNetworkSecurityGroupAssociationProtocol {
    return EffectiveNetworkSecurityGroupAssociationData()
  }
}
