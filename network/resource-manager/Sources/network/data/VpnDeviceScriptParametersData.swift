// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VpnDeviceScriptParametersData : VpnDeviceScriptParametersProtocol {
    public var vendor: String?
    public var deviceFamily: String?
    public var firmwareVersion: String?

        enum CodingKeys: String, CodingKey {case vendor = "vendor"
        case deviceFamily = "deviceFamily"
        case firmwareVersion = "firmwareVersion"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.vendor) {
        self.vendor = try container.decode(String?.self, forKey: .vendor)
    }
    if container.contains(.deviceFamily) {
        self.deviceFamily = try container.decode(String?.self, forKey: .deviceFamily)
    }
    if container.contains(.firmwareVersion) {
        self.firmwareVersion = try container.decode(String?.self, forKey: .firmwareVersion)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.vendor != nil {try container.encode(self.vendor, forKey: .vendor)}
    if self.deviceFamily != nil {try container.encode(self.deviceFamily, forKey: .deviceFamily)}
    if self.firmwareVersion != nil {try container.encode(self.firmwareVersion, forKey: .firmwareVersion)}
  }
}

extension DataFactory {
  public static func createVpnDeviceScriptParametersProtocol() -> VpnDeviceScriptParametersProtocol {
    return VpnDeviceScriptParametersData()
  }
}
