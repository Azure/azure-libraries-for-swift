// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NextHopResultData : NextHopResultProtocol {
    public var nextHopType: NextHopTypeEnum?
    public var nextHopIpAddress: String?
    public var routeTableId: String?

        enum CodingKeys: String, CodingKey {case nextHopType = "nextHopType"
        case nextHopIpAddress = "nextHopIpAddress"
        case routeTableId = "routeTableId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.nextHopType) {
        self.nextHopType = try container.decode(NextHopTypeEnum?.self, forKey: .nextHopType)
    }
    if container.contains(.nextHopIpAddress) {
        self.nextHopIpAddress = try container.decode(String?.self, forKey: .nextHopIpAddress)
    }
    if container.contains(.routeTableId) {
        self.routeTableId = try container.decode(String?.self, forKey: .routeTableId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.nextHopType != nil {try container.encode(self.nextHopType, forKey: .nextHopType)}
    if self.nextHopIpAddress != nil {try container.encode(self.nextHopIpAddress, forKey: .nextHopIpAddress)}
    if self.routeTableId != nil {try container.encode(self.routeTableId, forKey: .routeTableId)}
  }
}

extension DataFactory {
  public static func createNextHopResultProtocol() -> NextHopResultProtocol {
    return NextHopResultData()
  }
}
