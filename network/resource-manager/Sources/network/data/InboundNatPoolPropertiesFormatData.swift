// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InboundNatPoolPropertiesFormatData : InboundNatPoolPropertiesFormatProtocol {
    public var frontendIPConfiguration: SubResourceProtocol?
    public var _protocol: TransportProtocolEnum
    public var frontendPortRangeStart: Int32
    public var frontendPortRangeEnd: Int32
    public var backendPort: Int32
    public var idleTimeoutInMinutes: Int32?
    public var enableFloatingIP: Bool?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case frontendIPConfiguration = "frontendIPConfiguration"
        case _protocol = "protocol"
        case frontendPortRangeStart = "frontendPortRangeStart"
        case frontendPortRangeEnd = "frontendPortRangeEnd"
        case backendPort = "backendPort"
        case idleTimeoutInMinutes = "idleTimeoutInMinutes"
        case enableFloatingIP = "enableFloatingIP"
        case provisioningState = "provisioningState"
        }

  public init(_protocol: TransportProtocolEnum, frontendPortRangeStart: Int32, frontendPortRangeEnd: Int32, backendPort: Int32)  {
    self._protocol = _protocol
    self.frontendPortRangeStart = frontendPortRangeStart
    self.frontendPortRangeEnd = frontendPortRangeEnd
    self.backendPort = backendPort
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.frontendIPConfiguration) {
        self.frontendIPConfiguration = try container.decode(SubResourceData?.self, forKey: .frontendIPConfiguration)
    }
    self._protocol = try container.decode(TransportProtocolEnum.self, forKey: ._protocol)
    self.frontendPortRangeStart = try container.decode(Int32.self, forKey: .frontendPortRangeStart)
    self.frontendPortRangeEnd = try container.decode(Int32.self, forKey: .frontendPortRangeEnd)
    self.backendPort = try container.decode(Int32.self, forKey: .backendPort)
    if container.contains(.idleTimeoutInMinutes) {
        self.idleTimeoutInMinutes = try container.decode(Int32?.self, forKey: .idleTimeoutInMinutes)
    }
    if container.contains(.enableFloatingIP) {
        self.enableFloatingIP = try container.decode(Bool?.self, forKey: .enableFloatingIP)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.frontendIPConfiguration != nil {try container.encode(self.frontendIPConfiguration as! SubResourceData?, forKey: .frontendIPConfiguration)}
    try container.encode(self._protocol, forKey: ._protocol)
    try container.encode(self.frontendPortRangeStart, forKey: .frontendPortRangeStart)
    try container.encode(self.frontendPortRangeEnd, forKey: .frontendPortRangeEnd)
    try container.encode(self.backendPort, forKey: .backendPort)
    if self.idleTimeoutInMinutes != nil {try container.encode(self.idleTimeoutInMinutes, forKey: .idleTimeoutInMinutes)}
    if self.enableFloatingIP != nil {try container.encode(self.enableFloatingIP, forKey: .enableFloatingIP)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createInboundNatPoolPropertiesFormatProtocol(_protocol: TransportProtocolEnum, frontendPortRangeStart: Int32, frontendPortRangeEnd: Int32, backendPort: Int32) -> InboundNatPoolPropertiesFormatProtocol {
    return InboundNatPoolPropertiesFormatData(_protocol: _protocol, frontendPortRangeStart: frontendPortRangeStart, frontendPortRangeEnd: frontendPortRangeEnd, backendPort: backendPort)
  }
}
