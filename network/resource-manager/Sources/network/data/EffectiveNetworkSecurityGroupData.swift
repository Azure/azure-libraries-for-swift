// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EffectiveNetworkSecurityGroupData : EffectiveNetworkSecurityGroupProtocol {
    public var networkSecurityGroup: SubResourceProtocol?
    public var association: EffectiveNetworkSecurityGroupAssociationProtocol?
    public var effectiveSecurityRules: [EffectiveNetworkSecurityRuleProtocol?]?
    public var tagMap: [String:[String]?]?

        enum CodingKeys: String, CodingKey {case networkSecurityGroup = "networkSecurityGroup"
        case association = "association"
        case effectiveSecurityRules = "effectiveSecurityRules"
        case tagMap = "tagMap"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.networkSecurityGroup) {
        self.networkSecurityGroup = try container.decode(SubResourceData?.self, forKey: .networkSecurityGroup)
    }
    if container.contains(.association) {
        self.association = try container.decode(EffectiveNetworkSecurityGroupAssociationData?.self, forKey: .association)
    }
    if container.contains(.effectiveSecurityRules) {
        self.effectiveSecurityRules = try container.decode([EffectiveNetworkSecurityRuleData?]?.self, forKey: .effectiveSecurityRules)
    }
    if container.contains(.tagMap) {
        self.tagMap = try container.decode([String:[String]?]?.self, forKey: .tagMap)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.networkSecurityGroup != nil {try container.encode(self.networkSecurityGroup as! SubResourceData?, forKey: .networkSecurityGroup)}
    if self.association != nil {try container.encode(self.association as! EffectiveNetworkSecurityGroupAssociationData?, forKey: .association)}
    if self.effectiveSecurityRules != nil {try container.encode(self.effectiveSecurityRules as! [EffectiveNetworkSecurityRuleData?]?, forKey: .effectiveSecurityRules)}
    if self.tagMap != nil {try container.encode(self.tagMap, forKey: .tagMap)}
  }
}

extension DataFactory {
  public static func createEffectiveNetworkSecurityGroupProtocol() -> EffectiveNetworkSecurityGroupProtocol {
    return EffectiveNetworkSecurityGroupData()
  }
}
