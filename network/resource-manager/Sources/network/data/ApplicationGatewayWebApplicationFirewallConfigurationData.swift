// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewayWebApplicationFirewallConfigurationData : ApplicationGatewayWebApplicationFirewallConfigurationProtocol {
    public var enabled: Bool
    public var firewallMode: ApplicationGatewayFirewallModeEnum
    public var ruleSetType: String
    public var ruleSetVersion: String
    public var disabledRuleGroups: [ApplicationGatewayFirewallDisabledRuleGroupProtocol?]?
    public var requestBodyCheck: Bool?
    public var maxRequestBodySize: Int32?

        enum CodingKeys: String, CodingKey {case enabled = "enabled"
        case firewallMode = "firewallMode"
        case ruleSetType = "ruleSetType"
        case ruleSetVersion = "ruleSetVersion"
        case disabledRuleGroups = "disabledRuleGroups"
        case requestBodyCheck = "requestBodyCheck"
        case maxRequestBodySize = "maxRequestBodySize"
        }

  public init(enabled: Bool, firewallMode: ApplicationGatewayFirewallModeEnum, ruleSetType: String, ruleSetVersion: String)  {
    self.enabled = enabled
    self.firewallMode = firewallMode
    self.ruleSetType = ruleSetType
    self.ruleSetVersion = ruleSetVersion
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.enabled = try container.decode(Bool.self, forKey: .enabled)
    self.firewallMode = try container.decode(ApplicationGatewayFirewallModeEnum.self, forKey: .firewallMode)
    self.ruleSetType = try container.decode(String.self, forKey: .ruleSetType)
    self.ruleSetVersion = try container.decode(String.self, forKey: .ruleSetVersion)
    if container.contains(.disabledRuleGroups) {
        self.disabledRuleGroups = try container.decode([ApplicationGatewayFirewallDisabledRuleGroupData?]?.self, forKey: .disabledRuleGroups)
    }
    if container.contains(.requestBodyCheck) {
        self.requestBodyCheck = try container.decode(Bool?.self, forKey: .requestBodyCheck)
    }
    if container.contains(.maxRequestBodySize) {
        self.maxRequestBodySize = try container.decode(Int32?.self, forKey: .maxRequestBodySize)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.enabled, forKey: .enabled)
    try container.encode(self.firewallMode, forKey: .firewallMode)
    try container.encode(self.ruleSetType, forKey: .ruleSetType)
    try container.encode(self.ruleSetVersion, forKey: .ruleSetVersion)
    if self.disabledRuleGroups != nil {try container.encode(self.disabledRuleGroups as! [ApplicationGatewayFirewallDisabledRuleGroupData?]?, forKey: .disabledRuleGroups)}
    if self.requestBodyCheck != nil {try container.encode(self.requestBodyCheck, forKey: .requestBodyCheck)}
    if self.maxRequestBodySize != nil {try container.encode(self.maxRequestBodySize, forKey: .maxRequestBodySize)}
  }
}

extension DataFactory {
  public static func createApplicationGatewayWebApplicationFirewallConfigurationProtocol(enabled: Bool, firewallMode: ApplicationGatewayFirewallModeEnum, ruleSetType: String, ruleSetVersion: String) -> ApplicationGatewayWebApplicationFirewallConfigurationProtocol {
    return ApplicationGatewayWebApplicationFirewallConfigurationData(enabled: enabled, firewallMode: firewallMode, ruleSetType: ruleSetType, ruleSetVersion: ruleSetVersion)
  }
}
