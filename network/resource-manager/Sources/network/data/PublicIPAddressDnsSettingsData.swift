// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PublicIPAddressDnsSettingsData : PublicIPAddressDnsSettingsProtocol {
    public var domainNameLabel: String?
    public var fqdn: String?
    public var reverseFqdn: String?

        enum CodingKeys: String, CodingKey {case domainNameLabel = "domainNameLabel"
        case fqdn = "fqdn"
        case reverseFqdn = "reverseFqdn"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.domainNameLabel) {
        self.domainNameLabel = try container.decode(String?.self, forKey: .domainNameLabel)
    }
    if container.contains(.fqdn) {
        self.fqdn = try container.decode(String?.self, forKey: .fqdn)
    }
    if container.contains(.reverseFqdn) {
        self.reverseFqdn = try container.decode(String?.self, forKey: .reverseFqdn)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.domainNameLabel != nil {try container.encode(self.domainNameLabel, forKey: .domainNameLabel)}
    if self.fqdn != nil {try container.encode(self.fqdn, forKey: .fqdn)}
    if self.reverseFqdn != nil {try container.encode(self.reverseFqdn, forKey: .reverseFqdn)}
  }
}

extension DataFactory {
  public static func createPublicIPAddressDnsSettingsProtocol() -> PublicIPAddressDnsSettingsProtocol {
    return PublicIPAddressDnsSettingsData()
  }
}
