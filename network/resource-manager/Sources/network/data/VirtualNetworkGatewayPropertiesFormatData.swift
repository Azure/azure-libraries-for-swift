// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualNetworkGatewayPropertiesFormatData : VirtualNetworkGatewayPropertiesFormatProtocol {
    public var ipConfigurations: [VirtualNetworkGatewayIPConfigurationProtocol?]?
    public var gatewayType: VirtualNetworkGatewayTypeEnum?
    public var vpnType: VpnTypeEnum?
    public var enableBgp: Bool?
    public var activeActive: Bool?
    public var gatewayDefaultSite: SubResourceProtocol?
    public var sku: VirtualNetworkGatewaySkuProtocol?
    public var vpnClientConfiguration: VpnClientConfigurationProtocol?
    public var bgpSettings: BgpSettingsProtocol?
    public var resourceGuid: String?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case ipConfigurations = "ipConfigurations"
        case gatewayType = "gatewayType"
        case vpnType = "vpnType"
        case enableBgp = "enableBgp"
        case activeActive = "activeActive"
        case gatewayDefaultSite = "gatewayDefaultSite"
        case sku = "sku"
        case vpnClientConfiguration = "vpnClientConfiguration"
        case bgpSettings = "bgpSettings"
        case resourceGuid = "resourceGuid"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.ipConfigurations) {
        self.ipConfigurations = try container.decode([VirtualNetworkGatewayIPConfigurationData?]?.self, forKey: .ipConfigurations)
    }
    if container.contains(.gatewayType) {
        self.gatewayType = try container.decode(VirtualNetworkGatewayTypeEnum?.self, forKey: .gatewayType)
    }
    if container.contains(.vpnType) {
        self.vpnType = try container.decode(VpnTypeEnum?.self, forKey: .vpnType)
    }
    if container.contains(.enableBgp) {
        self.enableBgp = try container.decode(Bool?.self, forKey: .enableBgp)
    }
    if container.contains(.activeActive) {
        self.activeActive = try container.decode(Bool?.self, forKey: .activeActive)
    }
    if container.contains(.gatewayDefaultSite) {
        self.gatewayDefaultSite = try container.decode(SubResourceData?.self, forKey: .gatewayDefaultSite)
    }
    if container.contains(.sku) {
        self.sku = try container.decode(VirtualNetworkGatewaySkuData?.self, forKey: .sku)
    }
    if container.contains(.vpnClientConfiguration) {
        self.vpnClientConfiguration = try container.decode(VpnClientConfigurationData?.self, forKey: .vpnClientConfiguration)
    }
    if container.contains(.bgpSettings) {
        self.bgpSettings = try container.decode(BgpSettingsData?.self, forKey: .bgpSettings)
    }
    if container.contains(.resourceGuid) {
        self.resourceGuid = try container.decode(String?.self, forKey: .resourceGuid)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.ipConfigurations != nil {try container.encode(self.ipConfigurations as! [VirtualNetworkGatewayIPConfigurationData?]?, forKey: .ipConfigurations)}
    if self.gatewayType != nil {try container.encode(self.gatewayType, forKey: .gatewayType)}
    if self.vpnType != nil {try container.encode(self.vpnType, forKey: .vpnType)}
    if self.enableBgp != nil {try container.encode(self.enableBgp, forKey: .enableBgp)}
    if self.activeActive != nil {try container.encode(self.activeActive, forKey: .activeActive)}
    if self.gatewayDefaultSite != nil {try container.encode(self.gatewayDefaultSite as! SubResourceData?, forKey: .gatewayDefaultSite)}
    if self.sku != nil {try container.encode(self.sku as! VirtualNetworkGatewaySkuData?, forKey: .sku)}
    if self.vpnClientConfiguration != nil {try container.encode(self.vpnClientConfiguration as! VpnClientConfigurationData?, forKey: .vpnClientConfiguration)}
    if self.bgpSettings != nil {try container.encode(self.bgpSettings as! BgpSettingsData?, forKey: .bgpSettings)}
    if self.resourceGuid != nil {try container.encode(self.resourceGuid, forKey: .resourceGuid)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createVirtualNetworkGatewayPropertiesFormatProtocol() -> VirtualNetworkGatewayPropertiesFormatProtocol {
    return VirtualNetworkGatewayPropertiesFormatData()
  }
}
