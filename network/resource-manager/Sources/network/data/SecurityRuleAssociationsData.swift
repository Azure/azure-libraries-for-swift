// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SecurityRuleAssociationsData : SecurityRuleAssociationsProtocol {
    public var networkInterfaceAssociation: NetworkInterfaceAssociationProtocol?
    public var subnetAssociation: SubnetAssociationProtocol?
    public var defaultSecurityRules: [SecurityRuleProtocol?]?
    public var effectiveSecurityRules: [EffectiveNetworkSecurityRuleProtocol?]?

        enum CodingKeys: String, CodingKey {case networkInterfaceAssociation = "networkInterfaceAssociation"
        case subnetAssociation = "subnetAssociation"
        case defaultSecurityRules = "defaultSecurityRules"
        case effectiveSecurityRules = "effectiveSecurityRules"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.networkInterfaceAssociation) {
        self.networkInterfaceAssociation = try container.decode(NetworkInterfaceAssociationData?.self, forKey: .networkInterfaceAssociation)
    }
    if container.contains(.subnetAssociation) {
        self.subnetAssociation = try container.decode(SubnetAssociationData?.self, forKey: .subnetAssociation)
    }
    if container.contains(.defaultSecurityRules) {
        self.defaultSecurityRules = try container.decode([SecurityRuleData?]?.self, forKey: .defaultSecurityRules)
    }
    if container.contains(.effectiveSecurityRules) {
        self.effectiveSecurityRules = try container.decode([EffectiveNetworkSecurityRuleData?]?.self, forKey: .effectiveSecurityRules)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.networkInterfaceAssociation != nil {try container.encode(self.networkInterfaceAssociation as! NetworkInterfaceAssociationData?, forKey: .networkInterfaceAssociation)}
    if self.subnetAssociation != nil {try container.encode(self.subnetAssociation as! SubnetAssociationData?, forKey: .subnetAssociation)}
    if self.defaultSecurityRules != nil {try container.encode(self.defaultSecurityRules as! [SecurityRuleData?]?, forKey: .defaultSecurityRules)}
    if self.effectiveSecurityRules != nil {try container.encode(self.effectiveSecurityRules as! [EffectiveNetworkSecurityRuleData?]?, forKey: .effectiveSecurityRules)}
  }
}

extension DataFactory {
  public static func createSecurityRuleAssociationsProtocol() -> SecurityRuleAssociationsProtocol {
    return SecurityRuleAssociationsData()
  }
}
