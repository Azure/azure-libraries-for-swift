// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PacketCaptureFilterData : PacketCaptureFilterProtocol {
    public var _protocol: PcProtocolEnum?
    public var localIPAddress: String?
    public var remoteIPAddress: String?
    public var localPort: String?
    public var remotePort: String?

        enum CodingKeys: String, CodingKey {case _protocol = "protocol"
        case localIPAddress = "localIPAddress"
        case remoteIPAddress = "remoteIPAddress"
        case localPort = "localPort"
        case remotePort = "remotePort"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(._protocol) {
        self._protocol = try container.decode(PcProtocolEnum?.self, forKey: ._protocol)
    }
    if container.contains(.localIPAddress) {
        self.localIPAddress = try container.decode(String?.self, forKey: .localIPAddress)
    }
    if container.contains(.remoteIPAddress) {
        self.remoteIPAddress = try container.decode(String?.self, forKey: .remoteIPAddress)
    }
    if container.contains(.localPort) {
        self.localPort = try container.decode(String?.self, forKey: .localPort)
    }
    if container.contains(.remotePort) {
        self.remotePort = try container.decode(String?.self, forKey: .remotePort)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self._protocol != nil {try container.encode(self._protocol, forKey: ._protocol)}
    if self.localIPAddress != nil {try container.encode(self.localIPAddress, forKey: .localIPAddress)}
    if self.remoteIPAddress != nil {try container.encode(self.remoteIPAddress, forKey: .remoteIPAddress)}
    if self.localPort != nil {try container.encode(self.localPort, forKey: .localPort)}
    if self.remotePort != nil {try container.encode(self.remotePort, forKey: .remotePort)}
  }
}

extension DataFactory {
  public static func createPacketCaptureFilterProtocol() -> PacketCaptureFilterProtocol {
    return PacketCaptureFilterData()
  }
}
