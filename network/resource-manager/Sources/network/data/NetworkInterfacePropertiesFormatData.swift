// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkInterfacePropertiesFormatData : NetworkInterfacePropertiesFormatProtocol {
    public var virtualMachine: SubResourceProtocol?
    public var networkSecurityGroup: NetworkSecurityGroupProtocol?
    public var ipConfigurations: [NetworkInterfaceIPConfigurationProtocol?]?
    public var dnsSettings: NetworkInterfaceDnsSettingsProtocol?
    public var macAddress: String?
    public var primary: Bool?
    public var enableAcceleratedNetworking: Bool?
    public var enableIPForwarding: Bool?
    public var resourceGuid: String?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case virtualMachine = "virtualMachine"
        case networkSecurityGroup = "networkSecurityGroup"
        case ipConfigurations = "ipConfigurations"
        case dnsSettings = "dnsSettings"
        case macAddress = "macAddress"
        case primary = "primary"
        case enableAcceleratedNetworking = "enableAcceleratedNetworking"
        case enableIPForwarding = "enableIPForwarding"
        case resourceGuid = "resourceGuid"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.virtualMachine) {
        self.virtualMachine = try container.decode(SubResourceData?.self, forKey: .virtualMachine)
    }
    if container.contains(.networkSecurityGroup) {
        self.networkSecurityGroup = try container.decode(NetworkSecurityGroupData?.self, forKey: .networkSecurityGroup)
    }
    if container.contains(.ipConfigurations) {
        self.ipConfigurations = try container.decode([NetworkInterfaceIPConfigurationData?]?.self, forKey: .ipConfigurations)
    }
    if container.contains(.dnsSettings) {
        self.dnsSettings = try container.decode(NetworkInterfaceDnsSettingsData?.self, forKey: .dnsSettings)
    }
    if container.contains(.macAddress) {
        self.macAddress = try container.decode(String?.self, forKey: .macAddress)
    }
    if container.contains(.primary) {
        self.primary = try container.decode(Bool?.self, forKey: .primary)
    }
    if container.contains(.enableAcceleratedNetworking) {
        self.enableAcceleratedNetworking = try container.decode(Bool?.self, forKey: .enableAcceleratedNetworking)
    }
    if container.contains(.enableIPForwarding) {
        self.enableIPForwarding = try container.decode(Bool?.self, forKey: .enableIPForwarding)
    }
    if container.contains(.resourceGuid) {
        self.resourceGuid = try container.decode(String?.self, forKey: .resourceGuid)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.virtualMachine != nil {try container.encode(self.virtualMachine as! SubResourceData?, forKey: .virtualMachine)}
    if self.networkSecurityGroup != nil {try container.encode(self.networkSecurityGroup as! NetworkSecurityGroupData?, forKey: .networkSecurityGroup)}
    if self.ipConfigurations != nil {try container.encode(self.ipConfigurations as! [NetworkInterfaceIPConfigurationData?]?, forKey: .ipConfigurations)}
    if self.dnsSettings != nil {try container.encode(self.dnsSettings as! NetworkInterfaceDnsSettingsData?, forKey: .dnsSettings)}
    if self.macAddress != nil {try container.encode(self.macAddress, forKey: .macAddress)}
    if self.primary != nil {try container.encode(self.primary, forKey: .primary)}
    if self.enableAcceleratedNetworking != nil {try container.encode(self.enableAcceleratedNetworking, forKey: .enableAcceleratedNetworking)}
    if self.enableIPForwarding != nil {try container.encode(self.enableIPForwarding, forKey: .enableIPForwarding)}
    if self.resourceGuid != nil {try container.encode(self.resourceGuid, forKey: .resourceGuid)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createNetworkInterfacePropertiesFormatProtocol() -> NetworkInterfacePropertiesFormatProtocol {
    return NetworkInterfacePropertiesFormatData()
  }
}
