// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PacketCaptureQueryStatusResultData : PacketCaptureQueryStatusResultProtocol {
    public var name: String?
    public var id: String?
    public var captureStartTime: Date?
    public var packetCaptureStatus: PcStatusEnum?
    public var stopReason: String?
    public var packetCaptureError: [PcErrorEnum?]?

        enum CodingKeys: String, CodingKey {case name = "name"
        case id = "id"
        case captureStartTime = "captureStartTime"
        case packetCaptureStatus = "packetCaptureStatus"
        case stopReason = "stopReason"
        case packetCaptureError = "packetCaptureError"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.captureStartTime) {
        self.captureStartTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .captureStartTime)), format: .dateTime)
    }
    if container.contains(.packetCaptureStatus) {
        self.packetCaptureStatus = try container.decode(PcStatusEnum?.self, forKey: .packetCaptureStatus)
    }
    if container.contains(.stopReason) {
        self.stopReason = try container.decode(String?.self, forKey: .stopReason)
    }
    if container.contains(.packetCaptureError) {
        self.packetCaptureError = try container.decode([PcErrorEnum?]?.self, forKey: .packetCaptureError)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.captureStartTime != nil {
        try container.encode(DateConverter.toString(date: self.captureStartTime!, format: .dateTime), forKey: .captureStartTime)
    }
    if self.packetCaptureStatus != nil {try container.encode(self.packetCaptureStatus, forKey: .packetCaptureStatus)}
    if self.stopReason != nil {try container.encode(self.stopReason, forKey: .stopReason)}
    if self.packetCaptureError != nil {try container.encode(self.packetCaptureError as! [PcErrorEnum?]?, forKey: .packetCaptureError)}
  }
}

extension DataFactory {
  public static func createPacketCaptureQueryStatusResultProtocol() -> PacketCaptureQueryStatusResultProtocol {
    return PacketCaptureQueryStatusResultData()
  }
}
