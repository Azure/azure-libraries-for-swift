// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ConnectivityInformationData : ConnectivityInformationProtocol {
    public var hops: [ConnectivityHopProtocol?]?
    public var connectionStatus: ConnectionStatusEnum?
    public var avgLatencyInMs: Int32?
    public var minLatencyInMs: Int32?
    public var maxLatencyInMs: Int32?
    public var probesSent: Int32?
    public var probesFailed: Int32?

        enum CodingKeys: String, CodingKey {case hops = "hops"
        case connectionStatus = "connectionStatus"
        case avgLatencyInMs = "avgLatencyInMs"
        case minLatencyInMs = "minLatencyInMs"
        case maxLatencyInMs = "maxLatencyInMs"
        case probesSent = "probesSent"
        case probesFailed = "probesFailed"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.hops) {
        self.hops = try container.decode([ConnectivityHopData?]?.self, forKey: .hops)
    }
    if container.contains(.connectionStatus) {
        self.connectionStatus = try container.decode(ConnectionStatusEnum?.self, forKey: .connectionStatus)
    }
    if container.contains(.avgLatencyInMs) {
        self.avgLatencyInMs = try container.decode(Int32?.self, forKey: .avgLatencyInMs)
    }
    if container.contains(.minLatencyInMs) {
        self.minLatencyInMs = try container.decode(Int32?.self, forKey: .minLatencyInMs)
    }
    if container.contains(.maxLatencyInMs) {
        self.maxLatencyInMs = try container.decode(Int32?.self, forKey: .maxLatencyInMs)
    }
    if container.contains(.probesSent) {
        self.probesSent = try container.decode(Int32?.self, forKey: .probesSent)
    }
    if container.contains(.probesFailed) {
        self.probesFailed = try container.decode(Int32?.self, forKey: .probesFailed)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.hops != nil {try container.encode(self.hops as! [ConnectivityHopData?]?, forKey: .hops)}
    if self.connectionStatus != nil {try container.encode(self.connectionStatus, forKey: .connectionStatus)}
    if self.avgLatencyInMs != nil {try container.encode(self.avgLatencyInMs, forKey: .avgLatencyInMs)}
    if self.minLatencyInMs != nil {try container.encode(self.minLatencyInMs, forKey: .minLatencyInMs)}
    if self.maxLatencyInMs != nil {try container.encode(self.maxLatencyInMs, forKey: .maxLatencyInMs)}
    if self.probesSent != nil {try container.encode(self.probesSent, forKey: .probesSent)}
    if self.probesFailed != nil {try container.encode(self.probesFailed, forKey: .probesFailed)}
  }
}

extension DataFactory {
  public static func createConnectivityInformationProtocol() -> ConnectivityInformationProtocol {
    return ConnectivityInformationData()
  }
}
