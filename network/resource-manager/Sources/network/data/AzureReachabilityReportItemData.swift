// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureReachabilityReportItemData : AzureReachabilityReportItemProtocol {
    public var provider: String?
    public var azureLocation: String?
    public var latencies: [AzureReachabilityReportLatencyInfoProtocol?]?

        enum CodingKeys: String, CodingKey {case provider = "provider"
        case azureLocation = "azureLocation"
        case latencies = "latencies"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.provider) {
        self.provider = try container.decode(String?.self, forKey: .provider)
    }
    if container.contains(.azureLocation) {
        self.azureLocation = try container.decode(String?.self, forKey: .azureLocation)
    }
    if container.contains(.latencies) {
        self.latencies = try container.decode([AzureReachabilityReportLatencyInfoData?]?.self, forKey: .latencies)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.provider != nil {try container.encode(self.provider, forKey: .provider)}
    if self.azureLocation != nil {try container.encode(self.azureLocation, forKey: .azureLocation)}
    if self.latencies != nil {try container.encode(self.latencies as! [AzureReachabilityReportLatencyInfoData?]?, forKey: .latencies)}
  }
}

extension DataFactory {
  public static func createAzureReachabilityReportItemProtocol() -> AzureReachabilityReportItemProtocol {
    return AzureReachabilityReportItemData()
  }
}
