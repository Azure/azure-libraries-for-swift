// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewayBackendHealthPoolData : ApplicationGatewayBackendHealthPoolProtocol {
    public var backendAddressPool: ApplicationGatewayBackendAddressPoolProtocol?
    public var backendHttpSettingsCollection: [ApplicationGatewayBackendHealthHttpSettingsProtocol?]?

        enum CodingKeys: String, CodingKey {case backendAddressPool = "backendAddressPool"
        case backendHttpSettingsCollection = "backendHttpSettingsCollection"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.backendAddressPool) {
        self.backendAddressPool = try container.decode(ApplicationGatewayBackendAddressPoolData?.self, forKey: .backendAddressPool)
    }
    if container.contains(.backendHttpSettingsCollection) {
        self.backendHttpSettingsCollection = try container.decode([ApplicationGatewayBackendHealthHttpSettingsData?]?.self, forKey: .backendHttpSettingsCollection)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.backendAddressPool != nil {try container.encode(self.backendAddressPool as! ApplicationGatewayBackendAddressPoolData?, forKey: .backendAddressPool)}
    if self.backendHttpSettingsCollection != nil {try container.encode(self.backendHttpSettingsCollection as! [ApplicationGatewayBackendHealthHttpSettingsData?]?, forKey: .backendHttpSettingsCollection)}
  }
}

extension DataFactory {
  public static func createApplicationGatewayBackendHealthPoolProtocol() -> ApplicationGatewayBackendHealthPoolProtocol {
    return ApplicationGatewayBackendHealthPoolData()
  }
}
