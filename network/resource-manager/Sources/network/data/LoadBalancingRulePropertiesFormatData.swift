// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LoadBalancingRulePropertiesFormatData : LoadBalancingRulePropertiesFormatProtocol {
    public var frontendIPConfiguration: SubResourceProtocol?
    public var backendAddressPool: SubResourceProtocol?
    public var probe: SubResourceProtocol?
    public var _protocol: TransportProtocolEnum
    public var loadDistribution: LoadDistributionEnum?
    public var frontendPort: Int32
    public var backendPort: Int32?
    public var idleTimeoutInMinutes: Int32?
    public var enableFloatingIP: Bool?
    public var disableOutboundSnat: Bool?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case frontendIPConfiguration = "frontendIPConfiguration"
        case backendAddressPool = "backendAddressPool"
        case probe = "probe"
        case _protocol = "protocol"
        case loadDistribution = "loadDistribution"
        case frontendPort = "frontendPort"
        case backendPort = "backendPort"
        case idleTimeoutInMinutes = "idleTimeoutInMinutes"
        case enableFloatingIP = "enableFloatingIP"
        case disableOutboundSnat = "disableOutboundSnat"
        case provisioningState = "provisioningState"
        }

  public init(_protocol: TransportProtocolEnum, frontendPort: Int32)  {
    self._protocol = _protocol
    self.frontendPort = frontendPort
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.frontendIPConfiguration) {
        self.frontendIPConfiguration = try container.decode(SubResourceData?.self, forKey: .frontendIPConfiguration)
    }
    if container.contains(.backendAddressPool) {
        self.backendAddressPool = try container.decode(SubResourceData?.self, forKey: .backendAddressPool)
    }
    if container.contains(.probe) {
        self.probe = try container.decode(SubResourceData?.self, forKey: .probe)
    }
    self._protocol = try container.decode(TransportProtocolEnum.self, forKey: ._protocol)
    if container.contains(.loadDistribution) {
        self.loadDistribution = try container.decode(LoadDistributionEnum?.self, forKey: .loadDistribution)
    }
    self.frontendPort = try container.decode(Int32.self, forKey: .frontendPort)
    if container.contains(.backendPort) {
        self.backendPort = try container.decode(Int32?.self, forKey: .backendPort)
    }
    if container.contains(.idleTimeoutInMinutes) {
        self.idleTimeoutInMinutes = try container.decode(Int32?.self, forKey: .idleTimeoutInMinutes)
    }
    if container.contains(.enableFloatingIP) {
        self.enableFloatingIP = try container.decode(Bool?.self, forKey: .enableFloatingIP)
    }
    if container.contains(.disableOutboundSnat) {
        self.disableOutboundSnat = try container.decode(Bool?.self, forKey: .disableOutboundSnat)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.frontendIPConfiguration != nil {try container.encode(self.frontendIPConfiguration as! SubResourceData?, forKey: .frontendIPConfiguration)}
    if self.backendAddressPool != nil {try container.encode(self.backendAddressPool as! SubResourceData?, forKey: .backendAddressPool)}
    if self.probe != nil {try container.encode(self.probe as! SubResourceData?, forKey: .probe)}
    try container.encode(self._protocol, forKey: ._protocol)
    if self.loadDistribution != nil {try container.encode(self.loadDistribution, forKey: .loadDistribution)}
    try container.encode(self.frontendPort, forKey: .frontendPort)
    if self.backendPort != nil {try container.encode(self.backendPort, forKey: .backendPort)}
    if self.idleTimeoutInMinutes != nil {try container.encode(self.idleTimeoutInMinutes, forKey: .idleTimeoutInMinutes)}
    if self.enableFloatingIP != nil {try container.encode(self.enableFloatingIP, forKey: .enableFloatingIP)}
    if self.disableOutboundSnat != nil {try container.encode(self.disableOutboundSnat, forKey: .disableOutboundSnat)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createLoadBalancingRulePropertiesFormatProtocol(_protocol: TransportProtocolEnum, frontendPort: Int32) -> LoadBalancingRulePropertiesFormatProtocol {
    return LoadBalancingRulePropertiesFormatData(_protocol: _protocol, frontendPort: frontendPort)
  }
}
