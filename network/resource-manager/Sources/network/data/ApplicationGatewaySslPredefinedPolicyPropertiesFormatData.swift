// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewaySslPredefinedPolicyPropertiesFormatData : ApplicationGatewaySslPredefinedPolicyPropertiesFormatProtocol {
    public var cipherSuites: [ApplicationGatewaySslCipherSuiteEnum?]?
    public var minProtocolVersion: ApplicationGatewaySslProtocolEnum?

        enum CodingKeys: String, CodingKey {case cipherSuites = "cipherSuites"
        case minProtocolVersion = "minProtocolVersion"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.cipherSuites) {
        self.cipherSuites = try container.decode([ApplicationGatewaySslCipherSuiteEnum?]?.self, forKey: .cipherSuites)
    }
    if container.contains(.minProtocolVersion) {
        self.minProtocolVersion = try container.decode(ApplicationGatewaySslProtocolEnum?.self, forKey: .minProtocolVersion)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.cipherSuites != nil {try container.encode(self.cipherSuites as! [ApplicationGatewaySslCipherSuiteEnum?]?, forKey: .cipherSuites)}
    if self.minProtocolVersion != nil {try container.encode(self.minProtocolVersion, forKey: .minProtocolVersion)}
  }
}

extension DataFactory {
  public static func createApplicationGatewaySslPredefinedPolicyPropertiesFormatProtocol() -> ApplicationGatewaySslPredefinedPolicyPropertiesFormatProtocol {
    return ApplicationGatewaySslPredefinedPolicyPropertiesFormatData()
  }
}
