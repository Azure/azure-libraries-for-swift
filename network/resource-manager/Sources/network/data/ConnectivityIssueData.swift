// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ConnectivityIssueData : ConnectivityIssueProtocol {
    public var origin: OriginEnum?
    public var severity: SeverityEnum?
    public var type: IssueTypeEnum?
    public var context: [[String:String]?]?

        enum CodingKeys: String, CodingKey {case origin = "origin"
        case severity = "severity"
        case type = "type"
        case context = "context"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.origin) {
        self.origin = try container.decode(OriginEnum?.self, forKey: .origin)
    }
    if container.contains(.severity) {
        self.severity = try container.decode(SeverityEnum?.self, forKey: .severity)
    }
    if container.contains(.type) {
        self.type = try container.decode(IssueTypeEnum?.self, forKey: .type)
    }
    if container.contains(.context) {
        self.context = try container.decode([[String:String]?]?.self, forKey: .context)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.origin != nil {try container.encode(self.origin, forKey: .origin)}
    if self.severity != nil {try container.encode(self.severity, forKey: .severity)}
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.context != nil {try container.encode(self.context as! [[String:String]?]?, forKey: .context)}
  }
}

extension DataFactory {
  public static func createConnectivityIssueProtocol() -> ConnectivityIssueProtocol {
    return ConnectivityIssueData()
  }
}
