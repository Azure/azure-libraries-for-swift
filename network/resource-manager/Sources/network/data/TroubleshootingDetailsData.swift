// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TroubleshootingDetailsData : TroubleshootingDetailsProtocol {
    public var id: String?
    public var reasonType: String?
    public var summary: String?
    public var detail: String?
    public var recommendedActions: [TroubleshootingRecommendedActionsProtocol?]?

        enum CodingKeys: String, CodingKey {case id = "id"
        case reasonType = "reasonType"
        case summary = "summary"
        case detail = "detail"
        case recommendedActions = "recommendedActions"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.reasonType) {
        self.reasonType = try container.decode(String?.self, forKey: .reasonType)
    }
    if container.contains(.summary) {
        self.summary = try container.decode(String?.self, forKey: .summary)
    }
    if container.contains(.detail) {
        self.detail = try container.decode(String?.self, forKey: .detail)
    }
    if container.contains(.recommendedActions) {
        self.recommendedActions = try container.decode([TroubleshootingRecommendedActionsData?]?.self, forKey: .recommendedActions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.reasonType != nil {try container.encode(self.reasonType, forKey: .reasonType)}
    if self.summary != nil {try container.encode(self.summary, forKey: .summary)}
    if self.detail != nil {try container.encode(self.detail, forKey: .detail)}
    if self.recommendedActions != nil {try container.encode(self.recommendedActions as! [TroubleshootingRecommendedActionsData?]?, forKey: .recommendedActions)}
  }
}

extension DataFactory {
  public static func createTroubleshootingDetailsProtocol() -> TroubleshootingDetailsProtocol {
    return TroubleshootingDetailsData()
  }
}
