// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LocalNetworkGatewayPropertiesFormatData : LocalNetworkGatewayPropertiesFormatProtocol {
    public var localNetworkAddressSpace: AddressSpaceProtocol?
    public var gatewayIpAddress: String?
    public var bgpSettings: BgpSettingsProtocol?
    public var resourceGuid: String?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case localNetworkAddressSpace = "localNetworkAddressSpace"
        case gatewayIpAddress = "gatewayIpAddress"
        case bgpSettings = "bgpSettings"
        case resourceGuid = "resourceGuid"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.localNetworkAddressSpace) {
        self.localNetworkAddressSpace = try container.decode(AddressSpaceData?.self, forKey: .localNetworkAddressSpace)
    }
    if container.contains(.gatewayIpAddress) {
        self.gatewayIpAddress = try container.decode(String?.self, forKey: .gatewayIpAddress)
    }
    if container.contains(.bgpSettings) {
        self.bgpSettings = try container.decode(BgpSettingsData?.self, forKey: .bgpSettings)
    }
    if container.contains(.resourceGuid) {
        self.resourceGuid = try container.decode(String?.self, forKey: .resourceGuid)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.localNetworkAddressSpace != nil {try container.encode(self.localNetworkAddressSpace as! AddressSpaceData?, forKey: .localNetworkAddressSpace)}
    if self.gatewayIpAddress != nil {try container.encode(self.gatewayIpAddress, forKey: .gatewayIpAddress)}
    if self.bgpSettings != nil {try container.encode(self.bgpSettings as! BgpSettingsData?, forKey: .bgpSettings)}
    if self.resourceGuid != nil {try container.encode(self.resourceGuid, forKey: .resourceGuid)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createLocalNetworkGatewayPropertiesFormatProtocol() -> LocalNetworkGatewayPropertiesFormatProtocol {
    return LocalNetworkGatewayPropertiesFormatData()
  }
}
