// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureReachabilityReportData : AzureReachabilityReportProtocol {
    public var aggregationLevel: String
    public var providerLocation: AzureReachabilityReportLocationProtocol
    public var reachabilityReport: [AzureReachabilityReportItemProtocol]

        enum CodingKeys: String, CodingKey {case aggregationLevel = "aggregationLevel"
        case providerLocation = "providerLocation"
        case reachabilityReport = "reachabilityReport"
        }

  public init(aggregationLevel: String, providerLocation: AzureReachabilityReportLocationProtocol, reachabilityReport: [AzureReachabilityReportItemProtocol])  {
    self.aggregationLevel = aggregationLevel
    self.providerLocation = providerLocation
    self.reachabilityReport = reachabilityReport
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.aggregationLevel = try container.decode(String.self, forKey: .aggregationLevel)
    self.providerLocation = try container.decode(AzureReachabilityReportLocationData.self, forKey: .providerLocation)
    self.reachabilityReport = try container.decode([AzureReachabilityReportItemData].self, forKey: .reachabilityReport)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.aggregationLevel, forKey: .aggregationLevel)
    try container.encode(self.providerLocation as! AzureReachabilityReportLocationData, forKey: .providerLocation)
    try container.encode(self.reachabilityReport as! [AzureReachabilityReportItemData], forKey: .reachabilityReport)
  }
}

extension DataFactory {
  public static func createAzureReachabilityReportProtocol(aggregationLevel: String, providerLocation: AzureReachabilityReportLocationProtocol, reachabilityReport: [AzureReachabilityReportItemProtocol]) -> AzureReachabilityReportProtocol {
    return AzureReachabilityReportData(aggregationLevel: aggregationLevel, providerLocation: providerLocation, reachabilityReport: reachabilityReport)
  }
}
