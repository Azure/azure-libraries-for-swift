// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BgpPeerStatusData : BgpPeerStatusProtocol {
    public var localAddress: String?
    public var neighbor: String?
    public var asn: Int32?
    public var state: BgpPeerStateEnum?
    public var connectedDuration: String?
    public var routesReceived: Int64?
    public var messagesSent: Int64?
    public var messagesReceived: Int64?

        enum CodingKeys: String, CodingKey {case localAddress = "localAddress"
        case neighbor = "neighbor"
        case asn = "asn"
        case state = "state"
        case connectedDuration = "connectedDuration"
        case routesReceived = "routesReceived"
        case messagesSent = "messagesSent"
        case messagesReceived = "messagesReceived"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.localAddress) {
        self.localAddress = try container.decode(String?.self, forKey: .localAddress)
    }
    if container.contains(.neighbor) {
        self.neighbor = try container.decode(String?.self, forKey: .neighbor)
    }
    if container.contains(.asn) {
        self.asn = try container.decode(Int32?.self, forKey: .asn)
    }
    if container.contains(.state) {
        self.state = try container.decode(BgpPeerStateEnum?.self, forKey: .state)
    }
    if container.contains(.connectedDuration) {
        self.connectedDuration = try container.decode(String?.self, forKey: .connectedDuration)
    }
    if container.contains(.routesReceived) {
        self.routesReceived = try container.decode(Int64?.self, forKey: .routesReceived)
    }
    if container.contains(.messagesSent) {
        self.messagesSent = try container.decode(Int64?.self, forKey: .messagesSent)
    }
    if container.contains(.messagesReceived) {
        self.messagesReceived = try container.decode(Int64?.self, forKey: .messagesReceived)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.localAddress != nil {try container.encode(self.localAddress, forKey: .localAddress)}
    if self.neighbor != nil {try container.encode(self.neighbor, forKey: .neighbor)}
    if self.asn != nil {try container.encode(self.asn, forKey: .asn)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.connectedDuration != nil {try container.encode(self.connectedDuration, forKey: .connectedDuration)}
    if self.routesReceived != nil {try container.encode(self.routesReceived, forKey: .routesReceived)}
    if self.messagesSent != nil {try container.encode(self.messagesSent, forKey: .messagesSent)}
    if self.messagesReceived != nil {try container.encode(self.messagesReceived, forKey: .messagesReceived)}
  }
}

extension DataFactory {
  public static func createBgpPeerStatusProtocol() -> BgpPeerStatusProtocol {
    return BgpPeerStatusData()
  }
}
