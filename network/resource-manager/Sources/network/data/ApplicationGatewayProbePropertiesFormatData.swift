// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationGatewayProbePropertiesFormatData : ApplicationGatewayProbePropertiesFormatProtocol {
    public var _protocol: ApplicationGatewayProtocolEnum?
    public var host: String?
    public var path: String?
    public var interval: Int32?
    public var timeout: Int32?
    public var unhealthyThreshold: Int32?
    public var pickHostNameFromBackendHttpSettings: Bool?
    public var minServers: Int32?
    public var match: ApplicationGatewayProbeHealthResponseMatchProtocol?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case _protocol = "protocol"
        case host = "host"
        case path = "path"
        case interval = "interval"
        case timeout = "timeout"
        case unhealthyThreshold = "unhealthyThreshold"
        case pickHostNameFromBackendHttpSettings = "pickHostNameFromBackendHttpSettings"
        case minServers = "minServers"
        case match = "match"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(._protocol) {
        self._protocol = try container.decode(ApplicationGatewayProtocolEnum?.self, forKey: ._protocol)
    }
    if container.contains(.host) {
        self.host = try container.decode(String?.self, forKey: .host)
    }
    if container.contains(.path) {
        self.path = try container.decode(String?.self, forKey: .path)
    }
    if container.contains(.interval) {
        self.interval = try container.decode(Int32?.self, forKey: .interval)
    }
    if container.contains(.timeout) {
        self.timeout = try container.decode(Int32?.self, forKey: .timeout)
    }
    if container.contains(.unhealthyThreshold) {
        self.unhealthyThreshold = try container.decode(Int32?.self, forKey: .unhealthyThreshold)
    }
    if container.contains(.pickHostNameFromBackendHttpSettings) {
        self.pickHostNameFromBackendHttpSettings = try container.decode(Bool?.self, forKey: .pickHostNameFromBackendHttpSettings)
    }
    if container.contains(.minServers) {
        self.minServers = try container.decode(Int32?.self, forKey: .minServers)
    }
    if container.contains(.match) {
        self.match = try container.decode(ApplicationGatewayProbeHealthResponseMatchData?.self, forKey: .match)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self._protocol != nil {try container.encode(self._protocol, forKey: ._protocol)}
    if self.host != nil {try container.encode(self.host, forKey: .host)}
    if self.path != nil {try container.encode(self.path, forKey: .path)}
    if self.interval != nil {try container.encode(self.interval, forKey: .interval)}
    if self.timeout != nil {try container.encode(self.timeout, forKey: .timeout)}
    if self.unhealthyThreshold != nil {try container.encode(self.unhealthyThreshold, forKey: .unhealthyThreshold)}
    if self.pickHostNameFromBackendHttpSettings != nil {try container.encode(self.pickHostNameFromBackendHttpSettings, forKey: .pickHostNameFromBackendHttpSettings)}
    if self.minServers != nil {try container.encode(self.minServers, forKey: .minServers)}
    if self.match != nil {try container.encode(self.match as! ApplicationGatewayProbeHealthResponseMatchData?, forKey: .match)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createApplicationGatewayProbePropertiesFormatProtocol() -> ApplicationGatewayProbePropertiesFormatProtocol {
    return ApplicationGatewayProbePropertiesFormatData()
  }
}
