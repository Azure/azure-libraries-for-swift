// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkSecurityGroupPropertiesFormatData : NetworkSecurityGroupPropertiesFormatProtocol {
    public var securityRules: [SecurityRuleProtocol?]?
    public var defaultSecurityRules: [SecurityRuleProtocol?]?
    public var networkInterfaces: [NetworkInterfaceProtocol?]?
    public var subnets: [SubnetProtocol?]?
    public var resourceGuid: String?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case securityRules = "securityRules"
        case defaultSecurityRules = "defaultSecurityRules"
        case networkInterfaces = "networkInterfaces"
        case subnets = "subnets"
        case resourceGuid = "resourceGuid"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.securityRules) {
        self.securityRules = try container.decode([SecurityRuleData?]?.self, forKey: .securityRules)
    }
    if container.contains(.defaultSecurityRules) {
        self.defaultSecurityRules = try container.decode([SecurityRuleData?]?.self, forKey: .defaultSecurityRules)
    }
    if container.contains(.networkInterfaces) {
        self.networkInterfaces = try container.decode([NetworkInterfaceData?]?.self, forKey: .networkInterfaces)
    }
    if container.contains(.subnets) {
        self.subnets = try container.decode([SubnetData?]?.self, forKey: .subnets)
    }
    if container.contains(.resourceGuid) {
        self.resourceGuid = try container.decode(String?.self, forKey: .resourceGuid)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.securityRules != nil {try container.encode(self.securityRules as! [SecurityRuleData?]?, forKey: .securityRules)}
    if self.defaultSecurityRules != nil {try container.encode(self.defaultSecurityRules as! [SecurityRuleData?]?, forKey: .defaultSecurityRules)}
    if self.networkInterfaces != nil {try container.encode(self.networkInterfaces as! [NetworkInterfaceData?]?, forKey: .networkInterfaces)}
    if self.subnets != nil {try container.encode(self.subnets as! [SubnetData?]?, forKey: .subnets)}
    if self.resourceGuid != nil {try container.encode(self.resourceGuid, forKey: .resourceGuid)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createNetworkSecurityGroupPropertiesFormatProtocol() -> NetworkSecurityGroupPropertiesFormatProtocol {
    return NetworkSecurityGroupPropertiesFormatData()
  }
}
