// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ExpressRouteCircuitArpTableData : ExpressRouteCircuitArpTableProtocol {
    public var age: Int32?
    public var interface: String?
    public var ipAddress: String?
    public var macAddress: String?

        enum CodingKeys: String, CodingKey {case age = "age"
        case interface = "interface"
        case ipAddress = "ipAddress"
        case macAddress = "macAddress"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.age) {
        self.age = try container.decode(Int32?.self, forKey: .age)
    }
    if container.contains(.interface) {
        self.interface = try container.decode(String?.self, forKey: .interface)
    }
    if container.contains(.ipAddress) {
        self.ipAddress = try container.decode(String?.self, forKey: .ipAddress)
    }
    if container.contains(.macAddress) {
        self.macAddress = try container.decode(String?.self, forKey: .macAddress)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.age != nil {try container.encode(self.age, forKey: .age)}
    if self.interface != nil {try container.encode(self.interface, forKey: .interface)}
    if self.ipAddress != nil {try container.encode(self.ipAddress, forKey: .ipAddress)}
    if self.macAddress != nil {try container.encode(self.macAddress, forKey: .macAddress)}
  }
}

extension DataFactory {
  public static func createExpressRouteCircuitArpTableProtocol() -> ExpressRouteCircuitArpTableProtocol {
    return ExpressRouteCircuitArpTableData()
  }
}
