// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureReachabilityReportParametersData : AzureReachabilityReportParametersProtocol {
    public var providerLocation: AzureReachabilityReportLocationProtocol
    public var providers: [String]?
    public var azureLocations: [String]?
    public var startTime: Date
    public var endTime: Date

        enum CodingKeys: String, CodingKey {case providerLocation = "providerLocation"
        case providers = "providers"
        case azureLocations = "azureLocations"
        case startTime = "startTime"
        case endTime = "endTime"
        }

  public init(providerLocation: AzureReachabilityReportLocationProtocol, startTime: Date, endTime: Date)  {
    self.providerLocation = providerLocation
    self.startTime = startTime
    self.endTime = endTime
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.providerLocation = try container.decode(AzureReachabilityReportLocationData.self, forKey: .providerLocation)
    if container.contains(.providers) {
        self.providers = try container.decode([String]?.self, forKey: .providers)
    }
    if container.contains(.azureLocations) {
        self.azureLocations = try container.decode([String]?.self, forKey: .azureLocations)
    }
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)!
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)!
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.providerLocation as! AzureReachabilityReportLocationData, forKey: .providerLocation)
    if self.providers != nil {try container.encode(self.providers as! [String]?, forKey: .providers)}
    if self.azureLocations != nil {try container.encode(self.azureLocations as! [String]?, forKey: .azureLocations)}
    try container.encode(DateConverter.toString(date: self.startTime, format: .dateTime), forKey: .startTime)
    try container.encode(DateConverter.toString(date: self.endTime, format: .dateTime), forKey: .endTime)
  }
}

extension DataFactory {
  public static func createAzureReachabilityReportParametersProtocol(providerLocation: AzureReachabilityReportLocationProtocol, startTime: Date, endTime: Date) -> AzureReachabilityReportParametersProtocol {
    return AzureReachabilityReportParametersData(providerLocation: providerLocation, startTime: startTime, endTime: endTime)
  }
}
