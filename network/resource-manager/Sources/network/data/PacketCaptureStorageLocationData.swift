// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PacketCaptureStorageLocationData : PacketCaptureStorageLocationProtocol {
    public var storageId: String?
    public var storagePath: String?
    public var filePath: String?

        enum CodingKeys: String, CodingKey {case storageId = "storageId"
        case storagePath = "storagePath"
        case filePath = "filePath"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.storageId) {
        self.storageId = try container.decode(String?.self, forKey: .storageId)
    }
    if container.contains(.storagePath) {
        self.storagePath = try container.decode(String?.self, forKey: .storagePath)
    }
    if container.contains(.filePath) {
        self.filePath = try container.decode(String?.self, forKey: .filePath)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.storageId != nil {try container.encode(self.storageId, forKey: .storageId)}
    if self.storagePath != nil {try container.encode(self.storagePath, forKey: .storagePath)}
    if self.filePath != nil {try container.encode(self.filePath, forKey: .filePath)}
  }
}

extension DataFactory {
  public static func createPacketCaptureStorageLocationProtocol() -> PacketCaptureStorageLocationProtocol {
    return PacketCaptureStorageLocationData()
  }
}
