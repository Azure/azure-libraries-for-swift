// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkInterfaceIPConfigurationPropertiesFormatData : NetworkInterfaceIPConfigurationPropertiesFormatProtocol {
    public var applicationGatewayBackendAddressPools: [ApplicationGatewayBackendAddressPoolProtocol?]?
    public var loadBalancerBackendAddressPools: [BackendAddressPoolProtocol?]?
    public var loadBalancerInboundNatRules: [InboundNatRuleProtocol?]?
    public var privateIPAddress: String?
    public var privateIPAllocationMethod: IPAllocationMethodEnum?
    public var privateIPAddressVersion: IPVersionEnum?
    public var subnet: SubnetProtocol?
    public var primary: Bool?
    public var publicIPAddress: PublicIPAddressProtocol?
    public var applicationSecurityGroups: [ApplicationSecurityGroupProtocol?]?
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case applicationGatewayBackendAddressPools = "applicationGatewayBackendAddressPools"
        case loadBalancerBackendAddressPools = "loadBalancerBackendAddressPools"
        case loadBalancerInboundNatRules = "loadBalancerInboundNatRules"
        case privateIPAddress = "privateIPAddress"
        case privateIPAllocationMethod = "privateIPAllocationMethod"
        case privateIPAddressVersion = "privateIPAddressVersion"
        case subnet = "subnet"
        case primary = "primary"
        case publicIPAddress = "publicIPAddress"
        case applicationSecurityGroups = "applicationSecurityGroups"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.applicationGatewayBackendAddressPools) {
        self.applicationGatewayBackendAddressPools = try container.decode([ApplicationGatewayBackendAddressPoolData?]?.self, forKey: .applicationGatewayBackendAddressPools)
    }
    if container.contains(.loadBalancerBackendAddressPools) {
        self.loadBalancerBackendAddressPools = try container.decode([BackendAddressPoolData?]?.self, forKey: .loadBalancerBackendAddressPools)
    }
    if container.contains(.loadBalancerInboundNatRules) {
        self.loadBalancerInboundNatRules = try container.decode([InboundNatRuleData?]?.self, forKey: .loadBalancerInboundNatRules)
    }
    if container.contains(.privateIPAddress) {
        self.privateIPAddress = try container.decode(String?.self, forKey: .privateIPAddress)
    }
    if container.contains(.privateIPAllocationMethod) {
        self.privateIPAllocationMethod = try container.decode(IPAllocationMethodEnum?.self, forKey: .privateIPAllocationMethod)
    }
    if container.contains(.privateIPAddressVersion) {
        self.privateIPAddressVersion = try container.decode(IPVersionEnum?.self, forKey: .privateIPAddressVersion)
    }
    if container.contains(.subnet) {
        self.subnet = try container.decode(SubnetData?.self, forKey: .subnet)
    }
    if container.contains(.primary) {
        self.primary = try container.decode(Bool?.self, forKey: .primary)
    }
    if container.contains(.publicIPAddress) {
        self.publicIPAddress = try container.decode(PublicIPAddressData?.self, forKey: .publicIPAddress)
    }
    if container.contains(.applicationSecurityGroups) {
        self.applicationSecurityGroups = try container.decode([ApplicationSecurityGroupData?]?.self, forKey: .applicationSecurityGroups)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.applicationGatewayBackendAddressPools != nil {try container.encode(self.applicationGatewayBackendAddressPools as! [ApplicationGatewayBackendAddressPoolData?]?, forKey: .applicationGatewayBackendAddressPools)}
    if self.loadBalancerBackendAddressPools != nil {try container.encode(self.loadBalancerBackendAddressPools as! [BackendAddressPoolData?]?, forKey: .loadBalancerBackendAddressPools)}
    if self.loadBalancerInboundNatRules != nil {try container.encode(self.loadBalancerInboundNatRules as! [InboundNatRuleData?]?, forKey: .loadBalancerInboundNatRules)}
    if self.privateIPAddress != nil {try container.encode(self.privateIPAddress, forKey: .privateIPAddress)}
    if self.privateIPAllocationMethod != nil {try container.encode(self.privateIPAllocationMethod, forKey: .privateIPAllocationMethod)}
    if self.privateIPAddressVersion != nil {try container.encode(self.privateIPAddressVersion, forKey: .privateIPAddressVersion)}
    if self.subnet != nil {try container.encode(self.subnet as! SubnetData?, forKey: .subnet)}
    if self.primary != nil {try container.encode(self.primary, forKey: .primary)}
    if self.publicIPAddress != nil {try container.encode(self.publicIPAddress as! PublicIPAddressData?, forKey: .publicIPAddress)}
    if self.applicationSecurityGroups != nil {try container.encode(self.applicationSecurityGroups as! [ApplicationSecurityGroupData?]?, forKey: .applicationSecurityGroups)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createNetworkInterfaceIPConfigurationPropertiesFormatProtocol() -> NetworkInterfaceIPConfigurationPropertiesFormatProtocol {
    return NetworkInterfaceIPConfigurationPropertiesFormatData()
  }
}
