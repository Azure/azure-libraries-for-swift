// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RouteFilterRulePropertiesFormatData : RouteFilterRulePropertiesFormatProtocol {
    public var access: AccessEnum
    public var routeFilterRuleType: String
    public var communities: [String]
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case access = "access"
        case routeFilterRuleType = "routeFilterRuleType"
        case communities = "communities"
        case provisioningState = "provisioningState"
        }

  public init(access: AccessEnum, routeFilterRuleType: String, communities: [String])  {
    self.access = access
    self.routeFilterRuleType = routeFilterRuleType
    self.communities = communities
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.access = try container.decode(AccessEnum.self, forKey: .access)
    self.routeFilterRuleType = try container.decode(String.self, forKey: .routeFilterRuleType)
    self.communities = try container.decode([String].self, forKey: .communities)
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.access, forKey: .access)
    try container.encode(self.routeFilterRuleType, forKey: .routeFilterRuleType)
    try container.encode(self.communities as! [String], forKey: .communities)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createRouteFilterRulePropertiesFormatProtocol(access: AccessEnum, routeFilterRuleType: String, communities: [String]) -> RouteFilterRulePropertiesFormatProtocol {
    return RouteFilterRulePropertiesFormatData(access: access, routeFilterRuleType: routeFilterRuleType, communities: communities)
  }
}
