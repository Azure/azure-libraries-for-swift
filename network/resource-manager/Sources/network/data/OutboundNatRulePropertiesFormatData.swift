// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct OutboundNatRulePropertiesFormatData : OutboundNatRulePropertiesFormatProtocol {
    public var allocatedOutboundPorts: Int32?
    public var frontendIPConfigurations: [SubResourceProtocol?]?
    public var backendAddressPool: SubResourceProtocol
    public var provisioningState: String?

        enum CodingKeys: String, CodingKey {case allocatedOutboundPorts = "allocatedOutboundPorts"
        case frontendIPConfigurations = "frontendIPConfigurations"
        case backendAddressPool = "backendAddressPool"
        case provisioningState = "provisioningState"
        }

  public init(backendAddressPool: SubResourceProtocol)  {
    self.backendAddressPool = backendAddressPool
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.allocatedOutboundPorts) {
        self.allocatedOutboundPorts = try container.decode(Int32?.self, forKey: .allocatedOutboundPorts)
    }
    if container.contains(.frontendIPConfigurations) {
        self.frontendIPConfigurations = try container.decode([SubResourceData?]?.self, forKey: .frontendIPConfigurations)
    }
    self.backendAddressPool = try container.decode(SubResourceData.self, forKey: .backendAddressPool)
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.allocatedOutboundPorts != nil {try container.encode(self.allocatedOutboundPorts, forKey: .allocatedOutboundPorts)}
    if self.frontendIPConfigurations != nil {try container.encode(self.frontendIPConfigurations as! [SubResourceData?]?, forKey: .frontendIPConfigurations)}
    try container.encode(self.backendAddressPool as! SubResourceData, forKey: .backendAddressPool)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createOutboundNatRulePropertiesFormatProtocol(backendAddressPool: SubResourceProtocol) -> OutboundNatRulePropertiesFormatProtocol {
    return OutboundNatRulePropertiesFormatData(backendAddressPool: backendAddressPool)
  }
}
