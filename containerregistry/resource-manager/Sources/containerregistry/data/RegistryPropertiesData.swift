// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RegistryPropertiesData : RegistryPropertiesProtocol {
    public var loginServer: String?
    public var creationDate: Date?
    public var provisioningState: ProvisioningStateEnum?
    public var status: StatusProtocol?
    public var adminUserEnabled: Bool?
    public var storageAccount: StorageAccountPropertiesProtocol?

        enum CodingKeys: String, CodingKey {case loginServer = "loginServer"
        case creationDate = "creationDate"
        case provisioningState = "provisioningState"
        case status = "status"
        case adminUserEnabled = "adminUserEnabled"
        case storageAccount = "storageAccount"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.loginServer) {
        self.loginServer = try container.decode(String?.self, forKey: .loginServer)
    }
    if container.contains(.creationDate) {
        self.creationDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationDate)), format: .dateTime)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(ProvisioningStateEnum?.self, forKey: .provisioningState)
    }
    if container.contains(.status) {
        self.status = try container.decode(StatusData?.self, forKey: .status)
    }
    if container.contains(.adminUserEnabled) {
        self.adminUserEnabled = try container.decode(Bool?.self, forKey: .adminUserEnabled)
    }
    if container.contains(.storageAccount) {
        self.storageAccount = try container.decode(StorageAccountPropertiesData?.self, forKey: .storageAccount)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.loginServer != nil {try container.encode(self.loginServer, forKey: .loginServer)}
    if self.creationDate != nil {
        try container.encode(DateConverter.toString(date: self.creationDate!, format: .dateTime), forKey: .creationDate)
    }
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.status != nil {try container.encode(self.status as! StatusData?, forKey: .status)}
    if self.adminUserEnabled != nil {try container.encode(self.adminUserEnabled, forKey: .adminUserEnabled)}
    if self.storageAccount != nil {try container.encode(self.storageAccount as! StorageAccountPropertiesData?, forKey: .storageAccount)}
  }
}

extension DataFactory {
  public static func createRegistryPropertiesProtocol() -> RegistryPropertiesProtocol {
    return RegistryPropertiesData()
  }
}
