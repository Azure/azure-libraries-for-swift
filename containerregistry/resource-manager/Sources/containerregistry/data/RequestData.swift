// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RequestData : RequestProtocol {
    public var id: String?
    public var addr: String?
    public var host: String?
    public var method: String?
    public var useragent: String?

        enum CodingKeys: String, CodingKey {case id = "id"
        case addr = "addr"
        case host = "host"
        case method = "method"
        case useragent = "useragent"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.addr) {
        self.addr = try container.decode(String?.self, forKey: .addr)
    }
    if container.contains(.host) {
        self.host = try container.decode(String?.self, forKey: .host)
    }
    if container.contains(.method) {
        self.method = try container.decode(String?.self, forKey: .method)
    }
    if container.contains(.useragent) {
        self.useragent = try container.decode(String?.self, forKey: .useragent)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.addr != nil {try container.encode(self.addr, forKey: .addr)}
    if self.host != nil {try container.encode(self.host, forKey: .host)}
    if self.method != nil {try container.encode(self.method, forKey: .method)}
    if self.useragent != nil {try container.encode(self.useragent, forKey: .useragent)}
  }
}

extension DataFactory {
  public static func createRequestProtocol() -> RequestProtocol {
    return RequestData()
  }
}
