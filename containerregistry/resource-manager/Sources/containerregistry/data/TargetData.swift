// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TargetData : TargetProtocol {
    public var mediaType: String?
    public var size: Int64?
    public var digest: String?
    public var length: Int64?
    public var repository: String?
    public var url: String?
    public var tag: String?

        enum CodingKeys: String, CodingKey {case mediaType = "mediaType"
        case size = "size"
        case digest = "digest"
        case length = "length"
        case repository = "repository"
        case url = "url"
        case tag = "tag"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.mediaType) {
        self.mediaType = try container.decode(String?.self, forKey: .mediaType)
    }
    if container.contains(.size) {
        self.size = try container.decode(Int64?.self, forKey: .size)
    }
    if container.contains(.digest) {
        self.digest = try container.decode(String?.self, forKey: .digest)
    }
    if container.contains(.length) {
        self.length = try container.decode(Int64?.self, forKey: .length)
    }
    if container.contains(.repository) {
        self.repository = try container.decode(String?.self, forKey: .repository)
    }
    if container.contains(.url) {
        self.url = try container.decode(String?.self, forKey: .url)
    }
    if container.contains(.tag) {
        self.tag = try container.decode(String?.self, forKey: .tag)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.mediaType != nil {try container.encode(self.mediaType, forKey: .mediaType)}
    if self.size != nil {try container.encode(self.size, forKey: .size)}
    if self.digest != nil {try container.encode(self.digest, forKey: .digest)}
    if self.length != nil {try container.encode(self.length, forKey: .length)}
    if self.repository != nil {try container.encode(self.repository, forKey: .repository)}
    if self.url != nil {try container.encode(self.url, forKey: .url)}
    if self.tag != nil {try container.encode(self.tag, forKey: .tag)}
  }
}

extension DataFactory {
  public static func createTargetProtocol() -> TargetProtocol {
    return TargetData()
  }
}
