// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StatusData : StatusProtocol {
    public var displayStatus: String?
    public var message: String?
    public var timestamp: Date?

        enum CodingKeys: String, CodingKey {case displayStatus = "displayStatus"
        case message = "message"
        case timestamp = "timestamp"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.displayStatus) {
        self.displayStatus = try container.decode(String?.self, forKey: .displayStatus)
    }
    if container.contains(.message) {
        self.message = try container.decode(String?.self, forKey: .message)
    }
    if container.contains(.timestamp) {
        self.timestamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .timestamp)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.displayStatus != nil {try container.encode(self.displayStatus, forKey: .displayStatus)}
    if self.message != nil {try container.encode(self.message, forKey: .message)}
    if self.timestamp != nil {
        try container.encode(DateConverter.toString(date: self.timestamp!, format: .dateTime), forKey: .timestamp)
    }
  }
}

extension DataFactory {
  public static func createStatusProtocol() -> StatusProtocol {
    return StatusData()
  }
}
