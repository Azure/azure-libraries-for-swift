// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EventContentData : EventContentProtocol {
    public var id: String?
    public var timestamp: Date?
    public var action: String?
    public var target: TargetProtocol?
    public var request: RequestProtocol?
    public var actor: ActorProtocol?
    public var source: SourceProtocol?

        enum CodingKeys: String, CodingKey {case id = "id"
        case timestamp = "timestamp"
        case action = "action"
        case target = "target"
        case request = "request"
        case actor = "actor"
        case source = "source"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.timestamp) {
        self.timestamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .timestamp)), format: .dateTime)
    }
    if container.contains(.action) {
        self.action = try container.decode(String?.self, forKey: .action)
    }
    if container.contains(.target) {
        self.target = try container.decode(TargetData?.self, forKey: .target)
    }
    if container.contains(.request) {
        self.request = try container.decode(RequestData?.self, forKey: .request)
    }
    if container.contains(.actor) {
        self.actor = try container.decode(ActorData?.self, forKey: .actor)
    }
    if container.contains(.source) {
        self.source = try container.decode(SourceData?.self, forKey: .source)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.timestamp != nil {
        try container.encode(DateConverter.toString(date: self.timestamp!, format: .dateTime), forKey: .timestamp)
    }
    if self.action != nil {try container.encode(self.action, forKey: .action)}
    if self.target != nil {try container.encode(self.target as! TargetData?, forKey: .target)}
    if self.request != nil {try container.encode(self.request as! RequestData?, forKey: .request)}
    if self.actor != nil {try container.encode(self.actor as! ActorData?, forKey: .actor)}
    if self.source != nil {try container.encode(self.source as! SourceData?, forKey: .source)}
  }
}

extension DataFactory {
  public static func createEventContentProtocol() -> EventContentProtocol {
    return EventContentData()
  }
}
