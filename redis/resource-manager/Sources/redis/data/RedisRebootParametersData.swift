// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RedisRebootParametersData : RedisRebootParametersProtocol {
    public var rebootType: RebootTypeEnum
    public var shardId: Int32?

        enum CodingKeys: String, CodingKey {case rebootType = "rebootType"
        case shardId = "shardId"
        }

  public init(rebootType: RebootTypeEnum)  {
    self.rebootType = rebootType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.rebootType = try container.decode(RebootTypeEnum.self, forKey: .rebootType)
    if container.contains(.shardId) {
        self.shardId = try container.decode(Int32?.self, forKey: .shardId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.rebootType, forKey: .rebootType)
    if self.shardId != nil {try container.encode(self.shardId, forKey: .shardId)}
  }
}

extension DataFactory {
  public static func createRedisRebootParametersProtocol(rebootType: RebootTypeEnum) -> RedisRebootParametersProtocol {
    return RedisRebootParametersData(rebootType: rebootType)
  }
}
