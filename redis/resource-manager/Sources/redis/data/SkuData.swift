// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SkuData : SkuProtocol {
    public var name: SkuNameEnum
    public var family: SkuFamilyEnum
    public var capacity: Int32

        enum CodingKeys: String, CodingKey {case name = "name"
        case family = "family"
        case capacity = "capacity"
        }

  public init(name: SkuNameEnum, family: SkuFamilyEnum, capacity: Int32)  {
    self.name = name
    self.family = family
    self.capacity = capacity
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.name = try container.decode(SkuNameEnum.self, forKey: .name)
    self.family = try container.decode(SkuFamilyEnum.self, forKey: .family)
    self.capacity = try container.decode(Int32.self, forKey: .capacity)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.name, forKey: .name)
    try container.encode(self.family, forKey: .family)
    try container.encode(self.capacity, forKey: .capacity)
  }
}

extension DataFactory {
  public static func createSkuProtocol(name: SkuNameEnum, family: SkuFamilyEnum, capacity: Int32) -> SkuProtocol {
    return SkuData(name: name, family: family, capacity: capacity)
  }
}
