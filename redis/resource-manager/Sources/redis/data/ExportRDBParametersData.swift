// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ExportRDBParametersData : ExportRDBParametersProtocol {
    public var format: String?
    public var _prefix: String
    public var container: String

        enum CodingKeys: String, CodingKey {case format = "format"
        case _prefix = "prefix"
        case container = "container"
        }

  public init(_prefix: String, container: String)  {
    self._prefix = _prefix
    self.container = container
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.format) {
        self.format = try container.decode(String?.self, forKey: .format)
    }
    self._prefix = try container.decode(String.self, forKey: ._prefix)
    self.container = try container.decode(String.self, forKey: .container)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.format != nil {try container.encode(self.format, forKey: .format)}
    try container.encode(self._prefix, forKey: ._prefix)
    try container.encode(self.container, forKey: .container)
  }
}

extension DataFactory {
  public static func createExportRDBParametersProtocol(_prefix: String, container: String) -> ExportRDBParametersProtocol {
    return ExportRDBParametersData(_prefix: _prefix, container: container)
  }
}
