// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CognitiveServicesAccountCreateParametersData : CognitiveServicesAccountCreateParametersProtocol {
    public var sku: SkuProtocol
    public var kind: KindEnum
    public var location: String
    public var tags: [String:String]?
    public var properties: [String: String?]

        enum CodingKeys: String, CodingKey {case sku = "sku"
        case kind = "kind"
        case location = "location"
        case tags = "tags"
        case properties = "properties"
        }

  public init(sku: SkuProtocol, kind: KindEnum, location: String, properties: [String: String?])  {
    self.sku = sku
    self.kind = kind
    self.location = location
    self.properties = properties
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.sku = try container.decode(SkuData.self, forKey: .sku)
    self.kind = try container.decode(KindEnum.self, forKey: .kind)
    self.location = try container.decode(String.self, forKey: .location)
    if container.contains(.tags) {
        self.tags = try container.decode([String:String]?.self, forKey: .tags)
    }
    self.properties = try container.decode([String: String?].self, forKey: .properties)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.sku as! SkuData, forKey: .sku)
    try container.encode(self.kind, forKey: .kind)
    try container.encode(self.location, forKey: .location)
    if self.tags != nil {try container.encode(self.tags, forKey: .tags)}
    try container.encode(self.properties, forKey: .properties)
  }
}

extension DataFactory {
  public static func createCognitiveServicesAccountCreateParametersProtocol(sku: SkuProtocol, kind: KindEnum, location: String, properties: [String: String?]) -> CognitiveServicesAccountCreateParametersProtocol {
    return CognitiveServicesAccountCreateParametersData(sku: sku, kind: kind, location: location, properties: properties)
  }
}
