// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SBSubscriptionPropertiesData : SBSubscriptionPropertiesProtocol {
    public var messageCount: Int64?
    public var createdAt: Date?
    public var accessedAt: Date?
    public var updatedAt: Date?
    public var countDetails: MessageCountDetailsProtocol?
    public var lockDuration: String?
    public var requiresSession: Bool?
    public var defaultMessageTimeToLive: String?
    public var deadLetteringOnFilterEvaluationExceptions: Bool?
    public var deadLetteringOnMessageExpiration: Bool?
    public var duplicateDetectionHistoryTimeWindow: String?
    public var maxDeliveryCount: Int32?
    public var status: EntityStatusEnum?
    public var enableBatchedOperations: Bool?
    public var autoDeleteOnIdle: String?
    public var forwardTo: String?
    public var forwardDeadLetteredMessagesTo: String?

        enum CodingKeys: String, CodingKey {case messageCount = "messageCount"
        case createdAt = "createdAt"
        case accessedAt = "accessedAt"
        case updatedAt = "updatedAt"
        case countDetails = "countDetails"
        case lockDuration = "lockDuration"
        case requiresSession = "requiresSession"
        case defaultMessageTimeToLive = "defaultMessageTimeToLive"
        case deadLetteringOnFilterEvaluationExceptions = "deadLetteringOnFilterEvaluationExceptions"
        case deadLetteringOnMessageExpiration = "deadLetteringOnMessageExpiration"
        case duplicateDetectionHistoryTimeWindow = "duplicateDetectionHistoryTimeWindow"
        case maxDeliveryCount = "maxDeliveryCount"
        case status = "status"
        case enableBatchedOperations = "enableBatchedOperations"
        case autoDeleteOnIdle = "autoDeleteOnIdle"
        case forwardTo = "forwardTo"
        case forwardDeadLetteredMessagesTo = "forwardDeadLetteredMessagesTo"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.messageCount) {
        self.messageCount = try container.decode(Int64?.self, forKey: .messageCount)
    }
    if container.contains(.createdAt) {
        self.createdAt = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdAt)), format: .dateTime)
    }
    if container.contains(.accessedAt) {
        self.accessedAt = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .accessedAt)), format: .dateTime)
    }
    if container.contains(.updatedAt) {
        self.updatedAt = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .updatedAt)), format: .dateTime)
    }
    if container.contains(.countDetails) {
        self.countDetails = try container.decode(MessageCountDetailsData?.self, forKey: .countDetails)
    }
    if container.contains(.lockDuration) {
        self.lockDuration = try container.decode(String?.self, forKey: .lockDuration)
    }
    if container.contains(.requiresSession) {
        self.requiresSession = try container.decode(Bool?.self, forKey: .requiresSession)
    }
    if container.contains(.defaultMessageTimeToLive) {
        self.defaultMessageTimeToLive = try container.decode(String?.self, forKey: .defaultMessageTimeToLive)
    }
    if container.contains(.deadLetteringOnFilterEvaluationExceptions) {
        self.deadLetteringOnFilterEvaluationExceptions = try container.decode(Bool?.self, forKey: .deadLetteringOnFilterEvaluationExceptions)
    }
    if container.contains(.deadLetteringOnMessageExpiration) {
        self.deadLetteringOnMessageExpiration = try container.decode(Bool?.self, forKey: .deadLetteringOnMessageExpiration)
    }
    if container.contains(.duplicateDetectionHistoryTimeWindow) {
        self.duplicateDetectionHistoryTimeWindow = try container.decode(String?.self, forKey: .duplicateDetectionHistoryTimeWindow)
    }
    if container.contains(.maxDeliveryCount) {
        self.maxDeliveryCount = try container.decode(Int32?.self, forKey: .maxDeliveryCount)
    }
    if container.contains(.status) {
        self.status = try container.decode(EntityStatusEnum?.self, forKey: .status)
    }
    if container.contains(.enableBatchedOperations) {
        self.enableBatchedOperations = try container.decode(Bool?.self, forKey: .enableBatchedOperations)
    }
    if container.contains(.autoDeleteOnIdle) {
        self.autoDeleteOnIdle = try container.decode(String?.self, forKey: .autoDeleteOnIdle)
    }
    if container.contains(.forwardTo) {
        self.forwardTo = try container.decode(String?.self, forKey: .forwardTo)
    }
    if container.contains(.forwardDeadLetteredMessagesTo) {
        self.forwardDeadLetteredMessagesTo = try container.decode(String?.self, forKey: .forwardDeadLetteredMessagesTo)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.messageCount != nil {try container.encode(self.messageCount, forKey: .messageCount)}
    if self.createdAt != nil {
        try container.encode(DateConverter.toString(date: self.createdAt!, format: .dateTime), forKey: .createdAt)
    }
    if self.accessedAt != nil {
        try container.encode(DateConverter.toString(date: self.accessedAt!, format: .dateTime), forKey: .accessedAt)
    }
    if self.updatedAt != nil {
        try container.encode(DateConverter.toString(date: self.updatedAt!, format: .dateTime), forKey: .updatedAt)
    }
    if self.countDetails != nil {try container.encode(self.countDetails as! MessageCountDetailsData?, forKey: .countDetails)}
    if self.lockDuration != nil {try container.encode(self.lockDuration, forKey: .lockDuration)}
    if self.requiresSession != nil {try container.encode(self.requiresSession, forKey: .requiresSession)}
    if self.defaultMessageTimeToLive != nil {try container.encode(self.defaultMessageTimeToLive, forKey: .defaultMessageTimeToLive)}
    if self.deadLetteringOnFilterEvaluationExceptions != nil {try container.encode(self.deadLetteringOnFilterEvaluationExceptions, forKey: .deadLetteringOnFilterEvaluationExceptions)}
    if self.deadLetteringOnMessageExpiration != nil {try container.encode(self.deadLetteringOnMessageExpiration, forKey: .deadLetteringOnMessageExpiration)}
    if self.duplicateDetectionHistoryTimeWindow != nil {try container.encode(self.duplicateDetectionHistoryTimeWindow, forKey: .duplicateDetectionHistoryTimeWindow)}
    if self.maxDeliveryCount != nil {try container.encode(self.maxDeliveryCount, forKey: .maxDeliveryCount)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.enableBatchedOperations != nil {try container.encode(self.enableBatchedOperations, forKey: .enableBatchedOperations)}
    if self.autoDeleteOnIdle != nil {try container.encode(self.autoDeleteOnIdle, forKey: .autoDeleteOnIdle)}
    if self.forwardTo != nil {try container.encode(self.forwardTo, forKey: .forwardTo)}
    if self.forwardDeadLetteredMessagesTo != nil {try container.encode(self.forwardDeadLetteredMessagesTo, forKey: .forwardDeadLetteredMessagesTo)}
  }
}

extension DataFactory {
  public static func createSBSubscriptionPropertiesProtocol() -> SBSubscriptionPropertiesProtocol {
    return SBSubscriptionPropertiesData()
  }
}
