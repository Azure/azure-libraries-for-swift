// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CaptureDescriptionData : CaptureDescriptionProtocol {
    public var enabled: Bool?
    public var encoding: EncodingCaptureDescriptionEnum?
    public var intervalInSeconds: Int32?
    public var sizeLimitInBytes: Int32?
    public var destination: DestinationProtocol?

        enum CodingKeys: String, CodingKey {case enabled = "enabled"
        case encoding = "encoding"
        case intervalInSeconds = "intervalInSeconds"
        case sizeLimitInBytes = "sizeLimitInBytes"
        case destination = "destination"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.enabled) {
        self.enabled = try container.decode(Bool?.self, forKey: .enabled)
    }
    if container.contains(.encoding) {
        self.encoding = try container.decode(EncodingCaptureDescriptionEnum?.self, forKey: .encoding)
    }
    if container.contains(.intervalInSeconds) {
        self.intervalInSeconds = try container.decode(Int32?.self, forKey: .intervalInSeconds)
    }
    if container.contains(.sizeLimitInBytes) {
        self.sizeLimitInBytes = try container.decode(Int32?.self, forKey: .sizeLimitInBytes)
    }
    if container.contains(.destination) {
        self.destination = try container.decode(DestinationData?.self, forKey: .destination)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.enabled != nil {try container.encode(self.enabled, forKey: .enabled)}
    if self.encoding != nil {try container.encode(self.encoding, forKey: .encoding)}
    if self.intervalInSeconds != nil {try container.encode(self.intervalInSeconds, forKey: .intervalInSeconds)}
    if self.sizeLimitInBytes != nil {try container.encode(self.sizeLimitInBytes, forKey: .sizeLimitInBytes)}
    if self.destination != nil {try container.encode(self.destination as! DestinationData?, forKey: .destination)}
  }
}

extension DataFactory {
  public static func createCaptureDescriptionProtocol() -> CaptureDescriptionProtocol {
    return CaptureDescriptionData()
  }
}
