// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// Queues is the azure Service Bus client
import Foundation
import azureSwiftRuntime
extension Commands {
public struct Queues {
    public static func CreateOrUpdate(resourceGroupName: String, namespaceName: String, queueName: String, subscriptionId: String, parameters: SBQueueProtocol) -> QueuesCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func CreateOrUpdateAuthorizationRule(resourceGroupName: String, namespaceName: String, queueName: String, authorizationRuleName: String, subscriptionId: String, parameters: SBAuthorizationRuleProtocol) -> QueuesCreateOrUpdateAuthorizationRule {
        return CreateOrUpdateAuthorizationRuleCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func Delete(resourceGroupName: String, namespaceName: String, queueName: String, subscriptionId: String) -> QueuesDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, subscriptionId: subscriptionId)
    }
    public static func DeleteAuthorizationRule(resourceGroupName: String, namespaceName: String, queueName: String, authorizationRuleName: String, subscriptionId: String) -> QueuesDeleteAuthorizationRule {
        return DeleteAuthorizationRuleCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, namespaceName: String, queueName: String, subscriptionId: String) -> QueuesGet {
        return GetCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, subscriptionId: subscriptionId)
    }
    public static func GetAuthorizationRule(resourceGroupName: String, namespaceName: String, queueName: String, authorizationRuleName: String, subscriptionId: String) -> QueuesGetAuthorizationRule {
        return GetAuthorizationRuleCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId)
    }
    public static func ListAuthorizationRules(resourceGroupName: String, namespaceName: String, queueName: String, subscriptionId: String) -> QueuesListAuthorizationRules {
        return ListAuthorizationRulesCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, subscriptionId: subscriptionId)
    }
    public static func ListByNamespace(resourceGroupName: String, namespaceName: String, subscriptionId: String) -> QueuesListByNamespace {
        return ListByNamespaceCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, subscriptionId: subscriptionId)
    }
    public static func ListKeys(resourceGroupName: String, namespaceName: String, queueName: String, authorizationRuleName: String, subscriptionId: String) -> QueuesListKeys {
        return ListKeysCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId)
    }
    public static func RegenerateKeys(resourceGroupName: String, namespaceName: String, queueName: String, authorizationRuleName: String, subscriptionId: String, parameters: RegenerateAccessKeyParametersProtocol) -> QueuesRegenerateKeys {
        return RegenerateKeysCommand(resourceGroupName: resourceGroupName, namespaceName: namespaceName, queueName: queueName, authorizationRuleName: authorizationRuleName, subscriptionId: subscriptionId, parameters: parameters)
    }
}
}
