// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// AppServiceCertificateOrders is the webSite Management Client
import Foundation
import azureSwiftRuntime
extension Commands {
public struct AppServiceCertificateOrders {
    public static func CreateOrUpdate(resourceGroupName: String, certificateOrderName: String, subscriptionId: String, certificateDistinguishedName: AppServiceCertificateOrderProtocol) -> AppServiceCertificateOrdersCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId, certificateDistinguishedName: certificateDistinguishedName)
    }
    public static func CreateOrUpdateCertificate(resourceGroupName: String, certificateOrderName: String, name: String, subscriptionId: String, keyVaultCertificate: AppServiceCertificateResourceProtocol) -> AppServiceCertificateOrdersCreateOrUpdateCertificate {
        return CreateOrUpdateCertificateCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, name: name, subscriptionId: subscriptionId, keyVaultCertificate: keyVaultCertificate)
    }
    public static func Delete(resourceGroupName: String, certificateOrderName: String, subscriptionId: String) -> AppServiceCertificateOrdersDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId)
    }
    public static func DeleteCertificate(resourceGroupName: String, certificateOrderName: String, name: String, subscriptionId: String) -> AppServiceCertificateOrdersDeleteCertificate {
        return DeleteCertificateCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, name: name, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, certificateOrderName: String, subscriptionId: String) -> AppServiceCertificateOrdersGet {
        return GetCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId)
    }
    public static func GetCertificate(resourceGroupName: String, certificateOrderName: String, name: String, subscriptionId: String) -> AppServiceCertificateOrdersGetCertificate {
        return GetCertificateCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, name: name, subscriptionId: subscriptionId)
    }
    public static func List(subscriptionId: String) -> AppServiceCertificateOrdersList {
        return ListCommand(subscriptionId: subscriptionId)
    }
    public static func ListByResourceGroup(resourceGroupName: String, subscriptionId: String) -> AppServiceCertificateOrdersListByResourceGroup {
        return ListByResourceGroupCommand(resourceGroupName: resourceGroupName, subscriptionId: subscriptionId)
    }
    public static func ListCertificates(resourceGroupName: String, certificateOrderName: String, subscriptionId: String) -> AppServiceCertificateOrdersListCertificates {
        return ListCertificatesCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId)
    }
    public static func Reissue(resourceGroupName: String, certificateOrderName: String, subscriptionId: String, reissueCertificateOrderRequest: ReissueCertificateOrderRequestProtocol) -> AppServiceCertificateOrdersReissue {
        return ReissueCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId, reissueCertificateOrderRequest: reissueCertificateOrderRequest)
    }
    public static func Renew(resourceGroupName: String, certificateOrderName: String, subscriptionId: String, renewCertificateOrderRequest: RenewCertificateOrderRequestProtocol) -> AppServiceCertificateOrdersRenew {
        return RenewCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId, renewCertificateOrderRequest: renewCertificateOrderRequest)
    }
    public static func ResendEmail(resourceGroupName: String, certificateOrderName: String, subscriptionId: String) -> AppServiceCertificateOrdersResendEmail {
        return ResendEmailCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId)
    }
    public static func ResendRequestEmails(resourceGroupName: String, certificateOrderName: String, subscriptionId: String, nameIdentifier: NameIdentifierProtocol) -> AppServiceCertificateOrdersResendRequestEmails {
        return ResendRequestEmailsCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId, nameIdentifier: nameIdentifier)
    }
    public static func RetrieveCertificateActions(resourceGroupName: String, name: String, subscriptionId: String) -> AppServiceCertificateOrdersRetrieveCertificateActions {
        return RetrieveCertificateActionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func RetrieveCertificateEmailHistory(resourceGroupName: String, name: String, subscriptionId: String) -> AppServiceCertificateOrdersRetrieveCertificateEmailHistory {
        return RetrieveCertificateEmailHistoryCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func RetrieveSiteSeal(resourceGroupName: String, certificateOrderName: String, subscriptionId: String, siteSealRequest: SiteSealRequestProtocol) -> AppServiceCertificateOrdersRetrieveSiteSeal {
        return RetrieveSiteSealCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId, siteSealRequest: siteSealRequest)
    }
    public static func Update(resourceGroupName: String, certificateOrderName: String, subscriptionId: String, certificateDistinguishedName: AppServiceCertificateOrderPatchResourceProtocol) -> AppServiceCertificateOrdersUpdate {
        return UpdateCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId, certificateDistinguishedName: certificateDistinguishedName)
    }
    public static func UpdateCertificate(resourceGroupName: String, certificateOrderName: String, name: String, subscriptionId: String, keyVaultCertificate: AppServiceCertificatePatchResourceProtocol) -> AppServiceCertificateOrdersUpdateCertificate {
        return UpdateCertificateCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, name: name, subscriptionId: subscriptionId, keyVaultCertificate: keyVaultCertificate)
    }
    public static func ValidatePurchaseInformation(subscriptionId: String, appServiceCertificateOrder: AppServiceCertificateOrderProtocol) -> AppServiceCertificateOrdersValidatePurchaseInformation {
        return ValidatePurchaseInformationCommand(subscriptionId: subscriptionId, appServiceCertificateOrder: appServiceCertificateOrder)
    }
    public static func VerifyDomainOwnership(resourceGroupName: String, certificateOrderName: String, subscriptionId: String) -> AppServiceCertificateOrdersVerifyDomainOwnership {
        return VerifyDomainOwnershipCommand(resourceGroupName: resourceGroupName, certificateOrderName: certificateOrderName, subscriptionId: subscriptionId)
    }
}
}
