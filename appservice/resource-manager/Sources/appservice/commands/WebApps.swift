// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// WebApps is the webSite Management Client
import Foundation
import azureSwiftRuntime
extension Commands {
public struct WebApps {
    public static func AddPremierAddOn(resourceGroupName: String, name: String, premierAddOnName: String, subscriptionId: String, premierAddOn: PremierAddOnProtocol) -> WebAppsAddPremierAddOn {
        return AddPremierAddOnCommand(resourceGroupName: resourceGroupName, name: name, premierAddOnName: premierAddOnName, subscriptionId: subscriptionId, premierAddOn: premierAddOn)
    }
    public static func AddPremierAddOnSlot(resourceGroupName: String, name: String, premierAddOnName: String, slot: String, subscriptionId: String, premierAddOn: PremierAddOnProtocol) -> WebAppsAddPremierAddOnSlot {
        return AddPremierAddOnSlotCommand(resourceGroupName: resourceGroupName, name: name, premierAddOnName: premierAddOnName, slot: slot, subscriptionId: subscriptionId, premierAddOn: premierAddOn)
    }
    public static func AnalyzeCustomHostname(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsAnalyzeCustomHostname {
        return AnalyzeCustomHostnameCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func AnalyzeCustomHostnameSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsAnalyzeCustomHostnameSlot {
        return AnalyzeCustomHostnameSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ApplySlotConfigToProduction(resourceGroupName: String, name: String, subscriptionId: String, slotSwapEntity: CsmSlotEntityProtocol) -> WebAppsApplySlotConfigToProduction {
        return ApplySlotConfigToProductionCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, slotSwapEntity: slotSwapEntity)
    }
    public static func ApplySlotConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, slotSwapEntity: CsmSlotEntityProtocol) -> WebAppsApplySlotConfigurationSlot {
        return ApplySlotConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, slotSwapEntity: slotSwapEntity)
    }
    public static func Backup(resourceGroupName: String, name: String, subscriptionId: String, request: BackupRequestProtocol) -> WebAppsBackup {
        return BackupCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, request: request)
    }
    public static func BackupSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, request: BackupRequestProtocol) -> WebAppsBackupSlot {
        return BackupSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, request: request)
    }
    public static func CreateDeployment(resourceGroupName: String, name: String, id: String, subscriptionId: String, deployment: DeploymentProtocol) -> WebAppsCreateDeployment {
        return CreateDeploymentCommand(resourceGroupName: resourceGroupName, name: name, id: id, subscriptionId: subscriptionId, deployment: deployment)
    }
    public static func CreateDeploymentSlot(resourceGroupName: String, name: String, id: String, slot: String, subscriptionId: String, deployment: DeploymentProtocol) -> WebAppsCreateDeploymentSlot {
        return CreateDeploymentSlotCommand(resourceGroupName: resourceGroupName, name: name, id: id, slot: slot, subscriptionId: subscriptionId, deployment: deployment)
    }
    public static func CreateFunction(resourceGroupName: String, name: String, functionName: String, subscriptionId: String, functionEnvelope: FunctionEnvelopeProtocol) -> WebAppsCreateFunction {
        return CreateFunctionCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, subscriptionId: subscriptionId, functionEnvelope: functionEnvelope)
    }
    public static func CreateInstanceFunctionSlot(resourceGroupName: String, name: String, functionName: String, slot: String, subscriptionId: String, functionEnvelope: FunctionEnvelopeProtocol) -> WebAppsCreateInstanceFunctionSlot {
        return CreateInstanceFunctionSlotCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, slot: slot, subscriptionId: subscriptionId, functionEnvelope: functionEnvelope)
    }
    public static func CreateInstanceMSDeployOperation(resourceGroupName: String, name: String, instanceId: String, subscriptionId: String, mSDeploy: MSDeployProtocol) -> WebAppsCreateInstanceMSDeployOperation {
        return CreateInstanceMSDeployOperationCommand(resourceGroupName: resourceGroupName, name: name, instanceId: instanceId, subscriptionId: subscriptionId, mSDeploy: mSDeploy)
    }
    public static func CreateInstanceMSDeployOperationSlot(resourceGroupName: String, name: String, slot: String, instanceId: String, subscriptionId: String, mSDeploy: MSDeployProtocol) -> WebAppsCreateInstanceMSDeployOperationSlot {
        return CreateInstanceMSDeployOperationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId, mSDeploy: mSDeploy)
    }
    public static func CreateMSDeployOperation(resourceGroupName: String, name: String, subscriptionId: String, mSDeploy: MSDeployProtocol) -> WebAppsCreateMSDeployOperation {
        return CreateMSDeployOperationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, mSDeploy: mSDeploy)
    }
    public static func CreateMSDeployOperationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, mSDeploy: MSDeployProtocol) -> WebAppsCreateMSDeployOperationSlot {
        return CreateMSDeployOperationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, mSDeploy: mSDeploy)
    }
    public static func CreateOrUpdate(resourceGroupName: String, name: String, subscriptionId: String, siteEnvelope: SiteProtocol) -> WebAppsCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteEnvelope: siteEnvelope)
    }
    public static func CreateOrUpdateConfiguration(resourceGroupName: String, name: String, subscriptionId: String, siteConfig: SiteConfigResourceProtocol) -> WebAppsCreateOrUpdateConfiguration {
        return CreateOrUpdateConfigurationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteConfig: siteConfig)
    }
    public static func CreateOrUpdateConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteConfig: SiteConfigResourceProtocol) -> WebAppsCreateOrUpdateConfigurationSlot {
        return CreateOrUpdateConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteConfig: siteConfig)
    }
    public static func CreateOrUpdateDomainOwnershipIdentifier(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, subscriptionId: String, domainOwnershipIdentifier: IdentifierProtocol) -> WebAppsCreateOrUpdateDomainOwnershipIdentifier {
        return CreateOrUpdateDomainOwnershipIdentifierCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, subscriptionId: subscriptionId, domainOwnershipIdentifier: domainOwnershipIdentifier)
    }
    public static func CreateOrUpdateDomainOwnershipIdentifierSlot(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, slot: String, subscriptionId: String, domainOwnershipIdentifier: IdentifierProtocol) -> WebAppsCreateOrUpdateDomainOwnershipIdentifierSlot {
        return CreateOrUpdateDomainOwnershipIdentifierSlotCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, slot: slot, subscriptionId: subscriptionId, domainOwnershipIdentifier: domainOwnershipIdentifier)
    }
    public static func CreateOrUpdateHostNameBinding(resourceGroupName: String, name: String, hostName: String, subscriptionId: String, hostNameBinding: HostNameBindingProtocol) -> WebAppsCreateOrUpdateHostNameBinding {
        return CreateOrUpdateHostNameBindingCommand(resourceGroupName: resourceGroupName, name: name, hostName: hostName, subscriptionId: subscriptionId, hostNameBinding: hostNameBinding)
    }
    public static func CreateOrUpdateHostNameBindingSlot(resourceGroupName: String, name: String, hostName: String, slot: String, subscriptionId: String, hostNameBinding: HostNameBindingProtocol) -> WebAppsCreateOrUpdateHostNameBindingSlot {
        return CreateOrUpdateHostNameBindingSlotCommand(resourceGroupName: resourceGroupName, name: name, hostName: hostName, slot: slot, subscriptionId: subscriptionId, hostNameBinding: hostNameBinding)
    }
    public static func CreateOrUpdateHybridConnection(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String, connectionEnvelope: HybridConnectionProtocol) -> WebAppsCreateOrUpdateHybridConnection {
        return CreateOrUpdateHybridConnectionCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func CreateOrUpdateHybridConnectionSlot(resourceGroupName: String, name: String, namespaceName: String, relayName: String, slot: String, subscriptionId: String, connectionEnvelope: HybridConnectionProtocol) -> WebAppsCreateOrUpdateHybridConnectionSlot {
        return CreateOrUpdateHybridConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func CreateOrUpdatePublicCertificate(resourceGroupName: String, name: String, publicCertificateName: String, subscriptionId: String, publicCertificate: PublicCertificateProtocol) -> WebAppsCreateOrUpdatePublicCertificate {
        return CreateOrUpdatePublicCertificateCommand(resourceGroupName: resourceGroupName, name: name, publicCertificateName: publicCertificateName, subscriptionId: subscriptionId, publicCertificate: publicCertificate)
    }
    public static func CreateOrUpdatePublicCertificateSlot(resourceGroupName: String, name: String, publicCertificateName: String, slot: String, subscriptionId: String, publicCertificate: PublicCertificateProtocol) -> WebAppsCreateOrUpdatePublicCertificateSlot {
        return CreateOrUpdatePublicCertificateSlotCommand(resourceGroupName: resourceGroupName, name: name, publicCertificateName: publicCertificateName, slot: slot, subscriptionId: subscriptionId, publicCertificate: publicCertificate)
    }
    public static func CreateOrUpdateRelayServiceConnection(resourceGroupName: String, name: String, entityName: String, subscriptionId: String, connectionEnvelope: RelayServiceConnectionEntityProtocol) -> WebAppsCreateOrUpdateRelayServiceConnection {
        return CreateOrUpdateRelayServiceConnectionCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func CreateOrUpdateRelayServiceConnectionSlot(resourceGroupName: String, name: String, entityName: String, slot: String, subscriptionId: String, connectionEnvelope: RelayServiceConnectionEntityProtocol) -> WebAppsCreateOrUpdateRelayServiceConnectionSlot {
        return CreateOrUpdateRelayServiceConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func CreateOrUpdateSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteEnvelope: SiteProtocol) -> WebAppsCreateOrUpdateSlot {
        return CreateOrUpdateSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteEnvelope: siteEnvelope)
    }
    public static func CreateOrUpdateSourceControl(resourceGroupName: String, name: String, subscriptionId: String, siteSourceControl: SiteSourceControlProtocol) -> WebAppsCreateOrUpdateSourceControl {
        return CreateOrUpdateSourceControlCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteSourceControl: siteSourceControl)
    }
    public static func CreateOrUpdateSourceControlSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteSourceControl: SiteSourceControlProtocol) -> WebAppsCreateOrUpdateSourceControlSlot {
        return CreateOrUpdateSourceControlSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteSourceControl: siteSourceControl)
    }
    public static func CreateOrUpdateVnetConnection(resourceGroupName: String, name: String, vnetName: String, subscriptionId: String, connectionEnvelope: VnetInfoProtocol) -> WebAppsCreateOrUpdateVnetConnection {
        return CreateOrUpdateVnetConnectionCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func CreateOrUpdateVnetConnectionGateway(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, subscriptionId: String, connectionEnvelope: VnetGatewayProtocol) -> WebAppsCreateOrUpdateVnetConnectionGateway {
        return CreateOrUpdateVnetConnectionGatewayCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func CreateOrUpdateVnetConnectionGatewaySlot(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, slot: String, subscriptionId: String, connectionEnvelope: VnetGatewayProtocol) -> WebAppsCreateOrUpdateVnetConnectionGatewaySlot {
        return CreateOrUpdateVnetConnectionGatewaySlotCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func CreateOrUpdateVnetConnectionSlot(resourceGroupName: String, name: String, vnetName: String, slot: String, subscriptionId: String, connectionEnvelope: VnetInfoProtocol) -> WebAppsCreateOrUpdateVnetConnectionSlot {
        return CreateOrUpdateVnetConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func Delete(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func DeleteBackup(resourceGroupName: String, name: String, backupId: String, subscriptionId: String) -> WebAppsDeleteBackup {
        return DeleteBackupCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, subscriptionId: subscriptionId)
    }
    public static func DeleteBackupConfiguration(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsDeleteBackupConfiguration {
        return DeleteBackupConfigurationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func DeleteBackupConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsDeleteBackupConfigurationSlot {
        return DeleteBackupConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteBackupSlot(resourceGroupName: String, name: String, backupId: String, slot: String, subscriptionId: String) -> WebAppsDeleteBackupSlot {
        return DeleteBackupSlotCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteContinuousWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsDeleteContinuousWebJob {
        return DeleteContinuousWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func DeleteContinuousWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsDeleteContinuousWebJobSlot {
        return DeleteContinuousWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteDeployment(resourceGroupName: String, name: String, id: String, subscriptionId: String) -> WebAppsDeleteDeployment {
        return DeleteDeploymentCommand(resourceGroupName: resourceGroupName, name: name, id: id, subscriptionId: subscriptionId)
    }
    public static func DeleteDeploymentSlot(resourceGroupName: String, name: String, id: String, slot: String, subscriptionId: String) -> WebAppsDeleteDeploymentSlot {
        return DeleteDeploymentSlotCommand(resourceGroupName: resourceGroupName, name: name, id: id, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteDomainOwnershipIdentifier(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, subscriptionId: String) -> WebAppsDeleteDomainOwnershipIdentifier {
        return DeleteDomainOwnershipIdentifierCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, subscriptionId: subscriptionId)
    }
    public static func DeleteDomainOwnershipIdentifierSlot(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, slot: String, subscriptionId: String) -> WebAppsDeleteDomainOwnershipIdentifierSlot {
        return DeleteDomainOwnershipIdentifierSlotCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteFunction(resourceGroupName: String, name: String, functionName: String, subscriptionId: String) -> WebAppsDeleteFunction {
        return DeleteFunctionCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, subscriptionId: subscriptionId)
    }
    public static func DeleteHostNameBinding(resourceGroupName: String, name: String, hostName: String, subscriptionId: String) -> WebAppsDeleteHostNameBinding {
        return DeleteHostNameBindingCommand(resourceGroupName: resourceGroupName, name: name, hostName: hostName, subscriptionId: subscriptionId)
    }
    public static func DeleteHostNameBindingSlot(resourceGroupName: String, name: String, slot: String, hostName: String, subscriptionId: String) -> WebAppsDeleteHostNameBindingSlot {
        return DeleteHostNameBindingSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, hostName: hostName, subscriptionId: subscriptionId)
    }
    public static func DeleteHybridConnection(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String) -> WebAppsDeleteHybridConnection {
        return DeleteHybridConnectionCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId)
    }
    public static func DeleteHybridConnectionSlot(resourceGroupName: String, name: String, namespaceName: String, relayName: String, slot: String, subscriptionId: String) -> WebAppsDeleteHybridConnectionSlot {
        return DeleteHybridConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteInstanceFunctionSlot(resourceGroupName: String, name: String, functionName: String, slot: String, subscriptionId: String) -> WebAppsDeleteInstanceFunctionSlot {
        return DeleteInstanceFunctionSlotCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteInstanceProcess(resourceGroupName: String, name: String, processId: String, instanceId: String, subscriptionId: String) -> WebAppsDeleteInstanceProcess {
        return DeleteInstanceProcessCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func DeleteInstanceProcessSlot(resourceGroupName: String, name: String, processId: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsDeleteInstanceProcessSlot {
        return DeleteInstanceProcessSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func DeletePremierAddOn(resourceGroupName: String, name: String, premierAddOnName: String, subscriptionId: String) -> WebAppsDeletePremierAddOn {
        return DeletePremierAddOnCommand(resourceGroupName: resourceGroupName, name: name, premierAddOnName: premierAddOnName, subscriptionId: subscriptionId)
    }
    public static func DeletePremierAddOnSlot(resourceGroupName: String, name: String, premierAddOnName: String, slot: String, subscriptionId: String) -> WebAppsDeletePremierAddOnSlot {
        return DeletePremierAddOnSlotCommand(resourceGroupName: resourceGroupName, name: name, premierAddOnName: premierAddOnName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteProcess(resourceGroupName: String, name: String, processId: String, subscriptionId: String) -> WebAppsDeleteProcess {
        return DeleteProcessCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, subscriptionId: subscriptionId)
    }
    public static func DeleteProcessSlot(resourceGroupName: String, name: String, processId: String, slot: String, subscriptionId: String) -> WebAppsDeleteProcessSlot {
        return DeleteProcessSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeletePublicCertificate(resourceGroupName: String, name: String, publicCertificateName: String, subscriptionId: String) -> WebAppsDeletePublicCertificate {
        return DeletePublicCertificateCommand(resourceGroupName: resourceGroupName, name: name, publicCertificateName: publicCertificateName, subscriptionId: subscriptionId)
    }
    public static func DeletePublicCertificateSlot(resourceGroupName: String, name: String, slot: String, publicCertificateName: String, subscriptionId: String) -> WebAppsDeletePublicCertificateSlot {
        return DeletePublicCertificateSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, publicCertificateName: publicCertificateName, subscriptionId: subscriptionId)
    }
    public static func DeleteRelayServiceConnection(resourceGroupName: String, name: String, entityName: String, subscriptionId: String) -> WebAppsDeleteRelayServiceConnection {
        return DeleteRelayServiceConnectionCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, subscriptionId: subscriptionId)
    }
    public static func DeleteRelayServiceConnectionSlot(resourceGroupName: String, name: String, entityName: String, slot: String, subscriptionId: String) -> WebAppsDeleteRelayServiceConnectionSlot {
        return DeleteRelayServiceConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteSiteExtension(resourceGroupName: String, name: String, siteExtensionId: String, subscriptionId: String) -> WebAppsDeleteSiteExtension {
        return DeleteSiteExtensionCommand(resourceGroupName: resourceGroupName, name: name, siteExtensionId: siteExtensionId, subscriptionId: subscriptionId)
    }
    public static func DeleteSiteExtensionSlot(resourceGroupName: String, name: String, siteExtensionId: String, slot: String, subscriptionId: String) -> WebAppsDeleteSiteExtensionSlot {
        return DeleteSiteExtensionSlotCommand(resourceGroupName: resourceGroupName, name: name, siteExtensionId: siteExtensionId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsDeleteSlot {
        return DeleteSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteSourceControl(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsDeleteSourceControl {
        return DeleteSourceControlCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func DeleteSourceControlSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsDeleteSourceControlSlot {
        return DeleteSourceControlSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteTriggeredWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsDeleteTriggeredWebJob {
        return DeleteTriggeredWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func DeleteTriggeredWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsDeleteTriggeredWebJobSlot {
        return DeleteTriggeredWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DeleteVnetConnection(resourceGroupName: String, name: String, vnetName: String, subscriptionId: String) -> WebAppsDeleteVnetConnection {
        return DeleteVnetConnectionCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, subscriptionId: subscriptionId)
    }
    public static func DeleteVnetConnectionSlot(resourceGroupName: String, name: String, vnetName: String, slot: String, subscriptionId: String) -> WebAppsDeleteVnetConnectionSlot {
        return DeleteVnetConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func DiscoverRestore(resourceGroupName: String, name: String, subscriptionId: String, request: RestoreRequestProtocol) -> WebAppsDiscoverRestore {
        return DiscoverRestoreCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, request: request)
    }
    public static func DiscoverRestoreSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, request: RestoreRequestProtocol) -> WebAppsDiscoverRestoreSlot {
        return DiscoverRestoreSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, request: request)
    }
    public static func GenerateNewSitePublishingPassword(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGenerateNewSitePublishingPassword {
        return GenerateNewSitePublishingPasswordCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GenerateNewSitePublishingPasswordSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGenerateNewSitePublishingPasswordSlot {
        return GenerateNewSitePublishingPasswordSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGet {
        return GetCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetAuthSettings(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetAuthSettings {
        return GetAuthSettingsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetAuthSettingsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetAuthSettingsSlot {
        return GetAuthSettingsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetBackupConfiguration(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetBackupConfiguration {
        return GetBackupConfigurationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetBackupConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetBackupConfigurationSlot {
        return GetBackupConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetBackupStatus(resourceGroupName: String, name: String, backupId: String, subscriptionId: String) -> WebAppsGetBackupStatus {
        return GetBackupStatusCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, subscriptionId: subscriptionId)
    }
    public static func GetBackupStatusSlot(resourceGroupName: String, name: String, backupId: String, slot: String, subscriptionId: String) -> WebAppsGetBackupStatusSlot {
        return GetBackupStatusSlotCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetConfiguration(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetConfiguration {
        return GetConfigurationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetConfigurationSlot {
        return GetConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetConfigurationSnapshot(resourceGroupName: String, name: String, snapshotId: String, subscriptionId: String) -> WebAppsGetConfigurationSnapshot {
        return GetConfigurationSnapshotCommand(resourceGroupName: resourceGroupName, name: name, snapshotId: snapshotId, subscriptionId: subscriptionId)
    }
    public static func GetConfigurationSnapshotSlot(resourceGroupName: String, name: String, snapshotId: String, slot: String, subscriptionId: String) -> WebAppsGetConfigurationSnapshotSlot {
        return GetConfigurationSnapshotSlotCommand(resourceGroupName: resourceGroupName, name: name, snapshotId: snapshotId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetContinuousWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsGetContinuousWebJob {
        return GetContinuousWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func GetContinuousWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsGetContinuousWebJobSlot {
        return GetContinuousWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetDeployment(resourceGroupName: String, name: String, id: String, subscriptionId: String) -> WebAppsGetDeployment {
        return GetDeploymentCommand(resourceGroupName: resourceGroupName, name: name, id: id, subscriptionId: subscriptionId)
    }
    public static func GetDeploymentSlot(resourceGroupName: String, name: String, id: String, slot: String, subscriptionId: String) -> WebAppsGetDeploymentSlot {
        return GetDeploymentSlotCommand(resourceGroupName: resourceGroupName, name: name, id: id, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetDiagnosticLogsConfiguration(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetDiagnosticLogsConfiguration {
        return GetDiagnosticLogsConfigurationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetDiagnosticLogsConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetDiagnosticLogsConfigurationSlot {
        return GetDiagnosticLogsConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetDomainOwnershipIdentifier(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, subscriptionId: String) -> WebAppsGetDomainOwnershipIdentifier {
        return GetDomainOwnershipIdentifierCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, subscriptionId: subscriptionId)
    }
    public static func GetDomainOwnershipIdentifierSlot(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, slot: String, subscriptionId: String) -> WebAppsGetDomainOwnershipIdentifierSlot {
        return GetDomainOwnershipIdentifierSlotCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetFunction(resourceGroupName: String, name: String, functionName: String, subscriptionId: String) -> WebAppsGetFunction {
        return GetFunctionCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, subscriptionId: subscriptionId)
    }
    public static func GetFunctionsAdminToken(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetFunctionsAdminToken {
        return GetFunctionsAdminTokenCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetFunctionsAdminTokenSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetFunctionsAdminTokenSlot {
        return GetFunctionsAdminTokenSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetHostNameBinding(resourceGroupName: String, name: String, hostName: String, subscriptionId: String) -> WebAppsGetHostNameBinding {
        return GetHostNameBindingCommand(resourceGroupName: resourceGroupName, name: name, hostName: hostName, subscriptionId: subscriptionId)
    }
    public static func GetHostNameBindingSlot(resourceGroupName: String, name: String, slot: String, hostName: String, subscriptionId: String) -> WebAppsGetHostNameBindingSlot {
        return GetHostNameBindingSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, hostName: hostName, subscriptionId: subscriptionId)
    }
    public static func GetHybridConnection(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String) -> WebAppsGetHybridConnection {
        return GetHybridConnectionCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId)
    }
    public static func GetHybridConnectionSlot(resourceGroupName: String, name: String, namespaceName: String, relayName: String, slot: String, subscriptionId: String) -> WebAppsGetHybridConnectionSlot {
        return GetHybridConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetInstanceFunctionSlot(resourceGroupName: String, name: String, functionName: String, slot: String, subscriptionId: String) -> WebAppsGetInstanceFunctionSlot {
        return GetInstanceFunctionSlotCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetInstanceMSDeployLog(resourceGroupName: String, name: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceMSDeployLog {
        return GetInstanceMSDeployLogCommand(resourceGroupName: resourceGroupName, name: name, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceMSDeployLogSlot(resourceGroupName: String, name: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceMSDeployLogSlot {
        return GetInstanceMSDeployLogSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceMsDeployStatus(resourceGroupName: String, name: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceMsDeployStatus {
        return GetInstanceMsDeployStatusCommand(resourceGroupName: resourceGroupName, name: name, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceMsDeployStatusSlot(resourceGroupName: String, name: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceMsDeployStatusSlot {
        return GetInstanceMsDeployStatusSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcess(resourceGroupName: String, name: String, processId: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcess {
        return GetInstanceProcessCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcessDump(resourceGroupName: String, name: String, processId: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcessDump {
        return GetInstanceProcessDumpCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcessDumpSlot(resourceGroupName: String, name: String, processId: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcessDumpSlot {
        return GetInstanceProcessDumpSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcessModule(resourceGroupName: String, name: String, processId: String, baseAddress: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcessModule {
        return GetInstanceProcessModuleCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, baseAddress: baseAddress, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcessModuleSlot(resourceGroupName: String, name: String, processId: String, baseAddress: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcessModuleSlot {
        return GetInstanceProcessModuleSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, baseAddress: baseAddress, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcessSlot(resourceGroupName: String, name: String, processId: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcessSlot {
        return GetInstanceProcessSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcessThread(resourceGroupName: String, name: String, processId: String, threadId: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcessThread {
        return GetInstanceProcessThreadCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, threadId: threadId, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetInstanceProcessThreadSlot(resourceGroupName: String, name: String, processId: String, threadId: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsGetInstanceProcessThreadSlot {
        return GetInstanceProcessThreadSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, threadId: threadId, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func GetMigrateMySqlStatus(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetMigrateMySqlStatus {
        return GetMigrateMySqlStatusCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetMigrateMySqlStatusSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetMigrateMySqlStatusSlot {
        return GetMigrateMySqlStatusSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetMSDeployLog(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetMSDeployLog {
        return GetMSDeployLogCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetMSDeployLogSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetMSDeployLogSlot {
        return GetMSDeployLogSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetMSDeployStatus(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetMSDeployStatus {
        return GetMSDeployStatusCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetMSDeployStatusSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetMSDeployStatusSlot {
        return GetMSDeployStatusSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetPremierAddOn(resourceGroupName: String, name: String, premierAddOnName: String, subscriptionId: String) -> WebAppsGetPremierAddOn {
        return GetPremierAddOnCommand(resourceGroupName: resourceGroupName, name: name, premierAddOnName: premierAddOnName, subscriptionId: subscriptionId)
    }
    public static func GetPremierAddOnSlot(resourceGroupName: String, name: String, premierAddOnName: String, slot: String, subscriptionId: String) -> WebAppsGetPremierAddOnSlot {
        return GetPremierAddOnSlotCommand(resourceGroupName: resourceGroupName, name: name, premierAddOnName: premierAddOnName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetProcess(resourceGroupName: String, name: String, processId: String, subscriptionId: String) -> WebAppsGetProcess {
        return GetProcessCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, subscriptionId: subscriptionId)
    }
    public static func GetProcessDump(resourceGroupName: String, name: String, processId: String, subscriptionId: String) -> WebAppsGetProcessDump {
        return GetProcessDumpCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, subscriptionId: subscriptionId)
    }
    public static func GetProcessDumpSlot(resourceGroupName: String, name: String, processId: String, slot: String, subscriptionId: String) -> WebAppsGetProcessDumpSlot {
        return GetProcessDumpSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetProcessModule(resourceGroupName: String, name: String, processId: String, baseAddress: String, subscriptionId: String) -> WebAppsGetProcessModule {
        return GetProcessModuleCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, baseAddress: baseAddress, subscriptionId: subscriptionId)
    }
    public static func GetProcessModuleSlot(resourceGroupName: String, name: String, processId: String, baseAddress: String, slot: String, subscriptionId: String) -> WebAppsGetProcessModuleSlot {
        return GetProcessModuleSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, baseAddress: baseAddress, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetProcessSlot(resourceGroupName: String, name: String, processId: String, slot: String, subscriptionId: String) -> WebAppsGetProcessSlot {
        return GetProcessSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetProcessThread(resourceGroupName: String, name: String, processId: String, threadId: String, subscriptionId: String) -> WebAppsGetProcessThread {
        return GetProcessThreadCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, threadId: threadId, subscriptionId: subscriptionId)
    }
    public static func GetProcessThreadSlot(resourceGroupName: String, name: String, processId: String, threadId: String, slot: String, subscriptionId: String) -> WebAppsGetProcessThreadSlot {
        return GetProcessThreadSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, threadId: threadId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetPublicCertificate(resourceGroupName: String, name: String, publicCertificateName: String, subscriptionId: String) -> WebAppsGetPublicCertificate {
        return GetPublicCertificateCommand(resourceGroupName: resourceGroupName, name: name, publicCertificateName: publicCertificateName, subscriptionId: subscriptionId)
    }
    public static func GetPublicCertificateSlot(resourceGroupName: String, name: String, slot: String, publicCertificateName: String, subscriptionId: String) -> WebAppsGetPublicCertificateSlot {
        return GetPublicCertificateSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, publicCertificateName: publicCertificateName, subscriptionId: subscriptionId)
    }
    public static func GetRelayServiceConnection(resourceGroupName: String, name: String, entityName: String, subscriptionId: String) -> WebAppsGetRelayServiceConnection {
        return GetRelayServiceConnectionCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, subscriptionId: subscriptionId)
    }
    public static func GetRelayServiceConnectionSlot(resourceGroupName: String, name: String, entityName: String, slot: String, subscriptionId: String) -> WebAppsGetRelayServiceConnectionSlot {
        return GetRelayServiceConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetSiteExtension(resourceGroupName: String, name: String, siteExtensionId: String, subscriptionId: String) -> WebAppsGetSiteExtension {
        return GetSiteExtensionCommand(resourceGroupName: resourceGroupName, name: name, siteExtensionId: siteExtensionId, subscriptionId: subscriptionId)
    }
    public static func GetSiteExtensionSlot(resourceGroupName: String, name: String, siteExtensionId: String, slot: String, subscriptionId: String) -> WebAppsGetSiteExtensionSlot {
        return GetSiteExtensionSlotCommand(resourceGroupName: resourceGroupName, name: name, siteExtensionId: siteExtensionId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetSitePhpErrorLogFlag(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetSitePhpErrorLogFlag {
        return GetSitePhpErrorLogFlagCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetSitePhpErrorLogFlagSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetSitePhpErrorLogFlagSlot {
        return GetSitePhpErrorLogFlagSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetSlot {
        return GetSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetSourceControl(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetSourceControl {
        return GetSourceControlCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetSourceControlSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetSourceControlSlot {
        return GetSourceControlSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetTriggeredWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsGetTriggeredWebJob {
        return GetTriggeredWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func GetTriggeredWebJobHistory(resourceGroupName: String, name: String, webJobName: String, id: String, subscriptionId: String) -> WebAppsGetTriggeredWebJobHistory {
        return GetTriggeredWebJobHistoryCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, id: id, subscriptionId: subscriptionId)
    }
    public static func GetTriggeredWebJobHistorySlot(resourceGroupName: String, name: String, webJobName: String, id: String, slot: String, subscriptionId: String) -> WebAppsGetTriggeredWebJobHistorySlot {
        return GetTriggeredWebJobHistorySlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, id: id, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetTriggeredWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsGetTriggeredWebJobSlot {
        return GetTriggeredWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetVnetConnection(resourceGroupName: String, name: String, vnetName: String, subscriptionId: String) -> WebAppsGetVnetConnection {
        return GetVnetConnectionCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, subscriptionId: subscriptionId)
    }
    public static func GetVnetConnectionGateway(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, subscriptionId: String) -> WebAppsGetVnetConnectionGateway {
        return GetVnetConnectionGatewayCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, subscriptionId: subscriptionId)
    }
    public static func GetVnetConnectionGatewaySlot(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, slot: String, subscriptionId: String) -> WebAppsGetVnetConnectionGatewaySlot {
        return GetVnetConnectionGatewaySlotCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetVnetConnectionSlot(resourceGroupName: String, name: String, vnetName: String, slot: String, subscriptionId: String) -> WebAppsGetVnetConnectionSlot {
        return GetVnetConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsGetWebJob {
        return GetWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func GetWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsGetWebJobSlot {
        return GetWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetWebSiteContainerLogs(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetWebSiteContainerLogs {
        return GetWebSiteContainerLogsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetWebSiteContainerLogsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetWebSiteContainerLogsSlot {
        return GetWebSiteContainerLogsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func GetWebSiteContainerLogsZip(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsGetWebSiteContainerLogsZip {
        return GetWebSiteContainerLogsZipCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetWebSiteContainerLogsZipSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsGetWebSiteContainerLogsZipSlot {
        return GetWebSiteContainerLogsZipSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func InstallSiteExtension(resourceGroupName: String, name: String, siteExtensionId: String, subscriptionId: String) -> WebAppsInstallSiteExtension {
        return InstallSiteExtensionCommand(resourceGroupName: resourceGroupName, name: name, siteExtensionId: siteExtensionId, subscriptionId: subscriptionId)
    }
    public static func InstallSiteExtensionSlot(resourceGroupName: String, name: String, siteExtensionId: String, slot: String, subscriptionId: String) -> WebAppsInstallSiteExtensionSlot {
        return InstallSiteExtensionSlotCommand(resourceGroupName: resourceGroupName, name: name, siteExtensionId: siteExtensionId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func IsCloneable(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsIsCloneable {
        return IsCloneableCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func IsCloneableSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsIsCloneableSlot {
        return IsCloneableSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func List(subscriptionId: String) -> WebAppsList {
        return ListCommand(subscriptionId: subscriptionId)
    }
    public static func ListApplicationSettings(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListApplicationSettings {
        return ListApplicationSettingsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListApplicationSettingsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListApplicationSettingsSlot {
        return ListApplicationSettingsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListBackups(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListBackups {
        return ListBackupsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListBackupsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListBackupsSlot {
        return ListBackupsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListBackupStatusSecrets(resourceGroupName: String, name: String, backupId: String, subscriptionId: String, request: BackupRequestProtocol) -> WebAppsListBackupStatusSecrets {
        return ListBackupStatusSecretsCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, subscriptionId: subscriptionId, request: request)
    }
    public static func ListBackupStatusSecretsSlot(resourceGroupName: String, name: String, backupId: String, slot: String, subscriptionId: String, request: BackupRequestProtocol) -> WebAppsListBackupStatusSecretsSlot {
        return ListBackupStatusSecretsSlotCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, slot: slot, subscriptionId: subscriptionId, request: request)
    }
    public static func ListByResourceGroup(resourceGroupName: String, subscriptionId: String) -> WebAppsListByResourceGroup {
        return ListByResourceGroupCommand(resourceGroupName: resourceGroupName, subscriptionId: subscriptionId)
    }
    public static func ListConfigurations(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListConfigurations {
        return ListConfigurationsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListConfigurationSnapshotInfo(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListConfigurationSnapshotInfo {
        return ListConfigurationSnapshotInfoCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListConfigurationSnapshotInfoSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListConfigurationSnapshotInfoSlot {
        return ListConfigurationSnapshotInfoSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListConfigurationsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListConfigurationsSlot {
        return ListConfigurationsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListConnectionStrings(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListConnectionStrings {
        return ListConnectionStringsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListConnectionStringsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListConnectionStringsSlot {
        return ListConnectionStringsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListContinuousWebJobs(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListContinuousWebJobs {
        return ListContinuousWebJobsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListContinuousWebJobsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListContinuousWebJobsSlot {
        return ListContinuousWebJobsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListDeploymentLog(resourceGroupName: String, name: String, id: String, subscriptionId: String) -> WebAppsListDeploymentLog {
        return ListDeploymentLogCommand(resourceGroupName: resourceGroupName, name: name, id: id, subscriptionId: subscriptionId)
    }
    public static func ListDeploymentLogSlot(resourceGroupName: String, name: String, id: String, slot: String, subscriptionId: String) -> WebAppsListDeploymentLogSlot {
        return ListDeploymentLogSlotCommand(resourceGroupName: resourceGroupName, name: name, id: id, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListDeployments(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListDeployments {
        return ListDeploymentsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListDeploymentsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListDeploymentsSlot {
        return ListDeploymentsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListDomainOwnershipIdentifiers(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListDomainOwnershipIdentifiers {
        return ListDomainOwnershipIdentifiersCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListDomainOwnershipIdentifiersSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListDomainOwnershipIdentifiersSlot {
        return ListDomainOwnershipIdentifiersSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListFunctions(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListFunctions {
        return ListFunctionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListFunctionSecrets(resourceGroupName: String, name: String, functionName: String, subscriptionId: String) -> WebAppsListFunctionSecrets {
        return ListFunctionSecretsCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, subscriptionId: subscriptionId)
    }
    public static func ListFunctionSecretsSlot(resourceGroupName: String, name: String, functionName: String, slot: String, subscriptionId: String) -> WebAppsListFunctionSecretsSlot {
        return ListFunctionSecretsSlotCommand(resourceGroupName: resourceGroupName, name: name, functionName: functionName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListHostNameBindings(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListHostNameBindings {
        return ListHostNameBindingsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListHostNameBindingsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListHostNameBindingsSlot {
        return ListHostNameBindingsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListHybridConnectionKeys(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String) -> WebAppsListHybridConnectionKeys {
        return ListHybridConnectionKeysCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId)
    }
    public static func ListHybridConnectionKeysSlot(resourceGroupName: String, name: String, namespaceName: String, relayName: String, slot: String, subscriptionId: String) -> WebAppsListHybridConnectionKeysSlot {
        return ListHybridConnectionKeysSlotCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListHybridConnections(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListHybridConnections {
        return ListHybridConnectionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListHybridConnectionsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListHybridConnectionsSlot {
        return ListHybridConnectionsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListInstanceFunctionsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListInstanceFunctionsSlot {
        return ListInstanceFunctionsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListInstanceIdentifiers(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListInstanceIdentifiers {
        return ListInstanceIdentifiersCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListInstanceIdentifiersSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListInstanceIdentifiersSlot {
        return ListInstanceIdentifiersSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListInstanceProcesses(resourceGroupName: String, name: String, instanceId: String, subscriptionId: String) -> WebAppsListInstanceProcesses {
        return ListInstanceProcessesCommand(resourceGroupName: resourceGroupName, name: name, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func ListInstanceProcessesSlot(resourceGroupName: String, name: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsListInstanceProcessesSlot {
        return ListInstanceProcessesSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func ListInstanceProcessModules(resourceGroupName: String, name: String, processId: String, instanceId: String, subscriptionId: String) -> WebAppsListInstanceProcessModules {
        return ListInstanceProcessModulesCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func ListInstanceProcessModulesSlot(resourceGroupName: String, name: String, processId: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsListInstanceProcessModulesSlot {
        return ListInstanceProcessModulesSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func ListInstanceProcessThreads(resourceGroupName: String, name: String, processId: String, instanceId: String, subscriptionId: String) -> WebAppsListInstanceProcessThreads {
        return ListInstanceProcessThreadsCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func ListInstanceProcessThreadsSlot(resourceGroupName: String, name: String, processId: String, slot: String, instanceId: String, subscriptionId: String) -> WebAppsListInstanceProcessThreadsSlot {
        return ListInstanceProcessThreadsSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, instanceId: instanceId, subscriptionId: subscriptionId)
    }
    public static func ListMetadata(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListMetadata {
        return ListMetadataCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListMetadataSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListMetadataSlot {
        return ListMetadataSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListMetricDefinitions(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListMetricDefinitions {
        return ListMetricDefinitionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListMetricDefinitionsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListMetricDefinitionsSlot {
        return ListMetricDefinitionsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListMetrics(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListMetrics {
        return ListMetricsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListMetricsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListMetricsSlot {
        return ListMetricsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListNetworkFeatures(resourceGroupName: String, name: String, view: String, subscriptionId: String) -> WebAppsListNetworkFeatures {
        return ListNetworkFeaturesCommand(resourceGroupName: resourceGroupName, name: name, view: view, subscriptionId: subscriptionId)
    }
    public static func ListNetworkFeaturesSlot(resourceGroupName: String, name: String, view: String, slot: String, subscriptionId: String) -> WebAppsListNetworkFeaturesSlot {
        return ListNetworkFeaturesSlotCommand(resourceGroupName: resourceGroupName, name: name, view: view, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListPerfMonCounters(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListPerfMonCounters {
        return ListPerfMonCountersCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListPerfMonCountersSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListPerfMonCountersSlot {
        return ListPerfMonCountersSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListPremierAddOns(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListPremierAddOns {
        return ListPremierAddOnsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListPremierAddOnsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListPremierAddOnsSlot {
        return ListPremierAddOnsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListProcesses(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListProcesses {
        return ListProcessesCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListProcessesSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListProcessesSlot {
        return ListProcessesSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListProcessModules(resourceGroupName: String, name: String, processId: String, subscriptionId: String) -> WebAppsListProcessModules {
        return ListProcessModulesCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, subscriptionId: subscriptionId)
    }
    public static func ListProcessModulesSlot(resourceGroupName: String, name: String, processId: String, slot: String, subscriptionId: String) -> WebAppsListProcessModulesSlot {
        return ListProcessModulesSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListProcessThreads(resourceGroupName: String, name: String, processId: String, subscriptionId: String) -> WebAppsListProcessThreads {
        return ListProcessThreadsCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, subscriptionId: subscriptionId)
    }
    public static func ListProcessThreadsSlot(resourceGroupName: String, name: String, processId: String, slot: String, subscriptionId: String) -> WebAppsListProcessThreadsSlot {
        return ListProcessThreadsSlotCommand(resourceGroupName: resourceGroupName, name: name, processId: processId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListPublicCertificates(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListPublicCertificates {
        return ListPublicCertificatesCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListPublicCertificatesSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListPublicCertificatesSlot {
        return ListPublicCertificatesSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListPublishingCredentials(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListPublishingCredentials {
        return ListPublishingCredentialsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListPublishingCredentialsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListPublishingCredentialsSlot {
        return ListPublishingCredentialsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListPublishingProfileXmlWithSecrets(resourceGroupName: String, name: String, subscriptionId: String, publishingProfileOptions: CsmPublishingProfileOptionsProtocol) -> WebAppsListPublishingProfileXmlWithSecrets {
        return ListPublishingProfileXmlWithSecretsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, publishingProfileOptions: publishingProfileOptions)
    }
    public static func ListPublishingProfileXmlWithSecretsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, publishingProfileOptions: CsmPublishingProfileOptionsProtocol) -> WebAppsListPublishingProfileXmlWithSecretsSlot {
        return ListPublishingProfileXmlWithSecretsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, publishingProfileOptions: publishingProfileOptions)
    }
    public static func ListRelayServiceConnections(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListRelayServiceConnections {
        return ListRelayServiceConnectionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListRelayServiceConnectionsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListRelayServiceConnectionsSlot {
        return ListRelayServiceConnectionsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListSiteExtensions(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListSiteExtensions {
        return ListSiteExtensionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListSiteExtensionsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListSiteExtensionsSlot {
        return ListSiteExtensionsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListSitePushSettings(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListSitePushSettings {
        return ListSitePushSettingsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListSitePushSettingsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListSitePushSettingsSlot {
        return ListSitePushSettingsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListSlotConfigurationNames(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListSlotConfigurationNames {
        return ListSlotConfigurationNamesCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListSlotDifferencesFromProduction(resourceGroupName: String, name: String, subscriptionId: String, slotSwapEntity: CsmSlotEntityProtocol) -> WebAppsListSlotDifferencesFromProduction {
        return ListSlotDifferencesFromProductionCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, slotSwapEntity: slotSwapEntity)
    }
    public static func ListSlotDifferencesSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, slotSwapEntity: CsmSlotEntityProtocol) -> WebAppsListSlotDifferencesSlot {
        return ListSlotDifferencesSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, slotSwapEntity: slotSwapEntity)
    }
    public static func ListSlots(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListSlots {
        return ListSlotsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListSnapshots(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListSnapshots {
        return ListSnapshotsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListSnapshotsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListSnapshotsSlot {
        return ListSnapshotsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListSyncFunctionTriggers(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListSyncFunctionTriggers {
        return ListSyncFunctionTriggersCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListSyncFunctionTriggersSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListSyncFunctionTriggersSlot {
        return ListSyncFunctionTriggersSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListTriggeredWebJobHistory(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsListTriggeredWebJobHistory {
        return ListTriggeredWebJobHistoryCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func ListTriggeredWebJobHistorySlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsListTriggeredWebJobHistorySlot {
        return ListTriggeredWebJobHistorySlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListTriggeredWebJobs(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListTriggeredWebJobs {
        return ListTriggeredWebJobsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListTriggeredWebJobsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListTriggeredWebJobsSlot {
        return ListTriggeredWebJobsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListUsages(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListUsages {
        return ListUsagesCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListUsagesSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListUsagesSlot {
        return ListUsagesSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListVnetConnections(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListVnetConnections {
        return ListVnetConnectionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListVnetConnectionsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListVnetConnectionsSlot {
        return ListVnetConnectionsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func ListWebJobs(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsListWebJobs {
        return ListWebJobsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListWebJobsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsListWebJobsSlot {
        return ListWebJobsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func MigrateMySql(resourceGroupName: String, name: String, subscriptionId: String, migrationRequestEnvelope: MigrateMySqlRequestProtocol) -> WebAppsMigrateMySql {
        return MigrateMySqlCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, migrationRequestEnvelope: migrationRequestEnvelope)
    }
    public static func MigrateStorage(resourceGroupName: String, name: String, subscriptionId: String, subscriptionName: String, migrationOptions: StorageMigrationOptionsProtocol) -> WebAppsMigrateStorage {
        return MigrateStorageCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, subscriptionName: subscriptionName, migrationOptions: migrationOptions)
    }
    public static func Recover(resourceGroupName: String, name: String, subscriptionId: String, recoveryEntity: SnapshotRecoveryRequestProtocol) -> WebAppsRecover {
        return RecoverCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, recoveryEntity: recoveryEntity)
    }
    public static func RecoverSiteConfigurationSnapshot(resourceGroupName: String, name: String, snapshotId: String, subscriptionId: String) -> WebAppsRecoverSiteConfigurationSnapshot {
        return RecoverSiteConfigurationSnapshotCommand(resourceGroupName: resourceGroupName, name: name, snapshotId: snapshotId, subscriptionId: subscriptionId)
    }
    public static func RecoverSiteConfigurationSnapshotSlot(resourceGroupName: String, name: String, snapshotId: String, slot: String, subscriptionId: String) -> WebAppsRecoverSiteConfigurationSnapshotSlot {
        return RecoverSiteConfigurationSnapshotSlotCommand(resourceGroupName: resourceGroupName, name: name, snapshotId: snapshotId, slot: slot, subscriptionId: subscriptionId)
    }
    public static func RecoverSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, recoveryEntity: SnapshotRecoveryRequestProtocol) -> WebAppsRecoverSlot {
        return RecoverSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, recoveryEntity: recoveryEntity)
    }
    public static func ResetProductionSlotConfig(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsResetProductionSlotConfig {
        return ResetProductionSlotConfigCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ResetSlotConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsResetSlotConfigurationSlot {
        return ResetSlotConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func Restart(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsRestart {
        return RestartCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func RestartSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsRestartSlot {
        return RestartSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func Restore(resourceGroupName: String, name: String, backupId: String, subscriptionId: String, request: RestoreRequestProtocol) -> WebAppsRestore {
        return RestoreCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, subscriptionId: subscriptionId, request: request)
    }
    public static func RestoreSlot(resourceGroupName: String, name: String, backupId: String, slot: String, subscriptionId: String, request: RestoreRequestProtocol) -> WebAppsRestoreSlot {
        return RestoreSlotCommand(resourceGroupName: resourceGroupName, name: name, backupId: backupId, slot: slot, subscriptionId: subscriptionId, request: request)
    }
    public static func RunTriggeredWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsRunTriggeredWebJob {
        return RunTriggeredWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func RunTriggeredWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsRunTriggeredWebJobSlot {
        return RunTriggeredWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func Start(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsStart {
        return StartCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func StartContinuousWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsStartContinuousWebJob {
        return StartContinuousWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func StartContinuousWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsStartContinuousWebJobSlot {
        return StartContinuousWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func StartSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsStartSlot {
        return StartSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func StartWebSiteNetworkTrace(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsStartWebSiteNetworkTrace {
        return StartWebSiteNetworkTraceCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func StartWebSiteNetworkTraceSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsStartWebSiteNetworkTraceSlot {
        return StartWebSiteNetworkTraceSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func Stop(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsStop {
        return StopCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func StopContinuousWebJob(resourceGroupName: String, name: String, webJobName: String, subscriptionId: String) -> WebAppsStopContinuousWebJob {
        return StopContinuousWebJobCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, subscriptionId: subscriptionId)
    }
    public static func StopContinuousWebJobSlot(resourceGroupName: String, name: String, webJobName: String, slot: String, subscriptionId: String) -> WebAppsStopContinuousWebJobSlot {
        return StopContinuousWebJobSlotCommand(resourceGroupName: resourceGroupName, name: name, webJobName: webJobName, slot: slot, subscriptionId: subscriptionId)
    }
    public static func StopSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsStopSlot {
        return StopSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func StopWebSiteNetworkTrace(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsStopWebSiteNetworkTrace {
        return StopWebSiteNetworkTraceCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func StopWebSiteNetworkTraceSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsStopWebSiteNetworkTraceSlot {
        return StopWebSiteNetworkTraceSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func SwapSlotSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, slotSwapEntity: CsmSlotEntityProtocol) -> WebAppsSwapSlotSlot {
        return SwapSlotSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, slotSwapEntity: slotSwapEntity)
    }
    public static func SwapSlotWithProduction(resourceGroupName: String, name: String, subscriptionId: String, slotSwapEntity: CsmSlotEntityProtocol) -> WebAppsSwapSlotWithProduction {
        return SwapSlotWithProductionCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, slotSwapEntity: slotSwapEntity)
    }
    public static func SyncFunctionTriggers(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsSyncFunctionTriggers {
        return SyncFunctionTriggersCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func SyncFunctionTriggersSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsSyncFunctionTriggersSlot {
        return SyncFunctionTriggersSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func SyncRepository(resourceGroupName: String, name: String, subscriptionId: String) -> WebAppsSyncRepository {
        return SyncRepositoryCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func SyncRepositorySlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String) -> WebAppsSyncRepositorySlot {
        return SyncRepositorySlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId)
    }
    public static func Update(resourceGroupName: String, name: String, subscriptionId: String, siteEnvelope: SitePatchResourceProtocol) -> WebAppsUpdate {
        return UpdateCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteEnvelope: siteEnvelope)
    }
    public static func UpdateApplicationSettings(resourceGroupName: String, name: String, subscriptionId: String, appSettings: StringDictionaryProtocol) -> WebAppsUpdateApplicationSettings {
        return UpdateApplicationSettingsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, appSettings: appSettings)
    }
    public static func UpdateApplicationSettingsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, appSettings: StringDictionaryProtocol) -> WebAppsUpdateApplicationSettingsSlot {
        return UpdateApplicationSettingsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, appSettings: appSettings)
    }
    public static func UpdateAuthSettings(resourceGroupName: String, name: String, subscriptionId: String, siteAuthSettings: SiteAuthSettingsProtocol) -> WebAppsUpdateAuthSettings {
        return UpdateAuthSettingsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteAuthSettings: siteAuthSettings)
    }
    public static func UpdateAuthSettingsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteAuthSettings: SiteAuthSettingsProtocol) -> WebAppsUpdateAuthSettingsSlot {
        return UpdateAuthSettingsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteAuthSettings: siteAuthSettings)
    }
    public static func UpdateBackupConfiguration(resourceGroupName: String, name: String, subscriptionId: String, request: BackupRequestProtocol) -> WebAppsUpdateBackupConfiguration {
        return UpdateBackupConfigurationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, request: request)
    }
    public static func UpdateBackupConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, request: BackupRequestProtocol) -> WebAppsUpdateBackupConfigurationSlot {
        return UpdateBackupConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, request: request)
    }
    public static func UpdateConfiguration(resourceGroupName: String, name: String, subscriptionId: String, siteConfig: SiteConfigResourceProtocol) -> WebAppsUpdateConfiguration {
        return UpdateConfigurationCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteConfig: siteConfig)
    }
    public static func UpdateConfigurationSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteConfig: SiteConfigResourceProtocol) -> WebAppsUpdateConfigurationSlot {
        return UpdateConfigurationSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteConfig: siteConfig)
    }
    public static func UpdateConnectionStrings(resourceGroupName: String, name: String, subscriptionId: String, connectionStrings: ConnectionStringDictionaryProtocol) -> WebAppsUpdateConnectionStrings {
        return UpdateConnectionStringsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, connectionStrings: connectionStrings)
    }
    public static func UpdateConnectionStringsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, connectionStrings: ConnectionStringDictionaryProtocol) -> WebAppsUpdateConnectionStringsSlot {
        return UpdateConnectionStringsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, connectionStrings: connectionStrings)
    }
    public static func UpdateDiagnosticLogsConfig(resourceGroupName: String, name: String, subscriptionId: String, siteLogsConfig: SiteLogsConfigProtocol) -> WebAppsUpdateDiagnosticLogsConfig {
        return UpdateDiagnosticLogsConfigCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteLogsConfig: siteLogsConfig)
    }
    public static func UpdateDiagnosticLogsConfigSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteLogsConfig: SiteLogsConfigProtocol) -> WebAppsUpdateDiagnosticLogsConfigSlot {
        return UpdateDiagnosticLogsConfigSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteLogsConfig: siteLogsConfig)
    }
    public static func UpdateDomainOwnershipIdentifier(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, subscriptionId: String, domainOwnershipIdentifier: IdentifierProtocol) -> WebAppsUpdateDomainOwnershipIdentifier {
        return UpdateDomainOwnershipIdentifierCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, subscriptionId: subscriptionId, domainOwnershipIdentifier: domainOwnershipIdentifier)
    }
    public static func UpdateDomainOwnershipIdentifierSlot(resourceGroupName: String, name: String, domainOwnershipIdentifierName: String, slot: String, subscriptionId: String, domainOwnershipIdentifier: IdentifierProtocol) -> WebAppsUpdateDomainOwnershipIdentifierSlot {
        return UpdateDomainOwnershipIdentifierSlotCommand(resourceGroupName: resourceGroupName, name: name, domainOwnershipIdentifierName: domainOwnershipIdentifierName, slot: slot, subscriptionId: subscriptionId, domainOwnershipIdentifier: domainOwnershipIdentifier)
    }
    public static func UpdateHybridConnection(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String, connectionEnvelope: HybridConnectionProtocol) -> WebAppsUpdateHybridConnection {
        return UpdateHybridConnectionCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateHybridConnectionSlot(resourceGroupName: String, name: String, namespaceName: String, relayName: String, slot: String, subscriptionId: String, connectionEnvelope: HybridConnectionProtocol) -> WebAppsUpdateHybridConnectionSlot {
        return UpdateHybridConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateMetadata(resourceGroupName: String, name: String, subscriptionId: String, metadata: StringDictionaryProtocol) -> WebAppsUpdateMetadata {
        return UpdateMetadataCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, metadata: metadata)
    }
    public static func UpdateMetadataSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, metadata: StringDictionaryProtocol) -> WebAppsUpdateMetadataSlot {
        return UpdateMetadataSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, metadata: metadata)
    }
    public static func UpdateRelayServiceConnection(resourceGroupName: String, name: String, entityName: String, subscriptionId: String, connectionEnvelope: RelayServiceConnectionEntityProtocol) -> WebAppsUpdateRelayServiceConnection {
        return UpdateRelayServiceConnectionCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateRelayServiceConnectionSlot(resourceGroupName: String, name: String, entityName: String, slot: String, subscriptionId: String, connectionEnvelope: RelayServiceConnectionEntityProtocol) -> WebAppsUpdateRelayServiceConnectionSlot {
        return UpdateRelayServiceConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, entityName: entityName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateSitePushSettings(resourceGroupName: String, name: String, subscriptionId: String, pushSettings: PushSettingsProtocol) -> WebAppsUpdateSitePushSettings {
        return UpdateSitePushSettingsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, pushSettings: pushSettings)
    }
    public static func UpdateSitePushSettingsSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, pushSettings: PushSettingsProtocol) -> WebAppsUpdateSitePushSettingsSlot {
        return UpdateSitePushSettingsSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, pushSettings: pushSettings)
    }
    public static func UpdateSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteEnvelope: SitePatchResourceProtocol) -> WebAppsUpdateSlot {
        return UpdateSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteEnvelope: siteEnvelope)
    }
    public static func UpdateSlotConfigurationNames(resourceGroupName: String, name: String, subscriptionId: String, slotConfigNames: SlotConfigNamesResourceProtocol) -> WebAppsUpdateSlotConfigurationNames {
        return UpdateSlotConfigurationNamesCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, slotConfigNames: slotConfigNames)
    }
    public static func UpdateSourceControl(resourceGroupName: String, name: String, subscriptionId: String, siteSourceControl: SiteSourceControlProtocol) -> WebAppsUpdateSourceControl {
        return UpdateSourceControlCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, siteSourceControl: siteSourceControl)
    }
    public static func UpdateSourceControlSlot(resourceGroupName: String, name: String, slot: String, subscriptionId: String, siteSourceControl: SiteSourceControlProtocol) -> WebAppsUpdateSourceControlSlot {
        return UpdateSourceControlSlotCommand(resourceGroupName: resourceGroupName, name: name, slot: slot, subscriptionId: subscriptionId, siteSourceControl: siteSourceControl)
    }
    public static func UpdateVnetConnection(resourceGroupName: String, name: String, vnetName: String, subscriptionId: String, connectionEnvelope: VnetInfoProtocol) -> WebAppsUpdateVnetConnection {
        return UpdateVnetConnectionCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateVnetConnectionGateway(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, subscriptionId: String, connectionEnvelope: VnetGatewayProtocol) -> WebAppsUpdateVnetConnectionGateway {
        return UpdateVnetConnectionGatewayCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateVnetConnectionGatewaySlot(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, slot: String, subscriptionId: String, connectionEnvelope: VnetGatewayProtocol) -> WebAppsUpdateVnetConnectionGatewaySlot {
        return UpdateVnetConnectionGatewaySlotCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateVnetConnectionSlot(resourceGroupName: String, name: String, vnetName: String, slot: String, subscriptionId: String, connectionEnvelope: VnetInfoProtocol) -> WebAppsUpdateVnetConnectionSlot {
        return UpdateVnetConnectionSlotCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, slot: slot, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
}
}
