// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// AppServicePlans is the webSite Management Client
import Foundation
import azureSwiftRuntime
extension Commands {
public struct AppServicePlans {
    public static func CreateOrUpdate(resourceGroupName: String, name: String, subscriptionId: String, appServicePlan: AppServicePlanProtocol) -> AppServicePlansCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, appServicePlan: appServicePlan)
    }
    public static func CreateOrUpdateVnetRoute(resourceGroupName: String, name: String, vnetName: String, routeName: String, subscriptionId: String, route: VnetRouteProtocol) -> AppServicePlansCreateOrUpdateVnetRoute {
        return CreateOrUpdateVnetRouteCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, routeName: routeName, subscriptionId: subscriptionId, route: route)
    }
    public static func Delete(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func DeleteHybridConnection(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String) -> AppServicePlansDeleteHybridConnection {
        return DeleteHybridConnectionCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId)
    }
    public static func DeleteVnetRoute(resourceGroupName: String, name: String, vnetName: String, routeName: String, subscriptionId: String) -> AppServicePlansDeleteVnetRoute {
        return DeleteVnetRouteCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, routeName: routeName, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansGet {
        return GetCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetHybridConnection(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String) -> AppServicePlansGetHybridConnection {
        return GetHybridConnectionCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId)
    }
    public static func GetHybridConnectionPlanLimit(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansGetHybridConnectionPlanLimit {
        return GetHybridConnectionPlanLimitCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetRouteForVnet(resourceGroupName: String, name: String, vnetName: String, routeName: String, subscriptionId: String) -> AppServicePlansGetRouteForVnet {
        return GetRouteForVnetCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, routeName: routeName, subscriptionId: subscriptionId)
    }
    public static func GetServerFarmSkus(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansGetServerFarmSkus {
        return GetServerFarmSkusCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func GetVnetFromServerFarm(resourceGroupName: String, name: String, vnetName: String, subscriptionId: String) -> AppServicePlansGetVnetFromServerFarm {
        return GetVnetFromServerFarmCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, subscriptionId: subscriptionId)
    }
    public static func GetVnetGateway(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, subscriptionId: String) -> AppServicePlansGetVnetGateway {
        return GetVnetGatewayCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, subscriptionId: subscriptionId)
    }
    public static func List(subscriptionId: String) -> AppServicePlansList {
        return ListCommand(subscriptionId: subscriptionId)
    }
    public static func ListByResourceGroup(resourceGroupName: String, subscriptionId: String) -> AppServicePlansListByResourceGroup {
        return ListByResourceGroupCommand(resourceGroupName: resourceGroupName, subscriptionId: subscriptionId)
    }
    public static func ListCapabilities(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansListCapabilities {
        return ListCapabilitiesCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListHybridConnectionKeys(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String) -> AppServicePlansListHybridConnectionKeys {
        return ListHybridConnectionKeysCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId)
    }
    public static func ListHybridConnections(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansListHybridConnections {
        return ListHybridConnectionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListMetricDefintions(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansListMetricDefintions {
        return ListMetricDefintionsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListMetrics(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansListMetrics {
        return ListMetricsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListRoutesForVnet(resourceGroupName: String, name: String, vnetName: String, subscriptionId: String) -> AppServicePlansListRoutesForVnet {
        return ListRoutesForVnetCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, subscriptionId: subscriptionId)
    }
    public static func ListUsages(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansListUsages {
        return ListUsagesCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListVnets(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansListVnets {
        return ListVnetsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListWebApps(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansListWebApps {
        return ListWebAppsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func ListWebAppsByHybridConnection(resourceGroupName: String, name: String, namespaceName: String, relayName: String, subscriptionId: String) -> AppServicePlansListWebAppsByHybridConnection {
        return ListWebAppsByHybridConnectionCommand(resourceGroupName: resourceGroupName, name: name, namespaceName: namespaceName, relayName: relayName, subscriptionId: subscriptionId)
    }
    public static func RebootWorker(resourceGroupName: String, name: String, workerName: String, subscriptionId: String) -> AppServicePlansRebootWorker {
        return RebootWorkerCommand(resourceGroupName: resourceGroupName, name: name, workerName: workerName, subscriptionId: subscriptionId)
    }
    public static func RestartWebApps(resourceGroupName: String, name: String, subscriptionId: String) -> AppServicePlansRestartWebApps {
        return RestartWebAppsCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId)
    }
    public static func Update(resourceGroupName: String, name: String, subscriptionId: String, appServicePlan: AppServicePlanPatchResourceProtocol) -> AppServicePlansUpdate {
        return UpdateCommand(resourceGroupName: resourceGroupName, name: name, subscriptionId: subscriptionId, appServicePlan: appServicePlan)
    }
    public static func UpdateVnetGateway(resourceGroupName: String, name: String, vnetName: String, gatewayName: String, subscriptionId: String, connectionEnvelope: VnetGatewayProtocol) -> AppServicePlansUpdateVnetGateway {
        return UpdateVnetGatewayCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, gatewayName: gatewayName, subscriptionId: subscriptionId, connectionEnvelope: connectionEnvelope)
    }
    public static func UpdateVnetRoute(resourceGroupName: String, name: String, vnetName: String, routeName: String, subscriptionId: String, route: VnetRouteProtocol) -> AppServicePlansUpdateVnetRoute {
        return UpdateVnetRouteCommand(resourceGroupName: resourceGroupName, name: name, vnetName: vnetName, routeName: routeName, subscriptionId: subscriptionId, route: route)
    }
}
}
