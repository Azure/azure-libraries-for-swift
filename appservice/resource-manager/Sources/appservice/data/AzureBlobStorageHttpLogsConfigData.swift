// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureBlobStorageHttpLogsConfigData : AzureBlobStorageHttpLogsConfigProtocol {
    public var sasUrl: String?
    public var retentionInDays: Int32?
    public var enabled: Bool?

        enum CodingKeys: String, CodingKey {case sasUrl = "sasUrl"
        case retentionInDays = "retentionInDays"
        case enabled = "enabled"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.sasUrl) {
        self.sasUrl = try container.decode(String?.self, forKey: .sasUrl)
    }
    if container.contains(.retentionInDays) {
        self.retentionInDays = try container.decode(Int32?.self, forKey: .retentionInDays)
    }
    if container.contains(.enabled) {
        self.enabled = try container.decode(Bool?.self, forKey: .enabled)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.sasUrl != nil {try container.encode(self.sasUrl, forKey: .sasUrl)}
    if self.retentionInDays != nil {try container.encode(self.retentionInDays, forKey: .retentionInDays)}
    if self.enabled != nil {try container.encode(self.enabled, forKey: .enabled)}
  }
}

extension DataFactory {
  public static func createAzureBlobStorageHttpLogsConfigProtocol() -> AzureBlobStorageHttpLogsConfigProtocol {
    return AzureBlobStorageHttpLogsConfigData()
  }
}
