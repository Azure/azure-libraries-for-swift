// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PushSettingsPropertiesData : PushSettingsPropertiesProtocol {
    public var isPushEnabled: Bool?
    public var tagWhitelistJson: String?
    public var tagsRequiringAuth: String?
    public var dynamicTagsJson: String?

        enum CodingKeys: String, CodingKey {case isPushEnabled = "isPushEnabled"
        case tagWhitelistJson = "tagWhitelistJson"
        case tagsRequiringAuth = "tagsRequiringAuth"
        case dynamicTagsJson = "dynamicTagsJson"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.isPushEnabled) {
        self.isPushEnabled = try container.decode(Bool?.self, forKey: .isPushEnabled)
    }
    if container.contains(.tagWhitelistJson) {
        self.tagWhitelistJson = try container.decode(String?.self, forKey: .tagWhitelistJson)
    }
    if container.contains(.tagsRequiringAuth) {
        self.tagsRequiringAuth = try container.decode(String?.self, forKey: .tagsRequiringAuth)
    }
    if container.contains(.dynamicTagsJson) {
        self.dynamicTagsJson = try container.decode(String?.self, forKey: .dynamicTagsJson)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.isPushEnabled != nil {try container.encode(self.isPushEnabled, forKey: .isPushEnabled)}
    if self.tagWhitelistJson != nil {try container.encode(self.tagWhitelistJson, forKey: .tagWhitelistJson)}
    if self.tagsRequiringAuth != nil {try container.encode(self.tagsRequiringAuth, forKey: .tagsRequiringAuth)}
    if self.dynamicTagsJson != nil {try container.encode(self.dynamicTagsJson, forKey: .dynamicTagsJson)}
  }
}

extension DataFactory {
  public static func createPushSettingsPropertiesProtocol() -> PushSettingsPropertiesProtocol {
    return PushSettingsPropertiesData()
  }
}
