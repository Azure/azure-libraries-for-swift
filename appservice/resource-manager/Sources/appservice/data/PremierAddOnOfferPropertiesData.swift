// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PremierAddOnOfferPropertiesData : PremierAddOnOfferPropertiesProtocol {
    public var sku: String?
    public var product: String?
    public var vendor: String?
    public var name: String?
    public var promoCodeRequired: Bool?
    public var quota: Int32?
    public var webHostingPlanRestrictions: AppServicePlanRestrictionsEnum?
    public var privacyPolicyUrl: String?
    public var legalTermsUrl: String?
    public var marketplacePublisher: String?
    public var marketplaceOffer: String?

        enum CodingKeys: String, CodingKey {case sku = "sku"
        case product = "product"
        case vendor = "vendor"
        case name = "name"
        case promoCodeRequired = "promoCodeRequired"
        case quota = "quota"
        case webHostingPlanRestrictions = "webHostingPlanRestrictions"
        case privacyPolicyUrl = "privacyPolicyUrl"
        case legalTermsUrl = "legalTermsUrl"
        case marketplacePublisher = "marketplacePublisher"
        case marketplaceOffer = "marketplaceOffer"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.sku) {
        self.sku = try container.decode(String?.self, forKey: .sku)
    }
    if container.contains(.product) {
        self.product = try container.decode(String?.self, forKey: .product)
    }
    if container.contains(.vendor) {
        self.vendor = try container.decode(String?.self, forKey: .vendor)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.promoCodeRequired) {
        self.promoCodeRequired = try container.decode(Bool?.self, forKey: .promoCodeRequired)
    }
    if container.contains(.quota) {
        self.quota = try container.decode(Int32?.self, forKey: .quota)
    }
    if container.contains(.webHostingPlanRestrictions) {
        self.webHostingPlanRestrictions = try container.decode(AppServicePlanRestrictionsEnum?.self, forKey: .webHostingPlanRestrictions)
    }
    if container.contains(.privacyPolicyUrl) {
        self.privacyPolicyUrl = try container.decode(String?.self, forKey: .privacyPolicyUrl)
    }
    if container.contains(.legalTermsUrl) {
        self.legalTermsUrl = try container.decode(String?.self, forKey: .legalTermsUrl)
    }
    if container.contains(.marketplacePublisher) {
        self.marketplacePublisher = try container.decode(String?.self, forKey: .marketplacePublisher)
    }
    if container.contains(.marketplaceOffer) {
        self.marketplaceOffer = try container.decode(String?.self, forKey: .marketplaceOffer)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.sku != nil {try container.encode(self.sku, forKey: .sku)}
    if self.product != nil {try container.encode(self.product, forKey: .product)}
    if self.vendor != nil {try container.encode(self.vendor, forKey: .vendor)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.promoCodeRequired != nil {try container.encode(self.promoCodeRequired, forKey: .promoCodeRequired)}
    if self.quota != nil {try container.encode(self.quota, forKey: .quota)}
    if self.webHostingPlanRestrictions != nil {try container.encode(self.webHostingPlanRestrictions, forKey: .webHostingPlanRestrictions)}
    if self.privacyPolicyUrl != nil {try container.encode(self.privacyPolicyUrl, forKey: .privacyPolicyUrl)}
    if self.legalTermsUrl != nil {try container.encode(self.legalTermsUrl, forKey: .legalTermsUrl)}
    if self.marketplacePublisher != nil {try container.encode(self.marketplacePublisher, forKey: .marketplacePublisher)}
    if self.marketplaceOffer != nil {try container.encode(self.marketplaceOffer, forKey: .marketplaceOffer)}
  }
}

extension DataFactory {
  public static func createPremierAddOnOfferPropertiesProtocol() -> PremierAddOnOfferPropertiesProtocol {
    return PremierAddOnOfferPropertiesData()
  }
}
