// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct HostNameSslStateData : HostNameSslStateProtocol {
    public var name: String?
    public var sslState: SslStateEnum?
    public var virtualIP: String?
    public var thumbprint: String?
    public var toUpdate: Bool?
    public var hostType: HostTypeEnum?

        enum CodingKeys: String, CodingKey {case name = "name"
        case sslState = "sslState"
        case virtualIP = "virtualIP"
        case thumbprint = "thumbprint"
        case toUpdate = "toUpdate"
        case hostType = "hostType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.sslState) {
        self.sslState = try container.decode(SslStateEnum?.self, forKey: .sslState)
    }
    if container.contains(.virtualIP) {
        self.virtualIP = try container.decode(String?.self, forKey: .virtualIP)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.toUpdate) {
        self.toUpdate = try container.decode(Bool?.self, forKey: .toUpdate)
    }
    if container.contains(.hostType) {
        self.hostType = try container.decode(HostTypeEnum?.self, forKey: .hostType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.sslState != nil {try container.encode(self.sslState, forKey: .sslState)}
    if self.virtualIP != nil {try container.encode(self.virtualIP, forKey: .virtualIP)}
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.toUpdate != nil {try container.encode(self.toUpdate, forKey: .toUpdate)}
    if self.hostType != nil {try container.encode(self.hostType, forKey: .hostType)}
  }
}

extension DataFactory {
  public static func createHostNameSslStateProtocol() -> HostNameSslStateProtocol {
    return HostNameSslStateData()
  }
}
