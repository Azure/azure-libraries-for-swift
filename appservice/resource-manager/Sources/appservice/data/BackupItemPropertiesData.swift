// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BackupItemPropertiesData : BackupItemPropertiesProtocol {
    public var backupId: Int32?
    public var storageAccountUrl: String?
    public var blobName: String?
    public var name: String?
    public var status: BackupItemStatusEnum?
    public var sizeInBytes: Int64?
    public var created: Date?
    public var log: String?
    public var databases: [DatabaseBackupSettingProtocol?]?
    public var scheduled: Bool?
    public var lastRestoreTimeStamp: Date?
    public var finishedTimeStamp: Date?
    public var correlationId: String?
    public var websiteSizeInBytes: Int64?

        enum CodingKeys: String, CodingKey {case backupId = "id"
        case storageAccountUrl = "storageAccountUrl"
        case blobName = "blobName"
        case name = "name"
        case status = "status"
        case sizeInBytes = "sizeInBytes"
        case created = "created"
        case log = "log"
        case databases = "databases"
        case scheduled = "scheduled"
        case lastRestoreTimeStamp = "lastRestoreTimeStamp"
        case finishedTimeStamp = "finishedTimeStamp"
        case correlationId = "correlationId"
        case websiteSizeInBytes = "websiteSizeInBytes"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.backupId) {
        self.backupId = try container.decode(Int32?.self, forKey: .backupId)
    }
    if container.contains(.storageAccountUrl) {
        self.storageAccountUrl = try container.decode(String?.self, forKey: .storageAccountUrl)
    }
    if container.contains(.blobName) {
        self.blobName = try container.decode(String?.self, forKey: .blobName)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.status) {
        self.status = try container.decode(BackupItemStatusEnum?.self, forKey: .status)
    }
    if container.contains(.sizeInBytes) {
        self.sizeInBytes = try container.decode(Int64?.self, forKey: .sizeInBytes)
    }
    if container.contains(.created) {
        self.created = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .created)), format: .dateTime)
    }
    if container.contains(.log) {
        self.log = try container.decode(String?.self, forKey: .log)
    }
    if container.contains(.databases) {
        self.databases = try container.decode([DatabaseBackupSettingData?]?.self, forKey: .databases)
    }
    if container.contains(.scheduled) {
        self.scheduled = try container.decode(Bool?.self, forKey: .scheduled)
    }
    if container.contains(.lastRestoreTimeStamp) {
        self.lastRestoreTimeStamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastRestoreTimeStamp)), format: .dateTime)
    }
    if container.contains(.finishedTimeStamp) {
        self.finishedTimeStamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .finishedTimeStamp)), format: .dateTime)
    }
    if container.contains(.correlationId) {
        self.correlationId = try container.decode(String?.self, forKey: .correlationId)
    }
    if container.contains(.websiteSizeInBytes) {
        self.websiteSizeInBytes = try container.decode(Int64?.self, forKey: .websiteSizeInBytes)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.backupId != nil {try container.encode(self.backupId, forKey: .backupId)}
    if self.storageAccountUrl != nil {try container.encode(self.storageAccountUrl, forKey: .storageAccountUrl)}
    if self.blobName != nil {try container.encode(self.blobName, forKey: .blobName)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.sizeInBytes != nil {try container.encode(self.sizeInBytes, forKey: .sizeInBytes)}
    if self.created != nil {
        try container.encode(DateConverter.toString(date: self.created!, format: .dateTime), forKey: .created)
    }
    if self.log != nil {try container.encode(self.log, forKey: .log)}
    if self.databases != nil {try container.encode(self.databases as! [DatabaseBackupSettingData?]?, forKey: .databases)}
    if self.scheduled != nil {try container.encode(self.scheduled, forKey: .scheduled)}
    if self.lastRestoreTimeStamp != nil {
        try container.encode(DateConverter.toString(date: self.lastRestoreTimeStamp!, format: .dateTime), forKey: .lastRestoreTimeStamp)
    }
    if self.finishedTimeStamp != nil {
        try container.encode(DateConverter.toString(date: self.finishedTimeStamp!, format: .dateTime), forKey: .finishedTimeStamp)
    }
    if self.correlationId != nil {try container.encode(self.correlationId, forKey: .correlationId)}
    if self.websiteSizeInBytes != nil {try container.encode(self.websiteSizeInBytes, forKey: .websiteSizeInBytes)}
  }
}

extension DataFactory {
  public static func createBackupItemPropertiesProtocol() -> BackupItemPropertiesProtocol {
    return BackupItemPropertiesData()
  }
}
