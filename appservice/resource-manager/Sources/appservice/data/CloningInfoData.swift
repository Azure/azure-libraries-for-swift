// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CloningInfoData : CloningInfoProtocol {
    public var correlationId: String?
    public var overwrite: Bool?
    public var cloneCustomHostNames: Bool?
    public var cloneSourceControl: Bool?
    public var sourceWebAppId: String
    public var hostingEnvironment: String?
    public var appSettingsOverrides: [String:String]?
    public var configureLoadBalancing: Bool?
    public var trafficManagerProfileId: String?
    public var trafficManagerProfileName: String?
    public var ignoreQuotas: Bool?

        enum CodingKeys: String, CodingKey {case correlationId = "correlationId"
        case overwrite = "overwrite"
        case cloneCustomHostNames = "cloneCustomHostNames"
        case cloneSourceControl = "cloneSourceControl"
        case sourceWebAppId = "sourceWebAppId"
        case hostingEnvironment = "hostingEnvironment"
        case appSettingsOverrides = "appSettingsOverrides"
        case configureLoadBalancing = "configureLoadBalancing"
        case trafficManagerProfileId = "trafficManagerProfileId"
        case trafficManagerProfileName = "trafficManagerProfileName"
        case ignoreQuotas = "ignoreQuotas"
        }

  public init(sourceWebAppId: String)  {
    self.sourceWebAppId = sourceWebAppId
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.correlationId) {
        self.correlationId = try container.decode(String?.self, forKey: .correlationId)
    }
    if container.contains(.overwrite) {
        self.overwrite = try container.decode(Bool?.self, forKey: .overwrite)
    }
    if container.contains(.cloneCustomHostNames) {
        self.cloneCustomHostNames = try container.decode(Bool?.self, forKey: .cloneCustomHostNames)
    }
    if container.contains(.cloneSourceControl) {
        self.cloneSourceControl = try container.decode(Bool?.self, forKey: .cloneSourceControl)
    }
    self.sourceWebAppId = try container.decode(String.self, forKey: .sourceWebAppId)
    if container.contains(.hostingEnvironment) {
        self.hostingEnvironment = try container.decode(String?.self, forKey: .hostingEnvironment)
    }
    if container.contains(.appSettingsOverrides) {
        self.appSettingsOverrides = try container.decode([String:String]?.self, forKey: .appSettingsOverrides)
    }
    if container.contains(.configureLoadBalancing) {
        self.configureLoadBalancing = try container.decode(Bool?.self, forKey: .configureLoadBalancing)
    }
    if container.contains(.trafficManagerProfileId) {
        self.trafficManagerProfileId = try container.decode(String?.self, forKey: .trafficManagerProfileId)
    }
    if container.contains(.trafficManagerProfileName) {
        self.trafficManagerProfileName = try container.decode(String?.self, forKey: .trafficManagerProfileName)
    }
    if container.contains(.ignoreQuotas) {
        self.ignoreQuotas = try container.decode(Bool?.self, forKey: .ignoreQuotas)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.correlationId != nil {try container.encode(self.correlationId, forKey: .correlationId)}
    if self.overwrite != nil {try container.encode(self.overwrite, forKey: .overwrite)}
    if self.cloneCustomHostNames != nil {try container.encode(self.cloneCustomHostNames, forKey: .cloneCustomHostNames)}
    if self.cloneSourceControl != nil {try container.encode(self.cloneSourceControl, forKey: .cloneSourceControl)}
    try container.encode(self.sourceWebAppId, forKey: .sourceWebAppId)
    if self.hostingEnvironment != nil {try container.encode(self.hostingEnvironment, forKey: .hostingEnvironment)}
    if self.appSettingsOverrides != nil {try container.encode(self.appSettingsOverrides, forKey: .appSettingsOverrides)}
    if self.configureLoadBalancing != nil {try container.encode(self.configureLoadBalancing, forKey: .configureLoadBalancing)}
    if self.trafficManagerProfileId != nil {try container.encode(self.trafficManagerProfileId, forKey: .trafficManagerProfileId)}
    if self.trafficManagerProfileName != nil {try container.encode(self.trafficManagerProfileName, forKey: .trafficManagerProfileName)}
    if self.ignoreQuotas != nil {try container.encode(self.ignoreQuotas, forKey: .ignoreQuotas)}
  }
}

extension DataFactory {
  public static func createCloningInfoProtocol(sourceWebAppId: String) -> CloningInfoProtocol {
    return CloningInfoData(sourceWebAppId: sourceWebAppId)
  }
}
