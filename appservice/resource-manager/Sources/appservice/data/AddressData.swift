// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AddressData : AddressProtocol {
    public var address1: String
    public var address2: String?
    public var city: String
    public var country: String
    public var postalCode: String
    public var state: String

        enum CodingKeys: String, CodingKey {case address1 = "address1"
        case address2 = "address2"
        case city = "city"
        case country = "country"
        case postalCode = "postalCode"
        case state = "state"
        }

  public init(address1: String, city: String, country: String, postalCode: String, state: String)  {
    self.address1 = address1
    self.city = city
    self.country = country
    self.postalCode = postalCode
    self.state = state
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.address1 = try container.decode(String.self, forKey: .address1)
    if container.contains(.address2) {
        self.address2 = try container.decode(String?.self, forKey: .address2)
    }
    self.city = try container.decode(String.self, forKey: .city)
    self.country = try container.decode(String.self, forKey: .country)
    self.postalCode = try container.decode(String.self, forKey: .postalCode)
    self.state = try container.decode(String.self, forKey: .state)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.address1, forKey: .address1)
    if self.address2 != nil {try container.encode(self.address2, forKey: .address2)}
    try container.encode(self.city, forKey: .city)
    try container.encode(self.country, forKey: .country)
    try container.encode(self.postalCode, forKey: .postalCode)
    try container.encode(self.state, forKey: .state)
  }
}

extension DataFactory {
  public static func createAddressProtocol(address1: String, city: String, country: String, postalCode: String, state: String) -> AddressProtocol {
    return AddressData(address1: address1, city: city, country: country, postalCode: postalCode, state: state)
  }
}
