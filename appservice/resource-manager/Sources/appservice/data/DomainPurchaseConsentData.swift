// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DomainPurchaseConsentData : DomainPurchaseConsentProtocol {
    public var agreementKeys: [String]?
    public var agreedBy: String?
    public var agreedAt: Date?

        enum CodingKeys: String, CodingKey {case agreementKeys = "agreementKeys"
        case agreedBy = "agreedBy"
        case agreedAt = "agreedAt"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.agreementKeys) {
        self.agreementKeys = try container.decode([String]?.self, forKey: .agreementKeys)
    }
    if container.contains(.agreedBy) {
        self.agreedBy = try container.decode(String?.self, forKey: .agreedBy)
    }
    if container.contains(.agreedAt) {
        self.agreedAt = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .agreedAt)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.agreementKeys != nil {try container.encode(self.agreementKeys as! [String]?, forKey: .agreementKeys)}
    if self.agreedBy != nil {try container.encode(self.agreedBy, forKey: .agreedBy)}
    if self.agreedAt != nil {
        try container.encode(DateConverter.toString(date: self.agreedAt!, format: .dateTime), forKey: .agreedAt)
    }
  }
}

extension DataFactory {
  public static func createDomainPurchaseConsentProtocol() -> DomainPurchaseConsentProtocol {
    return DomainPurchaseConsentData()
  }
}
