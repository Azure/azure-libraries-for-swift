// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DeploymentLocationsData : DeploymentLocationsProtocol {
    public var locations: [GeoRegionProtocol?]?
    public var hostingEnvironments: [AppServiceEnvironmentProtocol?]?
    public var hostingEnvironmentDeploymentInfos: [HostingEnvironmentDeploymentInfoProtocol?]?

        enum CodingKeys: String, CodingKey {case locations = "locations"
        case hostingEnvironments = "hostingEnvironments"
        case hostingEnvironmentDeploymentInfos = "hostingEnvironmentDeploymentInfos"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.locations) {
        self.locations = try container.decode([GeoRegionData?]?.self, forKey: .locations)
    }
    if container.contains(.hostingEnvironments) {
        self.hostingEnvironments = try container.decode([AppServiceEnvironmentData?]?.self, forKey: .hostingEnvironments)
    }
    if container.contains(.hostingEnvironmentDeploymentInfos) {
        self.hostingEnvironmentDeploymentInfos = try container.decode([HostingEnvironmentDeploymentInfoData?]?.self, forKey: .hostingEnvironmentDeploymentInfos)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.locations != nil {try container.encode(self.locations as! [GeoRegionData?]?, forKey: .locations)}
    if self.hostingEnvironments != nil {try container.encode(self.hostingEnvironments as! [AppServiceEnvironmentData?]?, forKey: .hostingEnvironments)}
    if self.hostingEnvironmentDeploymentInfos != nil {try container.encode(self.hostingEnvironmentDeploymentInfos as! [HostingEnvironmentDeploymentInfoData?]?, forKey: .hostingEnvironmentDeploymentInfos)}
  }
}

extension DataFactory {
  public static func createDeploymentLocationsProtocol() -> DeploymentLocationsProtocol {
    return DeploymentLocationsData()
  }
}
