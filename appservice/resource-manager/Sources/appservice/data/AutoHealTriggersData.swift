// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AutoHealTriggersData : AutoHealTriggersProtocol {
    public var requests: RequestsBasedTriggerProtocol?
    public var privateBytesInKB: Int32?
    public var statusCodes: [StatusCodesBasedTriggerProtocol?]?
    public var slowRequests: SlowRequestsBasedTriggerProtocol?

        enum CodingKeys: String, CodingKey {case requests = "requests"
        case privateBytesInKB = "privateBytesInKB"
        case statusCodes = "statusCodes"
        case slowRequests = "slowRequests"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.requests) {
        self.requests = try container.decode(RequestsBasedTriggerData?.self, forKey: .requests)
    }
    if container.contains(.privateBytesInKB) {
        self.privateBytesInKB = try container.decode(Int32?.self, forKey: .privateBytesInKB)
    }
    if container.contains(.statusCodes) {
        self.statusCodes = try container.decode([StatusCodesBasedTriggerData?]?.self, forKey: .statusCodes)
    }
    if container.contains(.slowRequests) {
        self.slowRequests = try container.decode(SlowRequestsBasedTriggerData?.self, forKey: .slowRequests)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.requests != nil {try container.encode(self.requests as! RequestsBasedTriggerData?, forKey: .requests)}
    if self.privateBytesInKB != nil {try container.encode(self.privateBytesInKB, forKey: .privateBytesInKB)}
    if self.statusCodes != nil {try container.encode(self.statusCodes as! [StatusCodesBasedTriggerData?]?, forKey: .statusCodes)}
    if self.slowRequests != nil {try container.encode(self.slowRequests as! SlowRequestsBasedTriggerData?, forKey: .slowRequests)}
  }
}

extension DataFactory {
  public static func createAutoHealTriggersProtocol() -> AutoHealTriggersProtocol {
    return AutoHealTriggersData()
  }
}
