// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationLogsConfigData : ApplicationLogsConfigProtocol {
    public var fileSystem: FileSystemApplicationLogsConfigProtocol?
    public var azureTableStorage: AzureTableStorageApplicationLogsConfigProtocol?
    public var azureBlobStorage: AzureBlobStorageApplicationLogsConfigProtocol?

        enum CodingKeys: String, CodingKey {case fileSystem = "fileSystem"
        case azureTableStorage = "azureTableStorage"
        case azureBlobStorage = "azureBlobStorage"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.fileSystem) {
        self.fileSystem = try container.decode(FileSystemApplicationLogsConfigData?.self, forKey: .fileSystem)
    }
    if container.contains(.azureTableStorage) {
        self.azureTableStorage = try container.decode(AzureTableStorageApplicationLogsConfigData?.self, forKey: .azureTableStorage)
    }
    if container.contains(.azureBlobStorage) {
        self.azureBlobStorage = try container.decode(AzureBlobStorageApplicationLogsConfigData?.self, forKey: .azureBlobStorage)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.fileSystem != nil {try container.encode(self.fileSystem as! FileSystemApplicationLogsConfigData?, forKey: .fileSystem)}
    if self.azureTableStorage != nil {try container.encode(self.azureTableStorage as! AzureTableStorageApplicationLogsConfigData?, forKey: .azureTableStorage)}
    if self.azureBlobStorage != nil {try container.encode(self.azureBlobStorage as! AzureBlobStorageApplicationLogsConfigData?, forKey: .azureBlobStorage)}
  }
}

extension DataFactory {
  public static func createApplicationLogsConfigProtocol() -> ApplicationLogsConfigProtocol {
    return ApplicationLogsConfigData()
  }
}
