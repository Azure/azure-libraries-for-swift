// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DeletedSiteData : DeletedSiteProtocol {
    public var id: Int32?
    public var deletedTimestamp: String?
    public var subscription: String?
    public var resourceGroup: String?
    public var name: String?
    public var slot: String?

        enum CodingKeys: String, CodingKey {case id = "id"
        case deletedTimestamp = "deletedTimestamp"
        case subscription = "subscription"
        case resourceGroup = "resourceGroup"
        case name = "name"
        case slot = "slot"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(Int32?.self, forKey: .id)
    }
    if container.contains(.deletedTimestamp) {
        self.deletedTimestamp = try container.decode(String?.self, forKey: .deletedTimestamp)
    }
    if container.contains(.subscription) {
        self.subscription = try container.decode(String?.self, forKey: .subscription)
    }
    if container.contains(.resourceGroup) {
        self.resourceGroup = try container.decode(String?.self, forKey: .resourceGroup)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.slot) {
        self.slot = try container.decode(String?.self, forKey: .slot)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.deletedTimestamp != nil {try container.encode(self.deletedTimestamp, forKey: .deletedTimestamp)}
    if self.subscription != nil {try container.encode(self.subscription, forKey: .subscription)}
    if self.resourceGroup != nil {try container.encode(self.resourceGroup, forKey: .resourceGroup)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.slot != nil {try container.encode(self.slot, forKey: .slot)}
  }
}

extension DataFactory {
  public static func createDeletedSiteProtocol() -> DeletedSiteProtocol {
    return DeletedSiteData()
  }
}
