// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MSDeployCoreData : MSDeployCoreProtocol {
    public var packageUri: String?
    public var connectionString: String?
    public var dbType: String?
    public var setParametersXmlFileUri: String?
    public var setParameters: [String:String]?
    public var skipAppData: Bool?
    public var appOffline: Bool?

        enum CodingKeys: String, CodingKey {case packageUri = "packageUri"
        case connectionString = "connectionString"
        case dbType = "dbType"
        case setParametersXmlFileUri = "setParametersXmlFileUri"
        case setParameters = "setParameters"
        case skipAppData = "skipAppData"
        case appOffline = "appOffline"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.packageUri) {
        self.packageUri = try container.decode(String?.self, forKey: .packageUri)
    }
    if container.contains(.connectionString) {
        self.connectionString = try container.decode(String?.self, forKey: .connectionString)
    }
    if container.contains(.dbType) {
        self.dbType = try container.decode(String?.self, forKey: .dbType)
    }
    if container.contains(.setParametersXmlFileUri) {
        self.setParametersXmlFileUri = try container.decode(String?.self, forKey: .setParametersXmlFileUri)
    }
    if container.contains(.setParameters) {
        self.setParameters = try container.decode([String:String]?.self, forKey: .setParameters)
    }
    if container.contains(.skipAppData) {
        self.skipAppData = try container.decode(Bool?.self, forKey: .skipAppData)
    }
    if container.contains(.appOffline) {
        self.appOffline = try container.decode(Bool?.self, forKey: .appOffline)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.packageUri != nil {try container.encode(self.packageUri, forKey: .packageUri)}
    if self.connectionString != nil {try container.encode(self.connectionString, forKey: .connectionString)}
    if self.dbType != nil {try container.encode(self.dbType, forKey: .dbType)}
    if self.setParametersXmlFileUri != nil {try container.encode(self.setParametersXmlFileUri, forKey: .setParametersXmlFileUri)}
    if self.setParameters != nil {try container.encode(self.setParameters, forKey: .setParameters)}
    if self.skipAppData != nil {try container.encode(self.skipAppData, forKey: .skipAppData)}
    if self.appOffline != nil {try container.encode(self.appOffline, forKey: .appOffline)}
  }
}

extension DataFactory {
  public static func createMSDeployCoreProtocol() -> MSDeployCoreProtocol {
    return MSDeployCoreData()
  }
}
