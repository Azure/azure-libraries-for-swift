// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualIPMappingData : VirtualIPMappingProtocol {
    public var virtualIP: String?
    public var internalHttpPort: Int32?
    public var internalHttpsPort: Int32?
    public var inUse: Bool?

        enum CodingKeys: String, CodingKey {case virtualIP = "virtualIP"
        case internalHttpPort = "internalHttpPort"
        case internalHttpsPort = "internalHttpsPort"
        case inUse = "inUse"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.virtualIP) {
        self.virtualIP = try container.decode(String?.self, forKey: .virtualIP)
    }
    if container.contains(.internalHttpPort) {
        self.internalHttpPort = try container.decode(Int32?.self, forKey: .internalHttpPort)
    }
    if container.contains(.internalHttpsPort) {
        self.internalHttpsPort = try container.decode(Int32?.self, forKey: .internalHttpsPort)
    }
    if container.contains(.inUse) {
        self.inUse = try container.decode(Bool?.self, forKey: .inUse)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.virtualIP != nil {try container.encode(self.virtualIP, forKey: .virtualIP)}
    if self.internalHttpPort != nil {try container.encode(self.internalHttpPort, forKey: .internalHttpPort)}
    if self.internalHttpsPort != nil {try container.encode(self.internalHttpsPort, forKey: .internalHttpsPort)}
    if self.inUse != nil {try container.encode(self.inUse, forKey: .inUse)}
  }
}

extension DataFactory {
  public static func createVirtualIPMappingProtocol() -> VirtualIPMappingProtocol {
    return VirtualIPMappingData()
  }
}
