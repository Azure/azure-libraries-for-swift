// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VnetParametersPropertiesData : VnetParametersPropertiesProtocol {
    public var vnetResourceGroup: String?
    public var vnetName: String?
    public var vnetSubnetName: String?

        enum CodingKeys: String, CodingKey {case vnetResourceGroup = "vnetResourceGroup"
        case vnetName = "vnetName"
        case vnetSubnetName = "vnetSubnetName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.vnetResourceGroup) {
        self.vnetResourceGroup = try container.decode(String?.self, forKey: .vnetResourceGroup)
    }
    if container.contains(.vnetName) {
        self.vnetName = try container.decode(String?.self, forKey: .vnetName)
    }
    if container.contains(.vnetSubnetName) {
        self.vnetSubnetName = try container.decode(String?.self, forKey: .vnetSubnetName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.vnetResourceGroup != nil {try container.encode(self.vnetResourceGroup, forKey: .vnetResourceGroup)}
    if self.vnetName != nil {try container.encode(self.vnetName, forKey: .vnetName)}
    if self.vnetSubnetName != nil {try container.encode(self.vnetSubnetName, forKey: .vnetSubnetName)}
  }
}

extension DataFactory {
  public static func createVnetParametersPropertiesProtocol() -> VnetParametersPropertiesProtocol {
    return VnetParametersPropertiesData()
  }
}
