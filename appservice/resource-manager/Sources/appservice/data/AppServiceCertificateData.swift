// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AppServiceCertificateData : AppServiceCertificateProtocol {
    public var keyVaultId: String?
    public var keyVaultSecretName: String?
    public var provisioningState: KeyVaultSecretStatusEnum?

        enum CodingKeys: String, CodingKey {case keyVaultId = "keyVaultId"
        case keyVaultSecretName = "keyVaultSecretName"
        case provisioningState = "provisioningState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.keyVaultId) {
        self.keyVaultId = try container.decode(String?.self, forKey: .keyVaultId)
    }
    if container.contains(.keyVaultSecretName) {
        self.keyVaultSecretName = try container.decode(String?.self, forKey: .keyVaultSecretName)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(KeyVaultSecretStatusEnum?.self, forKey: .provisioningState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.keyVaultId != nil {try container.encode(self.keyVaultId, forKey: .keyVaultId)}
    if self.keyVaultSecretName != nil {try container.encode(self.keyVaultSecretName, forKey: .keyVaultSecretName)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
  }
}

extension DataFactory {
  public static func createAppServiceCertificateProtocol() -> AppServiceCertificateProtocol {
    return AppServiceCertificateData()
  }
}
