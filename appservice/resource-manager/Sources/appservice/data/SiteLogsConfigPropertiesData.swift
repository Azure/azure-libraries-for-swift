// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SiteLogsConfigPropertiesData : SiteLogsConfigPropertiesProtocol {
    public var applicationLogs: ApplicationLogsConfigProtocol?
    public var httpLogs: HttpLogsConfigProtocol?
    public var failedRequestsTracing: EnabledConfigProtocol?
    public var detailedErrorMessages: EnabledConfigProtocol?

        enum CodingKeys: String, CodingKey {case applicationLogs = "applicationLogs"
        case httpLogs = "httpLogs"
        case failedRequestsTracing = "failedRequestsTracing"
        case detailedErrorMessages = "detailedErrorMessages"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.applicationLogs) {
        self.applicationLogs = try container.decode(ApplicationLogsConfigData?.self, forKey: .applicationLogs)
    }
    if container.contains(.httpLogs) {
        self.httpLogs = try container.decode(HttpLogsConfigData?.self, forKey: .httpLogs)
    }
    if container.contains(.failedRequestsTracing) {
        self.failedRequestsTracing = try container.decode(EnabledConfigData?.self, forKey: .failedRequestsTracing)
    }
    if container.contains(.detailedErrorMessages) {
        self.detailedErrorMessages = try container.decode(EnabledConfigData?.self, forKey: .detailedErrorMessages)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.applicationLogs != nil {try container.encode(self.applicationLogs as! ApplicationLogsConfigData?, forKey: .applicationLogs)}
    if self.httpLogs != nil {try container.encode(self.httpLogs as! HttpLogsConfigData?, forKey: .httpLogs)}
    if self.failedRequestsTracing != nil {try container.encode(self.failedRequestsTracing as! EnabledConfigData?, forKey: .failedRequestsTracing)}
    if self.detailedErrorMessages != nil {try container.encode(self.detailedErrorMessages as! EnabledConfigData?, forKey: .detailedErrorMessages)}
  }
}

extension DataFactory {
  public static func createSiteLogsConfigPropertiesProtocol() -> SiteLogsConfigPropertiesProtocol {
    return SiteLogsConfigPropertiesData()
  }
}
