// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MigrateMySqlStatusPropertiesData : MigrateMySqlStatusPropertiesProtocol {
    public var migrationOperationStatus: OperationStatusEnum?
    public var operationId: String?
    public var localMySqlEnabled: Bool?

        enum CodingKeys: String, CodingKey {case migrationOperationStatus = "migrationOperationStatus"
        case operationId = "operationId"
        case localMySqlEnabled = "localMySqlEnabled"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.migrationOperationStatus) {
        self.migrationOperationStatus = try container.decode(OperationStatusEnum?.self, forKey: .migrationOperationStatus)
    }
    if container.contains(.operationId) {
        self.operationId = try container.decode(String?.self, forKey: .operationId)
    }
    if container.contains(.localMySqlEnabled) {
        self.localMySqlEnabled = try container.decode(Bool?.self, forKey: .localMySqlEnabled)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.migrationOperationStatus != nil {try container.encode(self.migrationOperationStatus, forKey: .migrationOperationStatus)}
    if self.operationId != nil {try container.encode(self.operationId, forKey: .operationId)}
    if self.localMySqlEnabled != nil {try container.encode(self.localMySqlEnabled, forKey: .localMySqlEnabled)}
  }
}

extension DataFactory {
  public static func createMigrateMySqlStatusPropertiesProtocol() -> MigrateMySqlStatusPropertiesProtocol {
    return MigrateMySqlStatusPropertiesData()
  }
}
