// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkAccessControlEntryData : NetworkAccessControlEntryProtocol {
    public var action: AccessControlEntryActionEnum?
    public var description: String?
    public var order: Int32?
    public var remoteSubnet: String?

        enum CodingKeys: String, CodingKey {case action = "action"
        case description = "description"
        case order = "order"
        case remoteSubnet = "remoteSubnet"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.action) {
        self.action = try container.decode(AccessControlEntryActionEnum?.self, forKey: .action)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.order) {
        self.order = try container.decode(Int32?.self, forKey: .order)
    }
    if container.contains(.remoteSubnet) {
        self.remoteSubnet = try container.decode(String?.self, forKey: .remoteSubnet)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.action != nil {try container.encode(self.action, forKey: .action)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.order != nil {try container.encode(self.order, forKey: .order)}
    if self.remoteSubnet != nil {try container.encode(self.remoteSubnet, forKey: .remoteSubnet)}
  }
}

extension DataFactory {
  public static func createNetworkAccessControlEntryProtocol() -> NetworkAccessControlEntryProtocol {
    return NetworkAccessControlEntryData()
  }
}
