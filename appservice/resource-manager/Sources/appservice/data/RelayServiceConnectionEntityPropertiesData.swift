// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RelayServiceConnectionEntityPropertiesData : RelayServiceConnectionEntityPropertiesProtocol {
    public var entityName: String?
    public var entityConnectionString: String?
    public var resourceType: String?
    public var resourceConnectionString: String?
    public var hostname: String?
    public var port: Int32?
    public var biztalkUri: String?

        enum CodingKeys: String, CodingKey {case entityName = "entityName"
        case entityConnectionString = "entityConnectionString"
        case resourceType = "resourceType"
        case resourceConnectionString = "resourceConnectionString"
        case hostname = "hostname"
        case port = "port"
        case biztalkUri = "biztalkUri"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.entityName) {
        self.entityName = try container.decode(String?.self, forKey: .entityName)
    }
    if container.contains(.entityConnectionString) {
        self.entityConnectionString = try container.decode(String?.self, forKey: .entityConnectionString)
    }
    if container.contains(.resourceType) {
        self.resourceType = try container.decode(String?.self, forKey: .resourceType)
    }
    if container.contains(.resourceConnectionString) {
        self.resourceConnectionString = try container.decode(String?.self, forKey: .resourceConnectionString)
    }
    if container.contains(.hostname) {
        self.hostname = try container.decode(String?.self, forKey: .hostname)
    }
    if container.contains(.port) {
        self.port = try container.decode(Int32?.self, forKey: .port)
    }
    if container.contains(.biztalkUri) {
        self.biztalkUri = try container.decode(String?.self, forKey: .biztalkUri)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.entityName != nil {try container.encode(self.entityName, forKey: .entityName)}
    if self.entityConnectionString != nil {try container.encode(self.entityConnectionString, forKey: .entityConnectionString)}
    if self.resourceType != nil {try container.encode(self.resourceType, forKey: .resourceType)}
    if self.resourceConnectionString != nil {try container.encode(self.resourceConnectionString, forKey: .resourceConnectionString)}
    if self.hostname != nil {try container.encode(self.hostname, forKey: .hostname)}
    if self.port != nil {try container.encode(self.port, forKey: .port)}
    if self.biztalkUri != nil {try container.encode(self.biztalkUri, forKey: .biztalkUri)}
  }
}

extension DataFactory {
  public static func createRelayServiceConnectionEntityPropertiesProtocol() -> RelayServiceConnectionEntityPropertiesProtocol {
    return RelayServiceConnectionEntityPropertiesData()
  }
}
