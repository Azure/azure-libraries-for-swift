// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct OperationData : OperationProtocol {
    public var id: String?
    public var name: String?
    public var status: OperationStatusEnum?
    public var errors: [ErrorEntityProtocol?]?
    public var createdTime: Date?
    public var modifiedTime: Date?
    public var expirationTime: Date?
    public var geoMasterOperationId: String?

        enum CodingKeys: String, CodingKey {case id = "id"
        case name = "name"
        case status = "status"
        case errors = "errors"
        case createdTime = "createdTime"
        case modifiedTime = "modifiedTime"
        case expirationTime = "expirationTime"
        case geoMasterOperationId = "geoMasterOperationId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.status) {
        self.status = try container.decode(OperationStatusEnum?.self, forKey: .status)
    }
    if container.contains(.errors) {
        self.errors = try container.decode([ErrorEntityData?]?.self, forKey: .errors)
    }
    if container.contains(.createdTime) {
        self.createdTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdTime)), format: .dateTime)
    }
    if container.contains(.modifiedTime) {
        self.modifiedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .modifiedTime)), format: .dateTime)
    }
    if container.contains(.expirationTime) {
        self.expirationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .expirationTime)), format: .dateTime)
    }
    if container.contains(.geoMasterOperationId) {
        self.geoMasterOperationId = try container.decode(String?.self, forKey: .geoMasterOperationId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.errors != nil {try container.encode(self.errors as! [ErrorEntityData?]?, forKey: .errors)}
    if self.createdTime != nil {
        try container.encode(DateConverter.toString(date: self.createdTime!, format: .dateTime), forKey: .createdTime)
    }
    if self.modifiedTime != nil {
        try container.encode(DateConverter.toString(date: self.modifiedTime!, format: .dateTime), forKey: .modifiedTime)
    }
    if self.expirationTime != nil {
        try container.encode(DateConverter.toString(date: self.expirationTime!, format: .dateTime), forKey: .expirationTime)
    }
    if self.geoMasterOperationId != nil {try container.encode(self.geoMasterOperationId, forKey: .geoMasterOperationId)}
  }
}

extension DataFactory {
  public static func createOperationProtocol() -> OperationProtocol {
    return OperationData()
  }
}
