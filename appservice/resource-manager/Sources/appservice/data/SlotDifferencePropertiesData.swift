// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SlotDifferencePropertiesData : SlotDifferencePropertiesProtocol {
    public var type: String?
    public var settingType: String?
    public var diffRule: String?
    public var settingName: String?
    public var valueInCurrentSlot: String?
    public var valueInTargetSlot: String?
    public var description: String?

        enum CodingKeys: String, CodingKey {case type = "type"
        case settingType = "settingType"
        case diffRule = "diffRule"
        case settingName = "settingName"
        case valueInCurrentSlot = "valueInCurrentSlot"
        case valueInTargetSlot = "valueInTargetSlot"
        case description = "description"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.type) {
        self.type = try container.decode(String?.self, forKey: .type)
    }
    if container.contains(.settingType) {
        self.settingType = try container.decode(String?.self, forKey: .settingType)
    }
    if container.contains(.diffRule) {
        self.diffRule = try container.decode(String?.self, forKey: .diffRule)
    }
    if container.contains(.settingName) {
        self.settingName = try container.decode(String?.self, forKey: .settingName)
    }
    if container.contains(.valueInCurrentSlot) {
        self.valueInCurrentSlot = try container.decode(String?.self, forKey: .valueInCurrentSlot)
    }
    if container.contains(.valueInTargetSlot) {
        self.valueInTargetSlot = try container.decode(String?.self, forKey: .valueInTargetSlot)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.settingType != nil {try container.encode(self.settingType, forKey: .settingType)}
    if self.diffRule != nil {try container.encode(self.diffRule, forKey: .diffRule)}
    if self.settingName != nil {try container.encode(self.settingName, forKey: .settingName)}
    if self.valueInCurrentSlot != nil {try container.encode(self.valueInCurrentSlot, forKey: .valueInCurrentSlot)}
    if self.valueInTargetSlot != nil {try container.encode(self.valueInTargetSlot, forKey: .valueInTargetSlot)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
  }
}

extension DataFactory {
  public static func createSlotDifferencePropertiesProtocol() -> SlotDifferencePropertiesProtocol {
    return SlotDifferencePropertiesData()
  }
}
