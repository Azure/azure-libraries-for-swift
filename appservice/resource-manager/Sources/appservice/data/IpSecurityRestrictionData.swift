// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct IpSecurityRestrictionData : IpSecurityRestrictionProtocol {
    public var ipAddress: String
    public var subnetMask: String?

        enum CodingKeys: String, CodingKey {case ipAddress = "ipAddress"
        case subnetMask = "subnetMask"
        }

  public init(ipAddress: String)  {
    self.ipAddress = ipAddress
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.ipAddress = try container.decode(String.self, forKey: .ipAddress)
    if container.contains(.subnetMask) {
        self.subnetMask = try container.decode(String?.self, forKey: .subnetMask)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.ipAddress, forKey: .ipAddress)
    if self.subnetMask != nil {try container.encode(self.subnetMask, forKey: .subnetMask)}
  }
}

extension DataFactory {
  public static func createIpSecurityRestrictionProtocol(ipAddress: String) -> IpSecurityRestrictionProtocol {
    return IpSecurityRestrictionData(ipAddress: ipAddress)
  }
}
