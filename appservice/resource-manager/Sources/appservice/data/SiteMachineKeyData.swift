// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SiteMachineKeyData : SiteMachineKeyProtocol {
    public var validation: String?
    public var validationKey: String?
    public var decryption: String?
    public var decryptionKey: String?

        enum CodingKeys: String, CodingKey {case validation = "validation"
        case validationKey = "validationKey"
        case decryption = "decryption"
        case decryptionKey = "decryptionKey"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.validation) {
        self.validation = try container.decode(String?.self, forKey: .validation)
    }
    if container.contains(.validationKey) {
        self.validationKey = try container.decode(String?.self, forKey: .validationKey)
    }
    if container.contains(.decryption) {
        self.decryption = try container.decode(String?.self, forKey: .decryption)
    }
    if container.contains(.decryptionKey) {
        self.decryptionKey = try container.decode(String?.self, forKey: .decryptionKey)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.validation != nil {try container.encode(self.validation, forKey: .validation)}
    if self.validationKey != nil {try container.encode(self.validationKey, forKey: .validationKey)}
    if self.decryption != nil {try container.encode(self.decryption, forKey: .decryption)}
    if self.decryptionKey != nil {try container.encode(self.decryptionKey, forKey: .decryptionKey)}
  }
}

extension DataFactory {
  public static func createSiteMachineKeyProtocol() -> SiteMachineKeyProtocol {
    return SiteMachineKeyData()
  }
}
