// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ResourceMetricValueData : ResourceMetricValueProtocol {
    public var timestamp: String?
    public var average: Double?
    public var minimum: Double?
    public var maximum: Double?
    public var total: Double?
    public var count: Double?
    public var properties: [ResourceMetricPropertyProtocol?]?

        enum CodingKeys: String, CodingKey {case timestamp = "timestamp"
        case average = "average"
        case minimum = "minimum"
        case maximum = "maximum"
        case total = "total"
        case count = "count"
        case properties = "properties"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.timestamp) {
        self.timestamp = try container.decode(String?.self, forKey: .timestamp)
    }
    if container.contains(.average) {
        self.average = try container.decode(Double?.self, forKey: .average)
    }
    if container.contains(.minimum) {
        self.minimum = try container.decode(Double?.self, forKey: .minimum)
    }
    if container.contains(.maximum) {
        self.maximum = try container.decode(Double?.self, forKey: .maximum)
    }
    if container.contains(.total) {
        self.total = try container.decode(Double?.self, forKey: .total)
    }
    if container.contains(.count) {
        self.count = try container.decode(Double?.self, forKey: .count)
    }
    if container.contains(.properties) {
        self.properties = try container.decode([ResourceMetricPropertyData?]?.self, forKey: .properties)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.timestamp != nil {try container.encode(self.timestamp, forKey: .timestamp)}
    if self.average != nil {try container.encode(self.average, forKey: .average)}
    if self.minimum != nil {try container.encode(self.minimum, forKey: .minimum)}
    if self.maximum != nil {try container.encode(self.maximum, forKey: .maximum)}
    if self.total != nil {try container.encode(self.total, forKey: .total)}
    if self.count != nil {try container.encode(self.count, forKey: .count)}
    if self.properties != nil {try container.encode(self.properties as! [ResourceMetricPropertyData?]?, forKey: .properties)}
  }
}

extension DataFactory {
  public static func createResourceMetricValueProtocol() -> ResourceMetricValueProtocol {
    return ResourceMetricValueData()
  }
}
