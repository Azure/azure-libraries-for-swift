// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SnapshotRecoveryRequestPropertiesData : SnapshotRecoveryRequestPropertiesProtocol {
    public var snapshotTime: String?
    public var recoveryTarget: SnapshotRecoveryTargetProtocol?
    public var overwrite: Bool?
    public var recoverConfiguration: Bool?
    public var ignoreConflictingHostNames: Bool?

        enum CodingKeys: String, CodingKey {case snapshotTime = "snapshotTime"
        case recoveryTarget = "recoveryTarget"
        case overwrite = "overwrite"
        case recoverConfiguration = "recoverConfiguration"
        case ignoreConflictingHostNames = "ignoreConflictingHostNames"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.snapshotTime) {
        self.snapshotTime = try container.decode(String?.self, forKey: .snapshotTime)
    }
    if container.contains(.recoveryTarget) {
        self.recoveryTarget = try container.decode(SnapshotRecoveryTargetData?.self, forKey: .recoveryTarget)
    }
    if container.contains(.overwrite) {
        self.overwrite = try container.decode(Bool?.self, forKey: .overwrite)
    }
    if container.contains(.recoverConfiguration) {
        self.recoverConfiguration = try container.decode(Bool?.self, forKey: .recoverConfiguration)
    }
    if container.contains(.ignoreConflictingHostNames) {
        self.ignoreConflictingHostNames = try container.decode(Bool?.self, forKey: .ignoreConflictingHostNames)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.snapshotTime != nil {try container.encode(self.snapshotTime, forKey: .snapshotTime)}
    if self.recoveryTarget != nil {try container.encode(self.recoveryTarget as! SnapshotRecoveryTargetData?, forKey: .recoveryTarget)}
    if self.overwrite != nil {try container.encode(self.overwrite, forKey: .overwrite)}
    if self.recoverConfiguration != nil {try container.encode(self.recoverConfiguration, forKey: .recoverConfiguration)}
    if self.ignoreConflictingHostNames != nil {try container.encode(self.ignoreConflictingHostNames, forKey: .ignoreConflictingHostNames)}
  }
}

extension DataFactory {
  public static func createSnapshotRecoveryRequestPropertiesProtocol() -> SnapshotRecoveryRequestPropertiesProtocol {
    return SnapshotRecoveryRequestPropertiesData()
  }
}
