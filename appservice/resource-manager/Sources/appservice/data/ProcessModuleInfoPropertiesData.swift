// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ProcessModuleInfoPropertiesData : ProcessModuleInfoPropertiesProtocol {
    public var baseAddress: String?
    public var fileName: String?
    public var href: String?
    public var filePath: String?
    public var moduleMemorySize: Int32?
    public var fileVersion: String?
    public var fileDescription: String?
    public var product: String?
    public var productVersion: String?
    public var isDebug: Bool?
    public var language: String?

        enum CodingKeys: String, CodingKey {case baseAddress = "baseAddress"
        case fileName = "fileName"
        case href = "href"
        case filePath = "filePath"
        case moduleMemorySize = "moduleMemorySize"
        case fileVersion = "fileVersion"
        case fileDescription = "fileDescription"
        case product = "product"
        case productVersion = "productVersion"
        case isDebug = "isDebug"
        case language = "language"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.baseAddress) {
        self.baseAddress = try container.decode(String?.self, forKey: .baseAddress)
    }
    if container.contains(.fileName) {
        self.fileName = try container.decode(String?.self, forKey: .fileName)
    }
    if container.contains(.href) {
        self.href = try container.decode(String?.self, forKey: .href)
    }
    if container.contains(.filePath) {
        self.filePath = try container.decode(String?.self, forKey: .filePath)
    }
    if container.contains(.moduleMemorySize) {
        self.moduleMemorySize = try container.decode(Int32?.self, forKey: .moduleMemorySize)
    }
    if container.contains(.fileVersion) {
        self.fileVersion = try container.decode(String?.self, forKey: .fileVersion)
    }
    if container.contains(.fileDescription) {
        self.fileDescription = try container.decode(String?.self, forKey: .fileDescription)
    }
    if container.contains(.product) {
        self.product = try container.decode(String?.self, forKey: .product)
    }
    if container.contains(.productVersion) {
        self.productVersion = try container.decode(String?.self, forKey: .productVersion)
    }
    if container.contains(.isDebug) {
        self.isDebug = try container.decode(Bool?.self, forKey: .isDebug)
    }
    if container.contains(.language) {
        self.language = try container.decode(String?.self, forKey: .language)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.baseAddress != nil {try container.encode(self.baseAddress, forKey: .baseAddress)}
    if self.fileName != nil {try container.encode(self.fileName, forKey: .fileName)}
    if self.href != nil {try container.encode(self.href, forKey: .href)}
    if self.filePath != nil {try container.encode(self.filePath, forKey: .filePath)}
    if self.moduleMemorySize != nil {try container.encode(self.moduleMemorySize, forKey: .moduleMemorySize)}
    if self.fileVersion != nil {try container.encode(self.fileVersion, forKey: .fileVersion)}
    if self.fileDescription != nil {try container.encode(self.fileDescription, forKey: .fileDescription)}
    if self.product != nil {try container.encode(self.product, forKey: .product)}
    if self.productVersion != nil {try container.encode(self.productVersion, forKey: .productVersion)}
    if self.isDebug != nil {try container.encode(self.isDebug, forKey: .isDebug)}
    if self.language != nil {try container.encode(self.language, forKey: .language)}
  }
}

extension DataFactory {
  public static func createProcessModuleInfoPropertiesProtocol() -> ProcessModuleInfoPropertiesProtocol {
    return ProcessModuleInfoPropertiesData()
  }
}
