// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StatusCodesBasedTriggerData : StatusCodesBasedTriggerProtocol {
    public var status: Int32?
    public var subStatus: Int32?
    public var win32Status: Int32?
    public var count: Int32?
    public var timeInterval: String?

        enum CodingKeys: String, CodingKey {case status = "status"
        case subStatus = "subStatus"
        case win32Status = "win32Status"
        case count = "count"
        case timeInterval = "timeInterval"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.status) {
        self.status = try container.decode(Int32?.self, forKey: .status)
    }
    if container.contains(.subStatus) {
        self.subStatus = try container.decode(Int32?.self, forKey: .subStatus)
    }
    if container.contains(.win32Status) {
        self.win32Status = try container.decode(Int32?.self, forKey: .win32Status)
    }
    if container.contains(.count) {
        self.count = try container.decode(Int32?.self, forKey: .count)
    }
    if container.contains(.timeInterval) {
        self.timeInterval = try container.decode(String?.self, forKey: .timeInterval)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.subStatus != nil {try container.encode(self.subStatus, forKey: .subStatus)}
    if self.win32Status != nil {try container.encode(self.win32Status, forKey: .win32Status)}
    if self.count != nil {try container.encode(self.count, forKey: .count)}
    if self.timeInterval != nil {try container.encode(self.timeInterval, forKey: .timeInterval)}
  }
}

extension DataFactory {
  public static func createStatusCodesBasedTriggerProtocol() -> StatusCodesBasedTriggerProtocol {
    return StatusCodesBasedTriggerData()
  }
}
