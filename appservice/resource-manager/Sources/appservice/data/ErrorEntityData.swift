// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ErrorEntityData : ErrorEntityProtocol {
    public var extendedCode: String?
    public var messageTemplate: String?
    public var parameters: [String]?
    public var innerErrors: [ErrorEntityProtocol?]?
    public var code: String?
    public var message: String?

        enum CodingKeys: String, CodingKey {case extendedCode = "extendedCode"
        case messageTemplate = "messageTemplate"
        case parameters = "parameters"
        case innerErrors = "innerErrors"
        case code = "code"
        case message = "message"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.extendedCode) {
        self.extendedCode = try container.decode(String?.self, forKey: .extendedCode)
    }
    if container.contains(.messageTemplate) {
        self.messageTemplate = try container.decode(String?.self, forKey: .messageTemplate)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([String]?.self, forKey: .parameters)
    }
    if container.contains(.innerErrors) {
        self.innerErrors = try container.decode([ErrorEntityData?]?.self, forKey: .innerErrors)
    }
    if container.contains(.code) {
        self.code = try container.decode(String?.self, forKey: .code)
    }
    if container.contains(.message) {
        self.message = try container.decode(String?.self, forKey: .message)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.extendedCode != nil {try container.encode(self.extendedCode, forKey: .extendedCode)}
    if self.messageTemplate != nil {try container.encode(self.messageTemplate, forKey: .messageTemplate)}
    if self.parameters != nil {try container.encode(self.parameters as! [String]?, forKey: .parameters)}
    if self.innerErrors != nil {try container.encode(self.innerErrors as! [ErrorEntityData?]?, forKey: .innerErrors)}
    if self.code != nil {try container.encode(self.code, forKey: .code)}
    if self.message != nil {try container.encode(self.message, forKey: .message)}
  }
}

extension DataFactory {
  public static func createErrorEntityProtocol() -> ErrorEntityProtocol {
    return ErrorEntityData()
  }
}
