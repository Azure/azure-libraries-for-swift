// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SitePropertiesData : SitePropertiesProtocol {
    public var state: String?
    public var hostNames: [String]?
    public var repositorySiteName: String?
    public var usageState: UsageStateEnum?
    public var enabled: Bool?
    public var enabledHostNames: [String]?
    public var availabilityState: SiteAvailabilityStateEnum?
    public var hostNameSslStates: [HostNameSslStateProtocol?]?
    public var serverFarmId: String?
    public var reserved: Bool?
    public var lastModifiedTimeUtc: Date?
    public var siteConfig: SiteConfigProtocol?
    public var trafficManagerHostNames: [String]?
    public var scmSiteAlsoStopped: Bool?
    public var targetSwapSlot: String?
    public var hostingEnvironmentProfile: HostingEnvironmentProfileProtocol?
    public var clientAffinityEnabled: Bool?
    public var clientCertEnabled: Bool?
    public var hostNamesDisabled: Bool?
    public var outboundIpAddresses: String?
    public var possibleOutboundIpAddresses: String?
    public var containerSize: Int32?
    public var dailyMemoryTimeQuota: Int32?
    public var suspendedTill: Date?
    public var maxNumberOfWorkers: Int32?
    public var cloningInfo: CloningInfoProtocol?
    public var snapshotInfo: SnapshotRecoveryRequestProtocol?
    public var resourceGroup: String?
    public var isDefaultContainer: Bool?
    public var defaultHostName: String?
    public var slotSwapStatus: SlotSwapStatusProtocol?
    public var httpsOnly: Bool?

        enum CodingKeys: String, CodingKey {case state = "state"
        case hostNames = "hostNames"
        case repositorySiteName = "repositorySiteName"
        case usageState = "usageState"
        case enabled = "enabled"
        case enabledHostNames = "enabledHostNames"
        case availabilityState = "availabilityState"
        case hostNameSslStates = "hostNameSslStates"
        case serverFarmId = "serverFarmId"
        case reserved = "reserved"
        case lastModifiedTimeUtc = "lastModifiedTimeUtc"
        case siteConfig = "siteConfig"
        case trafficManagerHostNames = "trafficManagerHostNames"
        case scmSiteAlsoStopped = "scmSiteAlsoStopped"
        case targetSwapSlot = "targetSwapSlot"
        case hostingEnvironmentProfile = "hostingEnvironmentProfile"
        case clientAffinityEnabled = "clientAffinityEnabled"
        case clientCertEnabled = "clientCertEnabled"
        case hostNamesDisabled = "hostNamesDisabled"
        case outboundIpAddresses = "outboundIpAddresses"
        case possibleOutboundIpAddresses = "possibleOutboundIpAddresses"
        case containerSize = "containerSize"
        case dailyMemoryTimeQuota = "dailyMemoryTimeQuota"
        case suspendedTill = "suspendedTill"
        case maxNumberOfWorkers = "maxNumberOfWorkers"
        case cloningInfo = "cloningInfo"
        case snapshotInfo = "snapshotInfo"
        case resourceGroup = "resourceGroup"
        case isDefaultContainer = "isDefaultContainer"
        case defaultHostName = "defaultHostName"
        case slotSwapStatus = "slotSwapStatus"
        case httpsOnly = "httpsOnly"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.state) {
        self.state = try container.decode(String?.self, forKey: .state)
    }
    if container.contains(.hostNames) {
        self.hostNames = try container.decode([String]?.self, forKey: .hostNames)
    }
    if container.contains(.repositorySiteName) {
        self.repositorySiteName = try container.decode(String?.self, forKey: .repositorySiteName)
    }
    if container.contains(.usageState) {
        self.usageState = try container.decode(UsageStateEnum?.self, forKey: .usageState)
    }
    if container.contains(.enabled) {
        self.enabled = try container.decode(Bool?.self, forKey: .enabled)
    }
    if container.contains(.enabledHostNames) {
        self.enabledHostNames = try container.decode([String]?.self, forKey: .enabledHostNames)
    }
    if container.contains(.availabilityState) {
        self.availabilityState = try container.decode(SiteAvailabilityStateEnum?.self, forKey: .availabilityState)
    }
    if container.contains(.hostNameSslStates) {
        self.hostNameSslStates = try container.decode([HostNameSslStateData?]?.self, forKey: .hostNameSslStates)
    }
    if container.contains(.serverFarmId) {
        self.serverFarmId = try container.decode(String?.self, forKey: .serverFarmId)
    }
    if container.contains(.reserved) {
        self.reserved = try container.decode(Bool?.self, forKey: .reserved)
    }
    if container.contains(.lastModifiedTimeUtc) {
        self.lastModifiedTimeUtc = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModifiedTimeUtc)), format: .dateTime)
    }
    if container.contains(.siteConfig) {
        self.siteConfig = try container.decode(SiteConfigData?.self, forKey: .siteConfig)
    }
    if container.contains(.trafficManagerHostNames) {
        self.trafficManagerHostNames = try container.decode([String]?.self, forKey: .trafficManagerHostNames)
    }
    if container.contains(.scmSiteAlsoStopped) {
        self.scmSiteAlsoStopped = try container.decode(Bool?.self, forKey: .scmSiteAlsoStopped)
    }
    if container.contains(.targetSwapSlot) {
        self.targetSwapSlot = try container.decode(String?.self, forKey: .targetSwapSlot)
    }
    if container.contains(.hostingEnvironmentProfile) {
        self.hostingEnvironmentProfile = try container.decode(HostingEnvironmentProfileData?.self, forKey: .hostingEnvironmentProfile)
    }
    if container.contains(.clientAffinityEnabled) {
        self.clientAffinityEnabled = try container.decode(Bool?.self, forKey: .clientAffinityEnabled)
    }
    if container.contains(.clientCertEnabled) {
        self.clientCertEnabled = try container.decode(Bool?.self, forKey: .clientCertEnabled)
    }
    if container.contains(.hostNamesDisabled) {
        self.hostNamesDisabled = try container.decode(Bool?.self, forKey: .hostNamesDisabled)
    }
    if container.contains(.outboundIpAddresses) {
        self.outboundIpAddresses = try container.decode(String?.self, forKey: .outboundIpAddresses)
    }
    if container.contains(.possibleOutboundIpAddresses) {
        self.possibleOutboundIpAddresses = try container.decode(String?.self, forKey: .possibleOutboundIpAddresses)
    }
    if container.contains(.containerSize) {
        self.containerSize = try container.decode(Int32?.self, forKey: .containerSize)
    }
    if container.contains(.dailyMemoryTimeQuota) {
        self.dailyMemoryTimeQuota = try container.decode(Int32?.self, forKey: .dailyMemoryTimeQuota)
    }
    if container.contains(.suspendedTill) {
        self.suspendedTill = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .suspendedTill)), format: .dateTime)
    }
    if container.contains(.maxNumberOfWorkers) {
        self.maxNumberOfWorkers = try container.decode(Int32?.self, forKey: .maxNumberOfWorkers)
    }
    if container.contains(.cloningInfo) {
        self.cloningInfo = try container.decode(CloningInfoData?.self, forKey: .cloningInfo)
    }
    if container.contains(.snapshotInfo) {
        self.snapshotInfo = try container.decode(SnapshotRecoveryRequestData?.self, forKey: .snapshotInfo)
    }
    if container.contains(.resourceGroup) {
        self.resourceGroup = try container.decode(String?.self, forKey: .resourceGroup)
    }
    if container.contains(.isDefaultContainer) {
        self.isDefaultContainer = try container.decode(Bool?.self, forKey: .isDefaultContainer)
    }
    if container.contains(.defaultHostName) {
        self.defaultHostName = try container.decode(String?.self, forKey: .defaultHostName)
    }
    if container.contains(.slotSwapStatus) {
        self.slotSwapStatus = try container.decode(SlotSwapStatusData?.self, forKey: .slotSwapStatus)
    }
    if container.contains(.httpsOnly) {
        self.httpsOnly = try container.decode(Bool?.self, forKey: .httpsOnly)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.hostNames != nil {try container.encode(self.hostNames as! [String]?, forKey: .hostNames)}
    if self.repositorySiteName != nil {try container.encode(self.repositorySiteName, forKey: .repositorySiteName)}
    if self.usageState != nil {try container.encode(self.usageState, forKey: .usageState)}
    if self.enabled != nil {try container.encode(self.enabled, forKey: .enabled)}
    if self.enabledHostNames != nil {try container.encode(self.enabledHostNames as! [String]?, forKey: .enabledHostNames)}
    if self.availabilityState != nil {try container.encode(self.availabilityState, forKey: .availabilityState)}
    if self.hostNameSslStates != nil {try container.encode(self.hostNameSslStates as! [HostNameSslStateData?]?, forKey: .hostNameSslStates)}
    if self.serverFarmId != nil {try container.encode(self.serverFarmId, forKey: .serverFarmId)}
    if self.reserved != nil {try container.encode(self.reserved, forKey: .reserved)}
    if self.lastModifiedTimeUtc != nil {
        try container.encode(DateConverter.toString(date: self.lastModifiedTimeUtc!, format: .dateTime), forKey: .lastModifiedTimeUtc)
    }
    if self.siteConfig != nil {try container.encode(self.siteConfig as! SiteConfigData?, forKey: .siteConfig)}
    if self.trafficManagerHostNames != nil {try container.encode(self.trafficManagerHostNames as! [String]?, forKey: .trafficManagerHostNames)}
    if self.scmSiteAlsoStopped != nil {try container.encode(self.scmSiteAlsoStopped, forKey: .scmSiteAlsoStopped)}
    if self.targetSwapSlot != nil {try container.encode(self.targetSwapSlot, forKey: .targetSwapSlot)}
    if self.hostingEnvironmentProfile != nil {try container.encode(self.hostingEnvironmentProfile as! HostingEnvironmentProfileData?, forKey: .hostingEnvironmentProfile)}
    if self.clientAffinityEnabled != nil {try container.encode(self.clientAffinityEnabled, forKey: .clientAffinityEnabled)}
    if self.clientCertEnabled != nil {try container.encode(self.clientCertEnabled, forKey: .clientCertEnabled)}
    if self.hostNamesDisabled != nil {try container.encode(self.hostNamesDisabled, forKey: .hostNamesDisabled)}
    if self.outboundIpAddresses != nil {try container.encode(self.outboundIpAddresses, forKey: .outboundIpAddresses)}
    if self.possibleOutboundIpAddresses != nil {try container.encode(self.possibleOutboundIpAddresses, forKey: .possibleOutboundIpAddresses)}
    if self.containerSize != nil {try container.encode(self.containerSize, forKey: .containerSize)}
    if self.dailyMemoryTimeQuota != nil {try container.encode(self.dailyMemoryTimeQuota, forKey: .dailyMemoryTimeQuota)}
    if self.suspendedTill != nil {
        try container.encode(DateConverter.toString(date: self.suspendedTill!, format: .dateTime), forKey: .suspendedTill)
    }
    if self.maxNumberOfWorkers != nil {try container.encode(self.maxNumberOfWorkers, forKey: .maxNumberOfWorkers)}
    if self.cloningInfo != nil {try container.encode(self.cloningInfo as! CloningInfoData?, forKey: .cloningInfo)}
    if self.snapshotInfo != nil {try container.encode(self.snapshotInfo as! SnapshotRecoveryRequestData?, forKey: .snapshotInfo)}
    if self.resourceGroup != nil {try container.encode(self.resourceGroup, forKey: .resourceGroup)}
    if self.isDefaultContainer != nil {try container.encode(self.isDefaultContainer, forKey: .isDefaultContainer)}
    if self.defaultHostName != nil {try container.encode(self.defaultHostName, forKey: .defaultHostName)}
    if self.slotSwapStatus != nil {try container.encode(self.slotSwapStatus as! SlotSwapStatusData?, forKey: .slotSwapStatus)}
    if self.httpsOnly != nil {try container.encode(self.httpsOnly, forKey: .httpsOnly)}
  }
}

extension DataFactory {
  public static func createSitePropertiesProtocol() -> SitePropertiesProtocol {
    return SitePropertiesData()
  }
}
