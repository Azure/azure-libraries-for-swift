// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SiteLimitsData : SiteLimitsProtocol {
    public var maxPercentageCpu: Double?
    public var maxMemoryInMb: Int64?
    public var maxDiskSizeInMb: Int64?

        enum CodingKeys: String, CodingKey {case maxPercentageCpu = "maxPercentageCpu"
        case maxMemoryInMb = "maxMemoryInMb"
        case maxDiskSizeInMb = "maxDiskSizeInMb"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.maxPercentageCpu) {
        self.maxPercentageCpu = try container.decode(Double?.self, forKey: .maxPercentageCpu)
    }
    if container.contains(.maxMemoryInMb) {
        self.maxMemoryInMb = try container.decode(Int64?.self, forKey: .maxMemoryInMb)
    }
    if container.contains(.maxDiskSizeInMb) {
        self.maxDiskSizeInMb = try container.decode(Int64?.self, forKey: .maxDiskSizeInMb)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.maxPercentageCpu != nil {try container.encode(self.maxPercentageCpu, forKey: .maxPercentageCpu)}
    if self.maxMemoryInMb != nil {try container.encode(self.maxMemoryInMb, forKey: .maxMemoryInMb)}
    if self.maxDiskSizeInMb != nil {try container.encode(self.maxDiskSizeInMb, forKey: .maxDiskSizeInMb)}
  }
}

extension DataFactory {
  public static func createSiteLimitsProtocol() -> SiteLimitsProtocol {
    return SiteLimitsData()
  }
}
