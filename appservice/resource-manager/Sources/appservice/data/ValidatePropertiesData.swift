// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ValidatePropertiesData : ValidatePropertiesProtocol {
    public var serverFarmId: String?
    public var skuName: String?
    public var needLinuxWorkers: Bool?
    public var isSpot: Bool?
    public var capacity: Int32?
    public var hostingEnvironment: String?

        enum CodingKeys: String, CodingKey {case serverFarmId = "serverFarmId"
        case skuName = "skuName"
        case needLinuxWorkers = "needLinuxWorkers"
        case isSpot = "isSpot"
        case capacity = "capacity"
        case hostingEnvironment = "hostingEnvironment"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.serverFarmId) {
        self.serverFarmId = try container.decode(String?.self, forKey: .serverFarmId)
    }
    if container.contains(.skuName) {
        self.skuName = try container.decode(String?.self, forKey: .skuName)
    }
    if container.contains(.needLinuxWorkers) {
        self.needLinuxWorkers = try container.decode(Bool?.self, forKey: .needLinuxWorkers)
    }
    if container.contains(.isSpot) {
        self.isSpot = try container.decode(Bool?.self, forKey: .isSpot)
    }
    if container.contains(.capacity) {
        self.capacity = try container.decode(Int32?.self, forKey: .capacity)
    }
    if container.contains(.hostingEnvironment) {
        self.hostingEnvironment = try container.decode(String?.self, forKey: .hostingEnvironment)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.serverFarmId != nil {try container.encode(self.serverFarmId, forKey: .serverFarmId)}
    if self.skuName != nil {try container.encode(self.skuName, forKey: .skuName)}
    if self.needLinuxWorkers != nil {try container.encode(self.needLinuxWorkers, forKey: .needLinuxWorkers)}
    if self.isSpot != nil {try container.encode(self.isSpot, forKey: .isSpot)}
    if self.capacity != nil {try container.encode(self.capacity, forKey: .capacity)}
    if self.hostingEnvironment != nil {try container.encode(self.hostingEnvironment, forKey: .hostingEnvironment)}
  }
}

extension DataFactory {
  public static func createValidatePropertiesProtocol() -> ValidatePropertiesProtocol {
    return ValidatePropertiesData()
  }
}
