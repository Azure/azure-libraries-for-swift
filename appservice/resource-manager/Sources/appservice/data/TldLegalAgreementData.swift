// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TldLegalAgreementData : TldLegalAgreementProtocol {
    public var agreementKey: String
    public var title: String
    public var content: String
    public var url: String?

        enum CodingKeys: String, CodingKey {case agreementKey = "agreementKey"
        case title = "title"
        case content = "content"
        case url = "url"
        }

  public init(agreementKey: String, title: String, content: String)  {
    self.agreementKey = agreementKey
    self.title = title
    self.content = content
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.agreementKey = try container.decode(String.self, forKey: .agreementKey)
    self.title = try container.decode(String.self, forKey: .title)
    self.content = try container.decode(String.self, forKey: .content)
    if container.contains(.url) {
        self.url = try container.decode(String?.self, forKey: .url)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.agreementKey, forKey: .agreementKey)
    try container.encode(self.title, forKey: .title)
    try container.encode(self.content, forKey: .content)
    if self.url != nil {try container.encode(self.url, forKey: .url)}
  }
}

extension DataFactory {
  public static func createTldLegalAgreementProtocol(agreementKey: String, title: String, content: String) -> TldLegalAgreementProtocol {
    return TldLegalAgreementData(agreementKey: agreementKey, title: title, content: content)
  }
}
