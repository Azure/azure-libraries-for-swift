// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BackupScheduleData : BackupScheduleProtocol {
    public var frequencyInterval: Int32
    public var frequencyUnit: FrequencyUnitEnum
    public var keepAtLeastOneBackup: Bool
    public var retentionPeriodInDays: Int32
    public var startTime: Date?
    public var lastExecutionTime: Date?

        enum CodingKeys: String, CodingKey {case frequencyInterval = "frequencyInterval"
        case frequencyUnit = "frequencyUnit"
        case keepAtLeastOneBackup = "keepAtLeastOneBackup"
        case retentionPeriodInDays = "retentionPeriodInDays"
        case startTime = "startTime"
        case lastExecutionTime = "lastExecutionTime"
        }

  public init(frequencyInterval: Int32, frequencyUnit: FrequencyUnitEnum, keepAtLeastOneBackup: Bool, retentionPeriodInDays: Int32)  {
    self.frequencyInterval = frequencyInterval
    self.frequencyUnit = frequencyUnit
    self.keepAtLeastOneBackup = keepAtLeastOneBackup
    self.retentionPeriodInDays = retentionPeriodInDays
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.frequencyInterval = try container.decode(Int32.self, forKey: .frequencyInterval)
    self.frequencyUnit = try container.decode(FrequencyUnitEnum.self, forKey: .frequencyUnit)
    self.keepAtLeastOneBackup = try container.decode(Bool.self, forKey: .keepAtLeastOneBackup)
    self.retentionPeriodInDays = try container.decode(Int32.self, forKey: .retentionPeriodInDays)
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.lastExecutionTime) {
        self.lastExecutionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastExecutionTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.frequencyInterval, forKey: .frequencyInterval)
    try container.encode(self.frequencyUnit, forKey: .frequencyUnit)
    try container.encode(self.keepAtLeastOneBackup, forKey: .keepAtLeastOneBackup)
    try container.encode(self.retentionPeriodInDays, forKey: .retentionPeriodInDays)
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.lastExecutionTime != nil {
        try container.encode(DateConverter.toString(date: self.lastExecutionTime!, format: .dateTime), forKey: .lastExecutionTime)
    }
  }
}

extension DataFactory {
  public static func createBackupScheduleProtocol(frequencyInterval: Int32, frequencyUnit: FrequencyUnitEnum, keepAtLeastOneBackup: Bool, retentionPeriodInDays: Int32) -> BackupScheduleProtocol {
    return BackupScheduleData(frequencyInterval: frequencyInterval, frequencyUnit: frequencyUnit, keepAtLeastOneBackup: keepAtLeastOneBackup, retentionPeriodInDays: retentionPeriodInDays)
  }
}
