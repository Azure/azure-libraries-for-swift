// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CsmSlotEntityData : CsmSlotEntityProtocol {
    public var targetSlot: String
    public var preserveVnet: Bool

        enum CodingKeys: String, CodingKey {case targetSlot = "targetSlot"
        case preserveVnet = "preserveVnet"
        }

  public init(targetSlot: String, preserveVnet: Bool)  {
    self.targetSlot = targetSlot
    self.preserveVnet = preserveVnet
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.targetSlot = try container.decode(String.self, forKey: .targetSlot)
    self.preserveVnet = try container.decode(Bool.self, forKey: .preserveVnet)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.targetSlot, forKey: .targetSlot)
    try container.encode(self.preserveVnet, forKey: .preserveVnet)
  }
}

extension DataFactory {
  public static func createCsmSlotEntityProtocol(targetSlot: String, preserveVnet: Bool) -> CsmSlotEntityProtocol {
    return CsmSlotEntityData(targetSlot: targetSlot, preserveVnet: preserveVnet)
  }
}
