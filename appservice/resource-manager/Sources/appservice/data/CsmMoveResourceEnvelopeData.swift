// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CsmMoveResourceEnvelopeData : CsmMoveResourceEnvelopeProtocol {
    public var targetResourceGroup: String?
    public var resources: [String]?

        enum CodingKeys: String, CodingKey {case targetResourceGroup = "targetResourceGroup"
        case resources = "resources"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.targetResourceGroup) {
        self.targetResourceGroup = try container.decode(String?.self, forKey: .targetResourceGroup)
    }
    if container.contains(.resources) {
        self.resources = try container.decode([String]?.self, forKey: .resources)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.targetResourceGroup != nil {try container.encode(self.targetResourceGroup, forKey: .targetResourceGroup)}
    if self.resources != nil {try container.encode(self.resources as! [String]?, forKey: .resources)}
  }
}

extension DataFactory {
  public static func createCsmMoveResourceEnvelopeProtocol() -> CsmMoveResourceEnvelopeProtocol {
    return CsmMoveResourceEnvelopeData()
  }
}
