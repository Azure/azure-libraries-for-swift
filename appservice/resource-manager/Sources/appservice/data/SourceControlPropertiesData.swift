// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SourceControlPropertiesData : SourceControlPropertiesProtocol {
    public var name: String?
    public var token: String?
    public var tokenSecret: String?
    public var refreshToken: String?
    public var expirationTime: Date?

        enum CodingKeys: String, CodingKey {case name = "name"
        case token = "token"
        case tokenSecret = "tokenSecret"
        case refreshToken = "refreshToken"
        case expirationTime = "expirationTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.token) {
        self.token = try container.decode(String?.self, forKey: .token)
    }
    if container.contains(.tokenSecret) {
        self.tokenSecret = try container.decode(String?.self, forKey: .tokenSecret)
    }
    if container.contains(.refreshToken) {
        self.refreshToken = try container.decode(String?.self, forKey: .refreshToken)
    }
    if container.contains(.expirationTime) {
        self.expirationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .expirationTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.token != nil {try container.encode(self.token, forKey: .token)}
    if self.tokenSecret != nil {try container.encode(self.tokenSecret, forKey: .tokenSecret)}
    if self.refreshToken != nil {try container.encode(self.refreshToken, forKey: .refreshToken)}
    if self.expirationTime != nil {
        try container.encode(DateConverter.toString(date: self.expirationTime!, format: .dateTime), forKey: .expirationTime)
    }
  }
}

extension DataFactory {
  public static func createSourceControlPropertiesProtocol() -> SourceControlPropertiesProtocol {
    return SourceControlPropertiesData()
  }
}
