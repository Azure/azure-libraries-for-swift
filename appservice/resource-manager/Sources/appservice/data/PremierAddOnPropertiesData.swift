// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PremierAddOnPropertiesData : PremierAddOnPropertiesProtocol {
    public var sku: String?
    public var product: String?
    public var vendor: String?
    public var premierAddOnName: String?
    public var location: String?
    public var tags: [String:String]?
    public var marketplacePublisher: String?
    public var marketplaceOffer: String?

        enum CodingKeys: String, CodingKey {case sku = "sku"
        case product = "product"
        case vendor = "vendor"
        case premierAddOnName = "name"
        case location = "location"
        case tags = "tags"
        case marketplacePublisher = "marketplacePublisher"
        case marketplaceOffer = "marketplaceOffer"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.sku) {
        self.sku = try container.decode(String?.self, forKey: .sku)
    }
    if container.contains(.product) {
        self.product = try container.decode(String?.self, forKey: .product)
    }
    if container.contains(.vendor) {
        self.vendor = try container.decode(String?.self, forKey: .vendor)
    }
    if container.contains(.premierAddOnName) {
        self.premierAddOnName = try container.decode(String?.self, forKey: .premierAddOnName)
    }
    if container.contains(.location) {
        self.location = try container.decode(String?.self, forKey: .location)
    }
    if container.contains(.tags) {
        self.tags = try container.decode([String:String]?.self, forKey: .tags)
    }
    if container.contains(.marketplacePublisher) {
        self.marketplacePublisher = try container.decode(String?.self, forKey: .marketplacePublisher)
    }
    if container.contains(.marketplaceOffer) {
        self.marketplaceOffer = try container.decode(String?.self, forKey: .marketplaceOffer)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.sku != nil {try container.encode(self.sku, forKey: .sku)}
    if self.product != nil {try container.encode(self.product, forKey: .product)}
    if self.vendor != nil {try container.encode(self.vendor, forKey: .vendor)}
    if self.premierAddOnName != nil {try container.encode(self.premierAddOnName, forKey: .premierAddOnName)}
    if self.location != nil {try container.encode(self.location, forKey: .location)}
    if self.tags != nil {try container.encode(self.tags, forKey: .tags)}
    if self.marketplacePublisher != nil {try container.encode(self.marketplacePublisher, forKey: .marketplacePublisher)}
    if self.marketplaceOffer != nil {try container.encode(self.marketplaceOffer, forKey: .marketplaceOffer)}
  }
}

extension DataFactory {
  public static func createPremierAddOnPropertiesProtocol() -> PremierAddOnPropertiesProtocol {
    return PremierAddOnPropertiesData()
  }
}
