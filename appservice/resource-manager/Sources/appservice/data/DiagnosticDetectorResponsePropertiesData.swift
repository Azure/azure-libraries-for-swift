// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DiagnosticDetectorResponsePropertiesData : DiagnosticDetectorResponsePropertiesProtocol {
    public var startTime: Date?
    public var endTime: Date?
    public var issueDetected: Bool?
    public var detectorDefinition: DetectorDefinitionProtocol?
    public var metrics: [DiagnosticMetricSetProtocol?]?
    public var abnormalTimePeriods: [DetectorAbnormalTimePeriodProtocol?]?
    public var data: [[NameValuePairProtocol?]?]?
    public var responseMetaData: ResponseMetaDataProtocol?

        enum CodingKeys: String, CodingKey {case startTime = "startTime"
        case endTime = "endTime"
        case issueDetected = "issueDetected"
        case detectorDefinition = "detectorDefinition"
        case metrics = "metrics"
        case abnormalTimePeriods = "abnormalTimePeriods"
        case data = "data"
        case responseMetaData = "responseMetaData"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.issueDetected) {
        self.issueDetected = try container.decode(Bool?.self, forKey: .issueDetected)
    }
    if container.contains(.detectorDefinition) {
        self.detectorDefinition = try container.decode(DetectorDefinitionData?.self, forKey: .detectorDefinition)
    }
    if container.contains(.metrics) {
        self.metrics = try container.decode([DiagnosticMetricSetData?]?.self, forKey: .metrics)
    }
    if container.contains(.abnormalTimePeriods) {
        self.abnormalTimePeriods = try container.decode([DetectorAbnormalTimePeriodData?]?.self, forKey: .abnormalTimePeriods)
    }
    if container.contains(.data) {
        self.data = try container.decode([[NameValuePairData?]?]?.self, forKey: .data)
    }
    if container.contains(.responseMetaData) {
        self.responseMetaData = try container.decode(ResponseMetaDataData?.self, forKey: .responseMetaData)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.issueDetected != nil {try container.encode(self.issueDetected, forKey: .issueDetected)}
    if self.detectorDefinition != nil {try container.encode(self.detectorDefinition as! DetectorDefinitionData?, forKey: .detectorDefinition)}
    if self.metrics != nil {try container.encode(self.metrics as! [DiagnosticMetricSetData?]?, forKey: .metrics)}
    if self.abnormalTimePeriods != nil {try container.encode(self.abnormalTimePeriods as! [DetectorAbnormalTimePeriodData?]?, forKey: .abnormalTimePeriods)}
    if self.data != nil {try container.encode(self.data as! [[NameValuePairData?]?]?, forKey: .data)}
    if self.responseMetaData != nil {try container.encode(self.responseMetaData as! ResponseMetaDataData?, forKey: .responseMetaData)}
  }
}

extension DataFactory {
  public static func createDiagnosticDetectorResponsePropertiesProtocol() -> DiagnosticDetectorResponsePropertiesProtocol {
    return DiagnosticDetectorResponsePropertiesData()
  }
}
