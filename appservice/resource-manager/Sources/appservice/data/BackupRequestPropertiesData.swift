// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BackupRequestPropertiesData : BackupRequestPropertiesProtocol {
    public var backupRequestName: String?
    public var enabled: Bool?
    public var storageAccountUrl: String?
    public var backupSchedule: BackupScheduleProtocol?
    public var databases: [DatabaseBackupSettingProtocol?]?
    public var type: BackupRestoreOperationTypeEnum?

        enum CodingKeys: String, CodingKey {case backupRequestName = "name"
        case enabled = "enabled"
        case storageAccountUrl = "storageAccountUrl"
        case backupSchedule = "backupSchedule"
        case databases = "databases"
        case type = "type"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.backupRequestName) {
        self.backupRequestName = try container.decode(String?.self, forKey: .backupRequestName)
    }
    if container.contains(.enabled) {
        self.enabled = try container.decode(Bool?.self, forKey: .enabled)
    }
    if container.contains(.storageAccountUrl) {
        self.storageAccountUrl = try container.decode(String?.self, forKey: .storageAccountUrl)
    }
    if container.contains(.backupSchedule) {
        self.backupSchedule = try container.decode(BackupScheduleData?.self, forKey: .backupSchedule)
    }
    if container.contains(.databases) {
        self.databases = try container.decode([DatabaseBackupSettingData?]?.self, forKey: .databases)
    }
    if container.contains(.type) {
        self.type = try container.decode(BackupRestoreOperationTypeEnum?.self, forKey: .type)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.backupRequestName != nil {try container.encode(self.backupRequestName, forKey: .backupRequestName)}
    if self.enabled != nil {try container.encode(self.enabled, forKey: .enabled)}
    if self.storageAccountUrl != nil {try container.encode(self.storageAccountUrl, forKey: .storageAccountUrl)}
    if self.backupSchedule != nil {try container.encode(self.backupSchedule as! BackupScheduleData?, forKey: .backupSchedule)}
    if self.databases != nil {try container.encode(self.databases as! [DatabaseBackupSettingData?]?, forKey: .databases)}
    if self.type != nil {try container.encode(self.type, forKey: .type)}
  }
}

extension DataFactory {
  public static func createBackupRequestPropertiesProtocol() -> BackupRequestPropertiesProtocol {
    return BackupRequestPropertiesData()
  }
}
