// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkFeaturesPropertiesData : NetworkFeaturesPropertiesProtocol {
    public var virtualNetworkName: String?
    public var virtualNetworkConnection: VnetInfoProtocol?
    public var hybridConnections: [RelayServiceConnectionEntityProtocol?]?
    public var hybridConnectionsV2: [HybridConnectionProtocol?]?

        enum CodingKeys: String, CodingKey {case virtualNetworkName = "virtualNetworkName"
        case virtualNetworkConnection = "virtualNetworkConnection"
        case hybridConnections = "hybridConnections"
        case hybridConnectionsV2 = "hybridConnectionsV2"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.virtualNetworkName) {
        self.virtualNetworkName = try container.decode(String?.self, forKey: .virtualNetworkName)
    }
    if container.contains(.virtualNetworkConnection) {
        self.virtualNetworkConnection = try container.decode(VnetInfoData?.self, forKey: .virtualNetworkConnection)
    }
    if container.contains(.hybridConnections) {
        self.hybridConnections = try container.decode([RelayServiceConnectionEntityData?]?.self, forKey: .hybridConnections)
    }
    if container.contains(.hybridConnectionsV2) {
        self.hybridConnectionsV2 = try container.decode([HybridConnectionData?]?.self, forKey: .hybridConnectionsV2)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.virtualNetworkName != nil {try container.encode(self.virtualNetworkName, forKey: .virtualNetworkName)}
    if self.virtualNetworkConnection != nil {try container.encode(self.virtualNetworkConnection as! VnetInfoData?, forKey: .virtualNetworkConnection)}
    if self.hybridConnections != nil {try container.encode(self.hybridConnections as! [RelayServiceConnectionEntityData?]?, forKey: .hybridConnections)}
    if self.hybridConnectionsV2 != nil {try container.encode(self.hybridConnectionsV2 as! [HybridConnectionData?]?, forKey: .hybridConnectionsV2)}
  }
}

extension DataFactory {
  public static func createNetworkFeaturesPropertiesProtocol() -> NetworkFeaturesPropertiesProtocol {
    return NetworkFeaturesPropertiesData()
  }
}
