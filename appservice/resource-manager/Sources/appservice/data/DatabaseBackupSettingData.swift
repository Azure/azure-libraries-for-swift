// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DatabaseBackupSettingData : DatabaseBackupSettingProtocol {
    public var databaseType: DatabaseTypeEnum
    public var name: String?
    public var connectionStringName: String?
    public var connectionString: String?

        enum CodingKeys: String, CodingKey {case databaseType = "databaseType"
        case name = "name"
        case connectionStringName = "connectionStringName"
        case connectionString = "connectionString"
        }

  public init(databaseType: DatabaseTypeEnum)  {
    self.databaseType = databaseType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.databaseType = try container.decode(DatabaseTypeEnum.self, forKey: .databaseType)
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.connectionStringName) {
        self.connectionStringName = try container.decode(String?.self, forKey: .connectionStringName)
    }
    if container.contains(.connectionString) {
        self.connectionString = try container.decode(String?.self, forKey: .connectionString)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.databaseType, forKey: .databaseType)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.connectionStringName != nil {try container.encode(self.connectionStringName, forKey: .connectionStringName)}
    if self.connectionString != nil {try container.encode(self.connectionString, forKey: .connectionString)}
  }
}

extension DataFactory {
  public static func createDatabaseBackupSettingProtocol(databaseType: DatabaseTypeEnum) -> DatabaseBackupSettingProtocol {
    return DatabaseBackupSettingData(databaseType: databaseType)
  }
}
