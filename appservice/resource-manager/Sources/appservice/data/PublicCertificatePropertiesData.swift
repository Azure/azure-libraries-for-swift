// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PublicCertificatePropertiesData : PublicCertificatePropertiesProtocol {
    public var blob: [UInt8]?
    public var publicCertificateLocation: PublicCertificateLocationEnum?
    public var thumbprint: String?

        enum CodingKeys: String, CodingKey {case blob = "blob"
        case publicCertificateLocation = "publicCertificateLocation"
        case thumbprint = "thumbprint"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.blob) {
        self.blob = try container.decode([UInt8]?.self, forKey: .blob)
    }
    if container.contains(.publicCertificateLocation) {
        self.publicCertificateLocation = try container.decode(PublicCertificateLocationEnum?.self, forKey: .publicCertificateLocation)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.blob != nil {try container.encode(self.blob, forKey: .blob)}
    if self.publicCertificateLocation != nil {try container.encode(self.publicCertificateLocation, forKey: .publicCertificateLocation)}
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
  }
}

extension DataFactory {
  public static func createPublicCertificatePropertiesProtocol() -> PublicCertificatePropertiesProtocol {
    return PublicCertificatePropertiesData()
  }
}
