// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StorageMigrationOptionsPropertiesData : StorageMigrationOptionsPropertiesProtocol {
    public var azurefilesConnectionString: String?
    public var azurefilesShare: String?
    public var switchSiteAfterMigration: Bool?
    public var blockWriteAccessToSite: Bool?

        enum CodingKeys: String, CodingKey {case azurefilesConnectionString = "azurefilesConnectionString"
        case azurefilesShare = "azurefilesShare"
        case switchSiteAfterMigration = "switchSiteAfterMigration"
        case blockWriteAccessToSite = "blockWriteAccessToSite"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.azurefilesConnectionString) {
        self.azurefilesConnectionString = try container.decode(String?.self, forKey: .azurefilesConnectionString)
    }
    if container.contains(.azurefilesShare) {
        self.azurefilesShare = try container.decode(String?.self, forKey: .azurefilesShare)
    }
    if container.contains(.switchSiteAfterMigration) {
        self.switchSiteAfterMigration = try container.decode(Bool?.self, forKey: .switchSiteAfterMigration)
    }
    if container.contains(.blockWriteAccessToSite) {
        self.blockWriteAccessToSite = try container.decode(Bool?.self, forKey: .blockWriteAccessToSite)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.azurefilesConnectionString != nil {try container.encode(self.azurefilesConnectionString, forKey: .azurefilesConnectionString)}
    if self.azurefilesShare != nil {try container.encode(self.azurefilesShare, forKey: .azurefilesShare)}
    if self.switchSiteAfterMigration != nil {try container.encode(self.switchSiteAfterMigration, forKey: .switchSiteAfterMigration)}
    if self.blockWriteAccessToSite != nil {try container.encode(self.blockWriteAccessToSite, forKey: .blockWriteAccessToSite)}
  }
}

extension DataFactory {
  public static func createStorageMigrationOptionsPropertiesProtocol() -> StorageMigrationOptionsPropertiesProtocol {
    return StorageMigrationOptionsPropertiesData()
  }
}
