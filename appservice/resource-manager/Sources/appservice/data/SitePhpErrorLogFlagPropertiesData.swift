// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SitePhpErrorLogFlagPropertiesData : SitePhpErrorLogFlagPropertiesProtocol {
    public var localLogErrors: String?
    public var masterLogErrors: String?
    public var localLogErrorsMaxLength: String?
    public var masterLogErrorsMaxLength: String?

        enum CodingKeys: String, CodingKey {case localLogErrors = "localLogErrors"
        case masterLogErrors = "masterLogErrors"
        case localLogErrorsMaxLength = "localLogErrorsMaxLength"
        case masterLogErrorsMaxLength = "masterLogErrorsMaxLength"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.localLogErrors) {
        self.localLogErrors = try container.decode(String?.self, forKey: .localLogErrors)
    }
    if container.contains(.masterLogErrors) {
        self.masterLogErrors = try container.decode(String?.self, forKey: .masterLogErrors)
    }
    if container.contains(.localLogErrorsMaxLength) {
        self.localLogErrorsMaxLength = try container.decode(String?.self, forKey: .localLogErrorsMaxLength)
    }
    if container.contains(.masterLogErrorsMaxLength) {
        self.masterLogErrorsMaxLength = try container.decode(String?.self, forKey: .masterLogErrorsMaxLength)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.localLogErrors != nil {try container.encode(self.localLogErrors, forKey: .localLogErrors)}
    if self.masterLogErrors != nil {try container.encode(self.masterLogErrors, forKey: .masterLogErrors)}
    if self.localLogErrorsMaxLength != nil {try container.encode(self.localLogErrorsMaxLength, forKey: .localLogErrorsMaxLength)}
    if self.masterLogErrorsMaxLength != nil {try container.encode(self.masterLogErrorsMaxLength, forKey: .masterLogErrorsMaxLength)}
  }
}

extension DataFactory {
  public static func createSitePhpErrorLogFlagPropertiesProtocol() -> SitePhpErrorLogFlagPropertiesProtocol {
    return SitePhpErrorLogFlagPropertiesData()
  }
}
