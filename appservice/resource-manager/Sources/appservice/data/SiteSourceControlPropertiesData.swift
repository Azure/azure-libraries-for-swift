// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SiteSourceControlPropertiesData : SiteSourceControlPropertiesProtocol {
    public var repoUrl: String?
    public var branch: String?
    public var isManualIntegration: Bool?
    public var deploymentRollbackEnabled: Bool?
    public var isMercurial: Bool?

        enum CodingKeys: String, CodingKey {case repoUrl = "repoUrl"
        case branch = "branch"
        case isManualIntegration = "isManualIntegration"
        case deploymentRollbackEnabled = "deploymentRollbackEnabled"
        case isMercurial = "isMercurial"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.repoUrl) {
        self.repoUrl = try container.decode(String?.self, forKey: .repoUrl)
    }
    if container.contains(.branch) {
        self.branch = try container.decode(String?.self, forKey: .branch)
    }
    if container.contains(.isManualIntegration) {
        self.isManualIntegration = try container.decode(Bool?.self, forKey: .isManualIntegration)
    }
    if container.contains(.deploymentRollbackEnabled) {
        self.deploymentRollbackEnabled = try container.decode(Bool?.self, forKey: .deploymentRollbackEnabled)
    }
    if container.contains(.isMercurial) {
        self.isMercurial = try container.decode(Bool?.self, forKey: .isMercurial)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.repoUrl != nil {try container.encode(self.repoUrl, forKey: .repoUrl)}
    if self.branch != nil {try container.encode(self.branch, forKey: .branch)}
    if self.isManualIntegration != nil {try container.encode(self.isManualIntegration, forKey: .isManualIntegration)}
    if self.deploymentRollbackEnabled != nil {try container.encode(self.deploymentRollbackEnabled, forKey: .deploymentRollbackEnabled)}
    if self.isMercurial != nil {try container.encode(self.isMercurial, forKey: .isMercurial)}
  }
}

extension DataFactory {
  public static func createSiteSourceControlPropertiesProtocol() -> SiteSourceControlPropertiesProtocol {
    return SiteSourceControlPropertiesData()
  }
}
