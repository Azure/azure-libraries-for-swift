// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SiteAuthSettingsPropertiesData : SiteAuthSettingsPropertiesProtocol {
    public var enabled: Bool?
    public var runtimeVersion: String?
    public var unauthenticatedClientAction: UnauthenticatedClientActionEnum?
    public var tokenStoreEnabled: Bool?
    public var allowedExternalRedirectUrls: [String]?
    public var defaultProvider: BuiltInAuthenticationProviderEnum?
    public var tokenRefreshExtensionHours: Double?
    public var clientId: String?
    public var clientSecret: String?
    public var issuer: String?
    public var allowedAudiences: [String]?
    public var additionalLoginParams: [String]?
    public var googleClientId: String?
    public var googleClientSecret: String?
    public var googleOAuthScopes: [String]?
    public var facebookAppId: String?
    public var facebookAppSecret: String?
    public var facebookOAuthScopes: [String]?
    public var twitterConsumerKey: String?
    public var twitterConsumerSecret: String?
    public var microsoftAccountClientId: String?
    public var microsoftAccountClientSecret: String?
    public var microsoftAccountOAuthScopes: [String]?

        enum CodingKeys: String, CodingKey {case enabled = "enabled"
        case runtimeVersion = "runtimeVersion"
        case unauthenticatedClientAction = "unauthenticatedClientAction"
        case tokenStoreEnabled = "tokenStoreEnabled"
        case allowedExternalRedirectUrls = "allowedExternalRedirectUrls"
        case defaultProvider = "defaultProvider"
        case tokenRefreshExtensionHours = "tokenRefreshExtensionHours"
        case clientId = "clientId"
        case clientSecret = "clientSecret"
        case issuer = "issuer"
        case allowedAudiences = "allowedAudiences"
        case additionalLoginParams = "additionalLoginParams"
        case googleClientId = "googleClientId"
        case googleClientSecret = "googleClientSecret"
        case googleOAuthScopes = "googleOAuthScopes"
        case facebookAppId = "facebookAppId"
        case facebookAppSecret = "facebookAppSecret"
        case facebookOAuthScopes = "facebookOAuthScopes"
        case twitterConsumerKey = "twitterConsumerKey"
        case twitterConsumerSecret = "twitterConsumerSecret"
        case microsoftAccountClientId = "microsoftAccountClientId"
        case microsoftAccountClientSecret = "microsoftAccountClientSecret"
        case microsoftAccountOAuthScopes = "microsoftAccountOAuthScopes"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.enabled) {
        self.enabled = try container.decode(Bool?.self, forKey: .enabled)
    }
    if container.contains(.runtimeVersion) {
        self.runtimeVersion = try container.decode(String?.self, forKey: .runtimeVersion)
    }
    if container.contains(.unauthenticatedClientAction) {
        self.unauthenticatedClientAction = try container.decode(UnauthenticatedClientActionEnum?.self, forKey: .unauthenticatedClientAction)
    }
    if container.contains(.tokenStoreEnabled) {
        self.tokenStoreEnabled = try container.decode(Bool?.self, forKey: .tokenStoreEnabled)
    }
    if container.contains(.allowedExternalRedirectUrls) {
        self.allowedExternalRedirectUrls = try container.decode([String]?.self, forKey: .allowedExternalRedirectUrls)
    }
    if container.contains(.defaultProvider) {
        self.defaultProvider = try container.decode(BuiltInAuthenticationProviderEnum?.self, forKey: .defaultProvider)
    }
    if container.contains(.tokenRefreshExtensionHours) {
        self.tokenRefreshExtensionHours = try container.decode(Double?.self, forKey: .tokenRefreshExtensionHours)
    }
    if container.contains(.clientId) {
        self.clientId = try container.decode(String?.self, forKey: .clientId)
    }
    if container.contains(.clientSecret) {
        self.clientSecret = try container.decode(String?.self, forKey: .clientSecret)
    }
    if container.contains(.issuer) {
        self.issuer = try container.decode(String?.self, forKey: .issuer)
    }
    if container.contains(.allowedAudiences) {
        self.allowedAudiences = try container.decode([String]?.self, forKey: .allowedAudiences)
    }
    if container.contains(.additionalLoginParams) {
        self.additionalLoginParams = try container.decode([String]?.self, forKey: .additionalLoginParams)
    }
    if container.contains(.googleClientId) {
        self.googleClientId = try container.decode(String?.self, forKey: .googleClientId)
    }
    if container.contains(.googleClientSecret) {
        self.googleClientSecret = try container.decode(String?.self, forKey: .googleClientSecret)
    }
    if container.contains(.googleOAuthScopes) {
        self.googleOAuthScopes = try container.decode([String]?.self, forKey: .googleOAuthScopes)
    }
    if container.contains(.facebookAppId) {
        self.facebookAppId = try container.decode(String?.self, forKey: .facebookAppId)
    }
    if container.contains(.facebookAppSecret) {
        self.facebookAppSecret = try container.decode(String?.self, forKey: .facebookAppSecret)
    }
    if container.contains(.facebookOAuthScopes) {
        self.facebookOAuthScopes = try container.decode([String]?.self, forKey: .facebookOAuthScopes)
    }
    if container.contains(.twitterConsumerKey) {
        self.twitterConsumerKey = try container.decode(String?.self, forKey: .twitterConsumerKey)
    }
    if container.contains(.twitterConsumerSecret) {
        self.twitterConsumerSecret = try container.decode(String?.self, forKey: .twitterConsumerSecret)
    }
    if container.contains(.microsoftAccountClientId) {
        self.microsoftAccountClientId = try container.decode(String?.self, forKey: .microsoftAccountClientId)
    }
    if container.contains(.microsoftAccountClientSecret) {
        self.microsoftAccountClientSecret = try container.decode(String?.self, forKey: .microsoftAccountClientSecret)
    }
    if container.contains(.microsoftAccountOAuthScopes) {
        self.microsoftAccountOAuthScopes = try container.decode([String]?.self, forKey: .microsoftAccountOAuthScopes)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.enabled != nil {try container.encode(self.enabled, forKey: .enabled)}
    if self.runtimeVersion != nil {try container.encode(self.runtimeVersion, forKey: .runtimeVersion)}
    if self.unauthenticatedClientAction != nil {try container.encode(self.unauthenticatedClientAction, forKey: .unauthenticatedClientAction)}
    if self.tokenStoreEnabled != nil {try container.encode(self.tokenStoreEnabled, forKey: .tokenStoreEnabled)}
    if self.allowedExternalRedirectUrls != nil {try container.encode(self.allowedExternalRedirectUrls as! [String]?, forKey: .allowedExternalRedirectUrls)}
    if self.defaultProvider != nil {try container.encode(self.defaultProvider, forKey: .defaultProvider)}
    if self.tokenRefreshExtensionHours != nil {try container.encode(self.tokenRefreshExtensionHours, forKey: .tokenRefreshExtensionHours)}
    if self.clientId != nil {try container.encode(self.clientId, forKey: .clientId)}
    if self.clientSecret != nil {try container.encode(self.clientSecret, forKey: .clientSecret)}
    if self.issuer != nil {try container.encode(self.issuer, forKey: .issuer)}
    if self.allowedAudiences != nil {try container.encode(self.allowedAudiences as! [String]?, forKey: .allowedAudiences)}
    if self.additionalLoginParams != nil {try container.encode(self.additionalLoginParams as! [String]?, forKey: .additionalLoginParams)}
    if self.googleClientId != nil {try container.encode(self.googleClientId, forKey: .googleClientId)}
    if self.googleClientSecret != nil {try container.encode(self.googleClientSecret, forKey: .googleClientSecret)}
    if self.googleOAuthScopes != nil {try container.encode(self.googleOAuthScopes as! [String]?, forKey: .googleOAuthScopes)}
    if self.facebookAppId != nil {try container.encode(self.facebookAppId, forKey: .facebookAppId)}
    if self.facebookAppSecret != nil {try container.encode(self.facebookAppSecret, forKey: .facebookAppSecret)}
    if self.facebookOAuthScopes != nil {try container.encode(self.facebookOAuthScopes as! [String]?, forKey: .facebookOAuthScopes)}
    if self.twitterConsumerKey != nil {try container.encode(self.twitterConsumerKey, forKey: .twitterConsumerKey)}
    if self.twitterConsumerSecret != nil {try container.encode(self.twitterConsumerSecret, forKey: .twitterConsumerSecret)}
    if self.microsoftAccountClientId != nil {try container.encode(self.microsoftAccountClientId, forKey: .microsoftAccountClientId)}
    if self.microsoftAccountClientSecret != nil {try container.encode(self.microsoftAccountClientSecret, forKey: .microsoftAccountClientSecret)}
    if self.microsoftAccountOAuthScopes != nil {try container.encode(self.microsoftAccountOAuthScopes as! [String]?, forKey: .microsoftAccountOAuthScopes)}
  }
}

extension DataFactory {
  public static func createSiteAuthSettingsPropertiesProtocol() -> SiteAuthSettingsPropertiesProtocol {
    return SiteAuthSettingsPropertiesData()
  }
}
