// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AddressResponseData : AddressResponseProtocol {
    public var serviceIpAddress: String?
    public var internalIpAddress: String?
    public var outboundIpAddresses: [String]?
    public var vipMappings: [VirtualIPMappingProtocol?]?

        enum CodingKeys: String, CodingKey {case serviceIpAddress = "serviceIpAddress"
        case internalIpAddress = "internalIpAddress"
        case outboundIpAddresses = "outboundIpAddresses"
        case vipMappings = "vipMappings"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.serviceIpAddress) {
        self.serviceIpAddress = try container.decode(String?.self, forKey: .serviceIpAddress)
    }
    if container.contains(.internalIpAddress) {
        self.internalIpAddress = try container.decode(String?.self, forKey: .internalIpAddress)
    }
    if container.contains(.outboundIpAddresses) {
        self.outboundIpAddresses = try container.decode([String]?.self, forKey: .outboundIpAddresses)
    }
    if container.contains(.vipMappings) {
        self.vipMappings = try container.decode([VirtualIPMappingData?]?.self, forKey: .vipMappings)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.serviceIpAddress != nil {try container.encode(self.serviceIpAddress, forKey: .serviceIpAddress)}
    if self.internalIpAddress != nil {try container.encode(self.internalIpAddress, forKey: .internalIpAddress)}
    if self.outboundIpAddresses != nil {try container.encode(self.outboundIpAddresses as! [String]?, forKey: .outboundIpAddresses)}
    if self.vipMappings != nil {try container.encode(self.vipMappings as! [VirtualIPMappingData?]?, forKey: .vipMappings)}
  }
}

extension DataFactory {
  public static func createAddressResponseProtocol() -> AddressResponseProtocol {
    return AddressResponseData()
  }
}
