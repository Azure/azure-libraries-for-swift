// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecommendationRuleData : RecommendationRuleProtocol {
    public var name: String?
    public var displayName: String?
    public var message: String?
    public var recommendationId: String?
    public var description: String?
    public var actionName: String?
    public var level: NotificationLevelEnum?
    public var channels: ChannelsEnum?
    public var tags: [String]?
    public var isDynamic: Bool?
    public var extensionName: String?
    public var bladeName: String?
    public var forwardLink: String?

        enum CodingKeys: String, CodingKey {case name = "name"
        case displayName = "displayName"
        case message = "message"
        case recommendationId = "recommendationId"
        case description = "description"
        case actionName = "actionName"
        case level = "level"
        case channels = "channels"
        case tags = "tags"
        case isDynamic = "isDynamic"
        case extensionName = "extensionName"
        case bladeName = "bladeName"
        case forwardLink = "forwardLink"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.displayName) {
        self.displayName = try container.decode(String?.self, forKey: .displayName)
    }
    if container.contains(.message) {
        self.message = try container.decode(String?.self, forKey: .message)
    }
    if container.contains(.recommendationId) {
        self.recommendationId = try container.decode(String?.self, forKey: .recommendationId)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.actionName) {
        self.actionName = try container.decode(String?.self, forKey: .actionName)
    }
    if container.contains(.level) {
        self.level = try container.decode(NotificationLevelEnum?.self, forKey: .level)
    }
    if container.contains(.channels) {
        self.channels = try container.decode(ChannelsEnum?.self, forKey: .channels)
    }
    if container.contains(.tags) {
        self.tags = try container.decode([String]?.self, forKey: .tags)
    }
    if container.contains(.isDynamic) {
        self.isDynamic = try container.decode(Bool?.self, forKey: .isDynamic)
    }
    if container.contains(.extensionName) {
        self.extensionName = try container.decode(String?.self, forKey: .extensionName)
    }
    if container.contains(.bladeName) {
        self.bladeName = try container.decode(String?.self, forKey: .bladeName)
    }
    if container.contains(.forwardLink) {
        self.forwardLink = try container.decode(String?.self, forKey: .forwardLink)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.message != nil {try container.encode(self.message, forKey: .message)}
    if self.recommendationId != nil {try container.encode(self.recommendationId, forKey: .recommendationId)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.actionName != nil {try container.encode(self.actionName, forKey: .actionName)}
    if self.level != nil {try container.encode(self.level, forKey: .level)}
    if self.channels != nil {try container.encode(self.channels, forKey: .channels)}
    if self.tags != nil {try container.encode(self.tags as! [String]?, forKey: .tags)}
    if self.isDynamic != nil {try container.encode(self.isDynamic, forKey: .isDynamic)}
    if self.extensionName != nil {try container.encode(self.extensionName, forKey: .extensionName)}
    if self.bladeName != nil {try container.encode(self.bladeName, forKey: .bladeName)}
    if self.forwardLink != nil {try container.encode(self.forwardLink, forKey: .forwardLink)}
  }
}

extension DataFactory {
  public static func createRecommendationRuleProtocol() -> RecommendationRuleProtocol {
    return RecommendationRuleData()
  }
}
