// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CertificateEmailPropertiesData : CertificateEmailPropertiesProtocol {
    public var emailId: String?
    public var timeStamp: Date?

        enum CodingKeys: String, CodingKey {case emailId = "emailId"
        case timeStamp = "timeStamp"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.emailId) {
        self.emailId = try container.decode(String?.self, forKey: .emailId)
    }
    if container.contains(.timeStamp) {
        self.timeStamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .timeStamp)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.emailId != nil {try container.encode(self.emailId, forKey: .emailId)}
    if self.timeStamp != nil {
        try container.encode(DateConverter.toString(date: self.timeStamp!, format: .dateTime), forKey: .timeStamp)
    }
  }
}

extension DataFactory {
  public static func createCertificateEmailPropertiesProtocol() -> CertificateEmailPropertiesProtocol {
    return CertificateEmailPropertiesData()
  }
}
