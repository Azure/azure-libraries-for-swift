// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CaaRecordData : CaaRecordProtocol {
    public var flags: Int32?
    public var tag: String?
    public var value: String?

        enum CodingKeys: String, CodingKey {case flags = "flags"
        case tag = "tag"
        case value = "value"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.flags) {
        self.flags = try container.decode(Int32?.self, forKey: .flags)
    }
    if container.contains(.tag) {
        self.tag = try container.decode(String?.self, forKey: .tag)
    }
    if container.contains(.value) {
        self.value = try container.decode(String?.self, forKey: .value)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.flags != nil {try container.encode(self.flags, forKey: .flags)}
    if self.tag != nil {try container.encode(self.tag, forKey: .tag)}
    if self.value != nil {try container.encode(self.value, forKey: .value)}
  }
}

extension DataFactory {
  public static func createCaaRecordProtocol() -> CaaRecordProtocol {
    return CaaRecordData()
  }
}
