// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SoaRecordData : SoaRecordProtocol {
    public var host: String?
    public var email: String?
    public var serialNumber: Int64?
    public var refreshTime: Int64?
    public var retryTime: Int64?
    public var expireTime: Int64?
    public var minimumTtl: Int64?

        enum CodingKeys: String, CodingKey {case host = "host"
        case email = "email"
        case serialNumber = "serialNumber"
        case refreshTime = "refreshTime"
        case retryTime = "retryTime"
        case expireTime = "expireTime"
        case minimumTtl = "minimumTTL"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.host) {
        self.host = try container.decode(String?.self, forKey: .host)
    }
    if container.contains(.email) {
        self.email = try container.decode(String?.self, forKey: .email)
    }
    if container.contains(.serialNumber) {
        self.serialNumber = try container.decode(Int64?.self, forKey: .serialNumber)
    }
    if container.contains(.refreshTime) {
        self.refreshTime = try container.decode(Int64?.self, forKey: .refreshTime)
    }
    if container.contains(.retryTime) {
        self.retryTime = try container.decode(Int64?.self, forKey: .retryTime)
    }
    if container.contains(.expireTime) {
        self.expireTime = try container.decode(Int64?.self, forKey: .expireTime)
    }
    if container.contains(.minimumTtl) {
        self.minimumTtl = try container.decode(Int64?.self, forKey: .minimumTtl)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.host != nil {try container.encode(self.host, forKey: .host)}
    if self.email != nil {try container.encode(self.email, forKey: .email)}
    if self.serialNumber != nil {try container.encode(self.serialNumber, forKey: .serialNumber)}
    if self.refreshTime != nil {try container.encode(self.refreshTime, forKey: .refreshTime)}
    if self.retryTime != nil {try container.encode(self.retryTime, forKey: .retryTime)}
    if self.expireTime != nil {try container.encode(self.expireTime, forKey: .expireTime)}
    if self.minimumTtl != nil {try container.encode(self.minimumTtl, forKey: .minimumTtl)}
  }
}

extension DataFactory {
  public static func createSoaRecordProtocol() -> SoaRecordProtocol {
    return SoaRecordData()
  }
}
