// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ArtifactSourcePropertiesData : ArtifactSourcePropertiesProtocol {
    public var displayName: String?
    public var uri: String?
    public var sourceType: SourceControlTypeEnum?
    public var folderPath: String?
    public var armTemplateFolderPath: String?
    public var branchRef: String?
    public var securityToken: String?
    public var status: EnableStatusEnum?
    public var createdDate: Date?
    public var provisioningState: String?
    public var uniqueIdentifier: String?

        enum CodingKeys: String, CodingKey {case displayName = "displayName"
        case uri = "uri"
        case sourceType = "sourceType"
        case folderPath = "folderPath"
        case armTemplateFolderPath = "armTemplateFolderPath"
        case branchRef = "branchRef"
        case securityToken = "securityToken"
        case status = "status"
        case createdDate = "createdDate"
        case provisioningState = "provisioningState"
        case uniqueIdentifier = "uniqueIdentifier"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.displayName) {
        self.displayName = try container.decode(String?.self, forKey: .displayName)
    }
    if container.contains(.uri) {
        self.uri = try container.decode(String?.self, forKey: .uri)
    }
    if container.contains(.sourceType) {
        self.sourceType = try container.decode(SourceControlTypeEnum?.self, forKey: .sourceType)
    }
    if container.contains(.folderPath) {
        self.folderPath = try container.decode(String?.self, forKey: .folderPath)
    }
    if container.contains(.armTemplateFolderPath) {
        self.armTemplateFolderPath = try container.decode(String?.self, forKey: .armTemplateFolderPath)
    }
    if container.contains(.branchRef) {
        self.branchRef = try container.decode(String?.self, forKey: .branchRef)
    }
    if container.contains(.securityToken) {
        self.securityToken = try container.decode(String?.self, forKey: .securityToken)
    }
    if container.contains(.status) {
        self.status = try container.decode(EnableStatusEnum?.self, forKey: .status)
    }
    if container.contains(.createdDate) {
        self.createdDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdDate)), format: .dateTime)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.uniqueIdentifier) {
        self.uniqueIdentifier = try container.decode(String?.self, forKey: .uniqueIdentifier)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.uri != nil {try container.encode(self.uri, forKey: .uri)}
    if self.sourceType != nil {try container.encode(self.sourceType, forKey: .sourceType)}
    if self.folderPath != nil {try container.encode(self.folderPath, forKey: .folderPath)}
    if self.armTemplateFolderPath != nil {try container.encode(self.armTemplateFolderPath, forKey: .armTemplateFolderPath)}
    if self.branchRef != nil {try container.encode(self.branchRef, forKey: .branchRef)}
    if self.securityToken != nil {try container.encode(self.securityToken, forKey: .securityToken)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.createdDate != nil {
        try container.encode(DateConverter.toString(date: self.createdDate!, format: .dateTime), forKey: .createdDate)
    }
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.uniqueIdentifier != nil {try container.encode(self.uniqueIdentifier, forKey: .uniqueIdentifier)}
  }
}

extension DataFactory {
  public static func createArtifactSourcePropertiesProtocol() -> ArtifactSourcePropertiesProtocol {
    return ArtifactSourcePropertiesData()
  }
}
