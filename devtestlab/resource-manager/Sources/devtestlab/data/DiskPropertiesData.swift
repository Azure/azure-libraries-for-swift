// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DiskPropertiesData : DiskPropertiesProtocol {
    public var diskType: StorageTypeEnum?
    public var diskSizeGiB: Int32?
    public var leasedByLabVmId: String?
    public var diskBlobName: String?
    public var diskUri: String?
    public var createdDate: Date?
    public var hostCaching: String?
    public var managedDiskId: String?
    public var provisioningState: String?
    public var uniqueIdentifier: String?

        enum CodingKeys: String, CodingKey {case diskType = "diskType"
        case diskSizeGiB = "diskSizeGiB"
        case leasedByLabVmId = "leasedByLabVmId"
        case diskBlobName = "diskBlobName"
        case diskUri = "diskUri"
        case createdDate = "createdDate"
        case hostCaching = "hostCaching"
        case managedDiskId = "managedDiskId"
        case provisioningState = "provisioningState"
        case uniqueIdentifier = "uniqueIdentifier"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.diskType) {
        self.diskType = try container.decode(StorageTypeEnum?.self, forKey: .diskType)
    }
    if container.contains(.diskSizeGiB) {
        self.diskSizeGiB = try container.decode(Int32?.self, forKey: .diskSizeGiB)
    }
    if container.contains(.leasedByLabVmId) {
        self.leasedByLabVmId = try container.decode(String?.self, forKey: .leasedByLabVmId)
    }
    if container.contains(.diskBlobName) {
        self.diskBlobName = try container.decode(String?.self, forKey: .diskBlobName)
    }
    if container.contains(.diskUri) {
        self.diskUri = try container.decode(String?.self, forKey: .diskUri)
    }
    if container.contains(.createdDate) {
        self.createdDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdDate)), format: .dateTime)
    }
    if container.contains(.hostCaching) {
        self.hostCaching = try container.decode(String?.self, forKey: .hostCaching)
    }
    if container.contains(.managedDiskId) {
        self.managedDiskId = try container.decode(String?.self, forKey: .managedDiskId)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.uniqueIdentifier) {
        self.uniqueIdentifier = try container.decode(String?.self, forKey: .uniqueIdentifier)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.diskType != nil {try container.encode(self.diskType, forKey: .diskType)}
    if self.diskSizeGiB != nil {try container.encode(self.diskSizeGiB, forKey: .diskSizeGiB)}
    if self.leasedByLabVmId != nil {try container.encode(self.leasedByLabVmId, forKey: .leasedByLabVmId)}
    if self.diskBlobName != nil {try container.encode(self.diskBlobName, forKey: .diskBlobName)}
    if self.diskUri != nil {try container.encode(self.diskUri, forKey: .diskUri)}
    if self.createdDate != nil {
        try container.encode(DateConverter.toString(date: self.createdDate!, format: .dateTime), forKey: .createdDate)
    }
    if self.hostCaching != nil {try container.encode(self.hostCaching, forKey: .hostCaching)}
    if self.managedDiskId != nil {try container.encode(self.managedDiskId, forKey: .managedDiskId)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.uniqueIdentifier != nil {try container.encode(self.uniqueIdentifier, forKey: .uniqueIdentifier)}
  }
}

extension DataFactory {
  public static func createDiskPropertiesProtocol() -> DiskPropertiesProtocol {
    return DiskPropertiesData()
  }
}
