// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PolicyPropertiesFragmentData : PolicyPropertiesFragmentProtocol {
    public var description: String?
    public var status: PolicyStatusEnum?
    public var factName: PolicyFactNameEnum?
    public var factData: String?
    public var threshold: String?
    public var evaluatorType: PolicyEvaluatorTypeEnum?
    public var provisioningState: String?
    public var uniqueIdentifier: String?

        enum CodingKeys: String, CodingKey {case description = "description"
        case status = "status"
        case factName = "factName"
        case factData = "factData"
        case threshold = "threshold"
        case evaluatorType = "evaluatorType"
        case provisioningState = "provisioningState"
        case uniqueIdentifier = "uniqueIdentifier"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.status) {
        self.status = try container.decode(PolicyStatusEnum?.self, forKey: .status)
    }
    if container.contains(.factName) {
        self.factName = try container.decode(PolicyFactNameEnum?.self, forKey: .factName)
    }
    if container.contains(.factData) {
        self.factData = try container.decode(String?.self, forKey: .factData)
    }
    if container.contains(.threshold) {
        self.threshold = try container.decode(String?.self, forKey: .threshold)
    }
    if container.contains(.evaluatorType) {
        self.evaluatorType = try container.decode(PolicyEvaluatorTypeEnum?.self, forKey: .evaluatorType)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.uniqueIdentifier) {
        self.uniqueIdentifier = try container.decode(String?.self, forKey: .uniqueIdentifier)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.factName != nil {try container.encode(self.factName, forKey: .factName)}
    if self.factData != nil {try container.encode(self.factData, forKey: .factData)}
    if self.threshold != nil {try container.encode(self.threshold, forKey: .threshold)}
    if self.evaluatorType != nil {try container.encode(self.evaluatorType, forKey: .evaluatorType)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.uniqueIdentifier != nil {try container.encode(self.uniqueIdentifier, forKey: .uniqueIdentifier)}
  }
}

extension DataFactory {
  public static func createPolicyPropertiesFragmentProtocol() -> PolicyPropertiesFragmentProtocol {
    return PolicyPropertiesFragmentData()
  }
}
