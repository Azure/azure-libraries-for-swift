// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LabCostDetailsPropertiesData : LabCostDetailsPropertiesProtocol {
    public var date: Date?
    public var cost: Double?
    public var costType: CostTypeEnum?

        enum CodingKeys: String, CodingKey {case date = "date"
        case cost = "cost"
        case costType = "costType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.date) {
        self.date = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .date)), format: .dateTime)
    }
    if container.contains(.cost) {
        self.cost = try container.decode(Double?.self, forKey: .cost)
    }
    if container.contains(.costType) {
        self.costType = try container.decode(CostTypeEnum?.self, forKey: .costType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.date != nil {
        try container.encode(DateConverter.toString(date: self.date!, format: .dateTime), forKey: .date)
    }
    if self.cost != nil {try container.encode(self.cost, forKey: .cost)}
    if self.costType != nil {try container.encode(self.costType, forKey: .costType)}
  }
}

extension DataFactory {
  public static func createLabCostDetailsPropertiesProtocol() -> LabCostDetailsPropertiesProtocol {
    return LabCostDetailsPropertiesData()
  }
}
