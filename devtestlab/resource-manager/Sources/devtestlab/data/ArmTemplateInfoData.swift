// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ArmTemplateInfoData : ArmTemplateInfoProtocol {
    public var template: [String: String?]?
    public var parameters: [String: String?]?

        enum CodingKeys: String, CodingKey {case template = "template"
        case parameters = "parameters"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.template) {
        self.template = try container.decode([String: String?]?.self, forKey: .template)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([String: String?]?.self, forKey: .parameters)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.template != nil {try container.encode(self.template, forKey: .template)}
    if self.parameters != nil {try container.encode(self.parameters, forKey: .parameters)}
  }
}

extension DataFactory {
  public static func createArmTemplateInfoProtocol() -> ArmTemplateInfoProtocol {
    return ArmTemplateInfoData()
  }
}
