// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EnvironmentPropertiesData : EnvironmentPropertiesProtocol {
    public var deploymentProperties: EnvironmentDeploymentPropertiesProtocol?
    public var armTemplateDisplayName: String?
    public var resourceGroupId: String?
    public var createdByUser: String?
    public var provisioningState: String?
    public var uniqueIdentifier: String?

        enum CodingKeys: String, CodingKey {case deploymentProperties = "deploymentProperties"
        case armTemplateDisplayName = "armTemplateDisplayName"
        case resourceGroupId = "resourceGroupId"
        case createdByUser = "createdByUser"
        case provisioningState = "provisioningState"
        case uniqueIdentifier = "uniqueIdentifier"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.deploymentProperties) {
        self.deploymentProperties = try container.decode(EnvironmentDeploymentPropertiesData?.self, forKey: .deploymentProperties)
    }
    if container.contains(.armTemplateDisplayName) {
        self.armTemplateDisplayName = try container.decode(String?.self, forKey: .armTemplateDisplayName)
    }
    if container.contains(.resourceGroupId) {
        self.resourceGroupId = try container.decode(String?.self, forKey: .resourceGroupId)
    }
    if container.contains(.createdByUser) {
        self.createdByUser = try container.decode(String?.self, forKey: .createdByUser)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.uniqueIdentifier) {
        self.uniqueIdentifier = try container.decode(String?.self, forKey: .uniqueIdentifier)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.deploymentProperties != nil {try container.encode(self.deploymentProperties as! EnvironmentDeploymentPropertiesData?, forKey: .deploymentProperties)}
    if self.armTemplateDisplayName != nil {try container.encode(self.armTemplateDisplayName, forKey: .armTemplateDisplayName)}
    if self.resourceGroupId != nil {try container.encode(self.resourceGroupId, forKey: .resourceGroupId)}
    if self.createdByUser != nil {try container.encode(self.createdByUser, forKey: .createdByUser)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.uniqueIdentifier != nil {try container.encode(self.uniqueIdentifier, forKey: .uniqueIdentifier)}
  }
}

extension DataFactory {
  public static func createEnvironmentPropertiesProtocol() -> EnvironmentPropertiesProtocol {
    return EnvironmentPropertiesData()
  }
}
