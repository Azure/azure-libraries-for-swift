// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PolicySetResultData : PolicySetResultProtocol {
    public var hasError: Bool?
    public var policyViolations: [PolicyViolationProtocol?]?

        enum CodingKeys: String, CodingKey {case hasError = "hasError"
        case policyViolations = "policyViolations"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.hasError) {
        self.hasError = try container.decode(Bool?.self, forKey: .hasError)
    }
    if container.contains(.policyViolations) {
        self.policyViolations = try container.decode([PolicyViolationData?]?.self, forKey: .policyViolations)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.hasError != nil {try container.encode(self.hasError, forKey: .hasError)}
    if self.policyViolations != nil {try container.encode(self.policyViolations as! [PolicyViolationData?]?, forKey: .policyViolations)}
  }
}

extension DataFactory {
  public static func createPolicySetResultProtocol() -> PolicySetResultProtocol {
    return PolicySetResultData()
  }
}
