// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TargetCostPropertiesData : TargetCostPropertiesProtocol {
    public var status: TargetCostStatusEnum?
    public var target: Int32?
    public var costThresholds: [CostThresholdPropertiesProtocol?]?
    public var cycleStartDateTime: Date?
    public var cycleEndDateTime: Date?
    public var cycleType: ReportingCycleTypeEnum?

        enum CodingKeys: String, CodingKey {case status = "status"
        case target = "target"
        case costThresholds = "costThresholds"
        case cycleStartDateTime = "cycleStartDateTime"
        case cycleEndDateTime = "cycleEndDateTime"
        case cycleType = "cycleType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.status) {
        self.status = try container.decode(TargetCostStatusEnum?.self, forKey: .status)
    }
    if container.contains(.target) {
        self.target = try container.decode(Int32?.self, forKey: .target)
    }
    if container.contains(.costThresholds) {
        self.costThresholds = try container.decode([CostThresholdPropertiesData?]?.self, forKey: .costThresholds)
    }
    if container.contains(.cycleStartDateTime) {
        self.cycleStartDateTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .cycleStartDateTime)), format: .dateTime)
    }
    if container.contains(.cycleEndDateTime) {
        self.cycleEndDateTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .cycleEndDateTime)), format: .dateTime)
    }
    if container.contains(.cycleType) {
        self.cycleType = try container.decode(ReportingCycleTypeEnum?.self, forKey: .cycleType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.target != nil {try container.encode(self.target, forKey: .target)}
    if self.costThresholds != nil {try container.encode(self.costThresholds as! [CostThresholdPropertiesData?]?, forKey: .costThresholds)}
    if self.cycleStartDateTime != nil {
        try container.encode(DateConverter.toString(date: self.cycleStartDateTime!, format: .dateTime), forKey: .cycleStartDateTime)
    }
    if self.cycleEndDateTime != nil {
        try container.encode(DateConverter.toString(date: self.cycleEndDateTime!, format: .dateTime), forKey: .cycleEndDateTime)
    }
    if self.cycleType != nil {try container.encode(self.cycleType, forKey: .cycleType)}
  }
}

extension DataFactory {
  public static func createTargetCostPropertiesProtocol() -> TargetCostPropertiesProtocol {
    return TargetCostPropertiesData()
  }
}
