// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InboundNatRuleData : InboundNatRuleProtocol {
    public var transportProtocol: TransportProtocolEnum?
    public var frontendPort: Int32?
    public var backendPort: Int32?

        enum CodingKeys: String, CodingKey {case transportProtocol = "transportProtocol"
        case frontendPort = "frontendPort"
        case backendPort = "backendPort"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.transportProtocol) {
        self.transportProtocol = try container.decode(TransportProtocolEnum?.self, forKey: .transportProtocol)
    }
    if container.contains(.frontendPort) {
        self.frontendPort = try container.decode(Int32?.self, forKey: .frontendPort)
    }
    if container.contains(.backendPort) {
        self.backendPort = try container.decode(Int32?.self, forKey: .backendPort)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.transportProtocol != nil {try container.encode(self.transportProtocol, forKey: .transportProtocol)}
    if self.frontendPort != nil {try container.encode(self.frontendPort, forKey: .frontendPort)}
    if self.backendPort != nil {try container.encode(self.backendPort, forKey: .backendPort)}
  }
}

extension DataFactory {
  public static func createInboundNatRuleProtocol() -> InboundNatRuleProtocol {
    return InboundNatRuleData()
  }
}
