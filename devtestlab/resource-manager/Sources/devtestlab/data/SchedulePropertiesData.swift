// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SchedulePropertiesData : SchedulePropertiesProtocol {
    public var status: EnableStatusEnum?
    public var taskType: String?
    public var weeklyRecurrence: WeekDetailsProtocol?
    public var dailyRecurrence: DayDetailsProtocol?
    public var hourlyRecurrence: HourDetailsProtocol?
    public var timeZoneId: String?
    public var notificationSettings: NotificationSettingsProtocol?
    public var createdDate: Date?
    public var targetResourceId: String?
    public var provisioningState: String?
    public var uniqueIdentifier: String?

        enum CodingKeys: String, CodingKey {case status = "status"
        case taskType = "taskType"
        case weeklyRecurrence = "weeklyRecurrence"
        case dailyRecurrence = "dailyRecurrence"
        case hourlyRecurrence = "hourlyRecurrence"
        case timeZoneId = "timeZoneId"
        case notificationSettings = "notificationSettings"
        case createdDate = "createdDate"
        case targetResourceId = "targetResourceId"
        case provisioningState = "provisioningState"
        case uniqueIdentifier = "uniqueIdentifier"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.status) {
        self.status = try container.decode(EnableStatusEnum?.self, forKey: .status)
    }
    if container.contains(.taskType) {
        self.taskType = try container.decode(String?.self, forKey: .taskType)
    }
    if container.contains(.weeklyRecurrence) {
        self.weeklyRecurrence = try container.decode(WeekDetailsData?.self, forKey: .weeklyRecurrence)
    }
    if container.contains(.dailyRecurrence) {
        self.dailyRecurrence = try container.decode(DayDetailsData?.self, forKey: .dailyRecurrence)
    }
    if container.contains(.hourlyRecurrence) {
        self.hourlyRecurrence = try container.decode(HourDetailsData?.self, forKey: .hourlyRecurrence)
    }
    if container.contains(.timeZoneId) {
        self.timeZoneId = try container.decode(String?.self, forKey: .timeZoneId)
    }
    if container.contains(.notificationSettings) {
        self.notificationSettings = try container.decode(NotificationSettingsData?.self, forKey: .notificationSettings)
    }
    if container.contains(.createdDate) {
        self.createdDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdDate)), format: .dateTime)
    }
    if container.contains(.targetResourceId) {
        self.targetResourceId = try container.decode(String?.self, forKey: .targetResourceId)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.uniqueIdentifier) {
        self.uniqueIdentifier = try container.decode(String?.self, forKey: .uniqueIdentifier)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.taskType != nil {try container.encode(self.taskType, forKey: .taskType)}
    if self.weeklyRecurrence != nil {try container.encode(self.weeklyRecurrence as! WeekDetailsData?, forKey: .weeklyRecurrence)}
    if self.dailyRecurrence != nil {try container.encode(self.dailyRecurrence as! DayDetailsData?, forKey: .dailyRecurrence)}
    if self.hourlyRecurrence != nil {try container.encode(self.hourlyRecurrence as! HourDetailsData?, forKey: .hourlyRecurrence)}
    if self.timeZoneId != nil {try container.encode(self.timeZoneId, forKey: .timeZoneId)}
    if self.notificationSettings != nil {try container.encode(self.notificationSettings as! NotificationSettingsData?, forKey: .notificationSettings)}
    if self.createdDate != nil {
        try container.encode(DateConverter.toString(date: self.createdDate!, format: .dateTime), forKey: .createdDate)
    }
    if self.targetResourceId != nil {try container.encode(self.targetResourceId, forKey: .targetResourceId)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.uniqueIdentifier != nil {try container.encode(self.uniqueIdentifier, forKey: .uniqueIdentifier)}
  }
}

extension DataFactory {
  public static func createSchedulePropertiesProtocol() -> SchedulePropertiesProtocol {
    return SchedulePropertiesData()
  }
}
