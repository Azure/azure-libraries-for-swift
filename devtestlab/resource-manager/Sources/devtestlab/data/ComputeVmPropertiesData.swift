// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ComputeVmPropertiesData : ComputeVmPropertiesProtocol {
    public var statuses: [ComputeVmInstanceViewStatusProtocol?]?
    public var osType: String?
    public var vmSize: String?
    public var networkInterfaceId: String?
    public var osDiskId: String?
    public var dataDiskIds: [String]?
    public var dataDisks: [ComputeDataDiskProtocol?]?

        enum CodingKeys: String, CodingKey {case statuses = "statuses"
        case osType = "osType"
        case vmSize = "vmSize"
        case networkInterfaceId = "networkInterfaceId"
        case osDiskId = "osDiskId"
        case dataDiskIds = "dataDiskIds"
        case dataDisks = "dataDisks"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.statuses) {
        self.statuses = try container.decode([ComputeVmInstanceViewStatusData?]?.self, forKey: .statuses)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.vmSize) {
        self.vmSize = try container.decode(String?.self, forKey: .vmSize)
    }
    if container.contains(.networkInterfaceId) {
        self.networkInterfaceId = try container.decode(String?.self, forKey: .networkInterfaceId)
    }
    if container.contains(.osDiskId) {
        self.osDiskId = try container.decode(String?.self, forKey: .osDiskId)
    }
    if container.contains(.dataDiskIds) {
        self.dataDiskIds = try container.decode([String]?.self, forKey: .dataDiskIds)
    }
    if container.contains(.dataDisks) {
        self.dataDisks = try container.decode([ComputeDataDiskData?]?.self, forKey: .dataDisks)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.statuses != nil {try container.encode(self.statuses as! [ComputeVmInstanceViewStatusData?]?, forKey: .statuses)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.vmSize != nil {try container.encode(self.vmSize, forKey: .vmSize)}
    if self.networkInterfaceId != nil {try container.encode(self.networkInterfaceId, forKey: .networkInterfaceId)}
    if self.osDiskId != nil {try container.encode(self.osDiskId, forKey: .osDiskId)}
    if self.dataDiskIds != nil {try container.encode(self.dataDiskIds as! [String]?, forKey: .dataDiskIds)}
    if self.dataDisks != nil {try container.encode(self.dataDisks as! [ComputeDataDiskData?]?, forKey: .dataDisks)}
  }
}

extension DataFactory {
  public static func createComputeVmPropertiesProtocol() -> ComputeVmPropertiesProtocol {
    return ComputeVmPropertiesData()
  }
}
