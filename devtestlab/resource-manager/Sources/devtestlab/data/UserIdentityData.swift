// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UserIdentityData : UserIdentityProtocol {
    public var principalName: String?
    public var principalId: String?
    public var tenantId: String?
    public var objectId: String?
    public var appId: String?

        enum CodingKeys: String, CodingKey {case principalName = "principalName"
        case principalId = "principalId"
        case tenantId = "tenantId"
        case objectId = "objectId"
        case appId = "appId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.principalName) {
        self.principalName = try container.decode(String?.self, forKey: .principalName)
    }
    if container.contains(.principalId) {
        self.principalId = try container.decode(String?.self, forKey: .principalId)
    }
    if container.contains(.tenantId) {
        self.tenantId = try container.decode(String?.self, forKey: .tenantId)
    }
    if container.contains(.objectId) {
        self.objectId = try container.decode(String?.self, forKey: .objectId)
    }
    if container.contains(.appId) {
        self.appId = try container.decode(String?.self, forKey: .appId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.principalName != nil {try container.encode(self.principalName, forKey: .principalName)}
    if self.principalId != nil {try container.encode(self.principalId, forKey: .principalId)}
    if self.tenantId != nil {try container.encode(self.tenantId, forKey: .tenantId)}
    if self.objectId != nil {try container.encode(self.objectId, forKey: .objectId)}
    if self.appId != nil {try container.encode(self.appId, forKey: .appId)}
  }
}

extension DataFactory {
  public static func createUserIdentityProtocol() -> UserIdentityProtocol {
    return UserIdentityData()
  }
}
