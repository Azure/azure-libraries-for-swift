// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LabResourceCostPropertiesData : LabResourceCostPropertiesProtocol {
    public var resourcename: String?
    public var resourceUId: String?
    public var resourceCost: Double?
    public var resourceType: String?
    public var resourceOwner: String?
    public var resourcePricingTier: String?
    public var resourceStatus: String?
    public var resourceId: String?
    public var externalResourceId: String?

        enum CodingKeys: String, CodingKey {case resourcename = "resourcename"
        case resourceUId = "resourceUId"
        case resourceCost = "resourceCost"
        case resourceType = "resourceType"
        case resourceOwner = "resourceOwner"
        case resourcePricingTier = "resourcePricingTier"
        case resourceStatus = "resourceStatus"
        case resourceId = "resourceId"
        case externalResourceId = "externalResourceId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.resourcename) {
        self.resourcename = try container.decode(String?.self, forKey: .resourcename)
    }
    if container.contains(.resourceUId) {
        self.resourceUId = try container.decode(String?.self, forKey: .resourceUId)
    }
    if container.contains(.resourceCost) {
        self.resourceCost = try container.decode(Double?.self, forKey: .resourceCost)
    }
    if container.contains(.resourceType) {
        self.resourceType = try container.decode(String?.self, forKey: .resourceType)
    }
    if container.contains(.resourceOwner) {
        self.resourceOwner = try container.decode(String?.self, forKey: .resourceOwner)
    }
    if container.contains(.resourcePricingTier) {
        self.resourcePricingTier = try container.decode(String?.self, forKey: .resourcePricingTier)
    }
    if container.contains(.resourceStatus) {
        self.resourceStatus = try container.decode(String?.self, forKey: .resourceStatus)
    }
    if container.contains(.resourceId) {
        self.resourceId = try container.decode(String?.self, forKey: .resourceId)
    }
    if container.contains(.externalResourceId) {
        self.externalResourceId = try container.decode(String?.self, forKey: .externalResourceId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.resourcename != nil {try container.encode(self.resourcename, forKey: .resourcename)}
    if self.resourceUId != nil {try container.encode(self.resourceUId, forKey: .resourceUId)}
    if self.resourceCost != nil {try container.encode(self.resourceCost, forKey: .resourceCost)}
    if self.resourceType != nil {try container.encode(self.resourceType, forKey: .resourceType)}
    if self.resourceOwner != nil {try container.encode(self.resourceOwner, forKey: .resourceOwner)}
    if self.resourcePricingTier != nil {try container.encode(self.resourcePricingTier, forKey: .resourcePricingTier)}
    if self.resourceStatus != nil {try container.encode(self.resourceStatus, forKey: .resourceStatus)}
    if self.resourceId != nil {try container.encode(self.resourceId, forKey: .resourceId)}
    if self.externalResourceId != nil {try container.encode(self.externalResourceId, forKey: .externalResourceId)}
  }
}

extension DataFactory {
  public static func createLabResourceCostPropertiesProtocol() -> LabResourceCostPropertiesProtocol {
    return LabResourceCostPropertiesData()
  }
}
