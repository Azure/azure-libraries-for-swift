// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LabCostPropertiesData : LabCostPropertiesProtocol {
    public var targetCost: TargetCostPropertiesProtocol?
    public var labCostSummary: LabCostSummaryPropertiesProtocol?
    public var labCostDetails: [LabCostDetailsPropertiesProtocol?]?
    public var resourceCosts: [LabResourceCostPropertiesProtocol?]?
    public var currencyCode: String?
    public var startDateTime: Date?
    public var endDateTime: Date?
    public var createdDate: Date?
    public var provisioningState: String?
    public var uniqueIdentifier: String?

        enum CodingKeys: String, CodingKey {case targetCost = "targetCost"
        case labCostSummary = "labCostSummary"
        case labCostDetails = "labCostDetails"
        case resourceCosts = "resourceCosts"
        case currencyCode = "currencyCode"
        case startDateTime = "startDateTime"
        case endDateTime = "endDateTime"
        case createdDate = "createdDate"
        case provisioningState = "provisioningState"
        case uniqueIdentifier = "uniqueIdentifier"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.targetCost) {
        self.targetCost = try container.decode(TargetCostPropertiesData?.self, forKey: .targetCost)
    }
    if container.contains(.labCostSummary) {
        self.labCostSummary = try container.decode(LabCostSummaryPropertiesData?.self, forKey: .labCostSummary)
    }
    if container.contains(.labCostDetails) {
        self.labCostDetails = try container.decode([LabCostDetailsPropertiesData?]?.self, forKey: .labCostDetails)
    }
    if container.contains(.resourceCosts) {
        self.resourceCosts = try container.decode([LabResourceCostPropertiesData?]?.self, forKey: .resourceCosts)
    }
    if container.contains(.currencyCode) {
        self.currencyCode = try container.decode(String?.self, forKey: .currencyCode)
    }
    if container.contains(.startDateTime) {
        self.startDateTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startDateTime)), format: .dateTime)
    }
    if container.contains(.endDateTime) {
        self.endDateTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endDateTime)), format: .dateTime)
    }
    if container.contains(.createdDate) {
        self.createdDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .createdDate)), format: .dateTime)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.uniqueIdentifier) {
        self.uniqueIdentifier = try container.decode(String?.self, forKey: .uniqueIdentifier)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.targetCost != nil {try container.encode(self.targetCost as! TargetCostPropertiesData?, forKey: .targetCost)}
    if self.labCostSummary != nil {try container.encode(self.labCostSummary as! LabCostSummaryPropertiesData?, forKey: .labCostSummary)}
    if self.labCostDetails != nil {try container.encode(self.labCostDetails as! [LabCostDetailsPropertiesData?]?, forKey: .labCostDetails)}
    if self.resourceCosts != nil {try container.encode(self.resourceCosts as! [LabResourceCostPropertiesData?]?, forKey: .resourceCosts)}
    if self.currencyCode != nil {try container.encode(self.currencyCode, forKey: .currencyCode)}
    if self.startDateTime != nil {
        try container.encode(DateConverter.toString(date: self.startDateTime!, format: .dateTime), forKey: .startDateTime)
    }
    if self.endDateTime != nil {
        try container.encode(DateConverter.toString(date: self.endDateTime!, format: .dateTime), forKey: .endDateTime)
    }
    if self.createdDate != nil {
        try container.encode(DateConverter.toString(date: self.createdDate!, format: .dateTime), forKey: .createdDate)
    }
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.uniqueIdentifier != nil {try container.encode(self.uniqueIdentifier, forKey: .uniqueIdentifier)}
  }
}

extension DataFactory {
  public static func createLabCostPropertiesProtocol() -> LabCostPropertiesProtocol {
    return LabCostPropertiesData()
  }
}
