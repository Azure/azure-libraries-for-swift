// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct GenerateArmTemplateRequestData : GenerateArmTemplateRequestProtocol {
    public var virtualMachineName: String?
    public var parameters: [ParameterInfoProtocol?]?
    public var location: String?
    public var fileUploadOptions: FileUploadOptionsEnum?

        enum CodingKeys: String, CodingKey {case virtualMachineName = "virtualMachineName"
        case parameters = "parameters"
        case location = "location"
        case fileUploadOptions = "fileUploadOptions"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.virtualMachineName) {
        self.virtualMachineName = try container.decode(String?.self, forKey: .virtualMachineName)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([ParameterInfoData?]?.self, forKey: .parameters)
    }
    if container.contains(.location) {
        self.location = try container.decode(String?.self, forKey: .location)
    }
    if container.contains(.fileUploadOptions) {
        self.fileUploadOptions = try container.decode(FileUploadOptionsEnum?.self, forKey: .fileUploadOptions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.virtualMachineName != nil {try container.encode(self.virtualMachineName, forKey: .virtualMachineName)}
    if self.parameters != nil {try container.encode(self.parameters as! [ParameterInfoData?]?, forKey: .parameters)}
    if self.location != nil {try container.encode(self.location, forKey: .location)}
    if self.fileUploadOptions != nil {try container.encode(self.fileUploadOptions, forKey: .fileUploadOptions)}
  }
}

extension DataFactory {
  public static func createGenerateArmTemplateRequestProtocol() -> GenerateArmTemplateRequestProtocol {
    return GenerateArmTemplateRequestData()
  }
}
