// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CustomImagePropertiesData : CustomImagePropertiesProtocol {
    public var vm: CustomImagePropertiesFromVmProtocol?
    public var vhd: CustomImagePropertiesCustomProtocol?
    public var description: String?
    public var author: String?
    public var creationDate: Date?
    public var managedImageId: String?
    public var provisioningState: String?
    public var uniqueIdentifier: String?

        enum CodingKeys: String, CodingKey {case vm = "vm"
        case vhd = "vhd"
        case description = "description"
        case author = "author"
        case creationDate = "creationDate"
        case managedImageId = "managedImageId"
        case provisioningState = "provisioningState"
        case uniqueIdentifier = "uniqueIdentifier"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.vm) {
        self.vm = try container.decode(CustomImagePropertiesFromVmData?.self, forKey: .vm)
    }
    if container.contains(.vhd) {
        self.vhd = try container.decode(CustomImagePropertiesCustomData?.self, forKey: .vhd)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.author) {
        self.author = try container.decode(String?.self, forKey: .author)
    }
    if container.contains(.creationDate) {
        self.creationDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationDate)), format: .dateTime)
    }
    if container.contains(.managedImageId) {
        self.managedImageId = try container.decode(String?.self, forKey: .managedImageId)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.uniqueIdentifier) {
        self.uniqueIdentifier = try container.decode(String?.self, forKey: .uniqueIdentifier)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.vm != nil {try container.encode(self.vm as! CustomImagePropertiesFromVmData?, forKey: .vm)}
    if self.vhd != nil {try container.encode(self.vhd as! CustomImagePropertiesCustomData?, forKey: .vhd)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.author != nil {try container.encode(self.author, forKey: .author)}
    if self.creationDate != nil {
        try container.encode(DateConverter.toString(date: self.creationDate!, format: .dateTime), forKey: .creationDate)
    }
    if self.managedImageId != nil {try container.encode(self.managedImageId, forKey: .managedImageId)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.uniqueIdentifier != nil {try container.encode(self.uniqueIdentifier, forKey: .uniqueIdentifier)}
  }
}

extension DataFactory {
  public static func createCustomImagePropertiesProtocol() -> CustomImagePropertiesProtocol {
    return CustomImagePropertiesData()
  }
}
