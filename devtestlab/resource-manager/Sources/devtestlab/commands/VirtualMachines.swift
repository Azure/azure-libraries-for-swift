// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// VirtualMachines is the the DevTest Labs Client.
import Foundation
import azureSwiftRuntime
extension Commands {
public struct VirtualMachines {
    public static func AddDataDisk(subscriptionId: String, resourceGroupName: String, labName: String, name: String, dataDiskProperties: DataDiskPropertiesProtocol) -> VirtualMachinesAddDataDisk {
        return AddDataDiskCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name, dataDiskProperties: dataDiskProperties)
    }
    public static func ApplyArtifacts(subscriptionId: String, resourceGroupName: String, labName: String, name: String, applyArtifactsRequest: ApplyArtifactsRequestProtocol) -> VirtualMachinesApplyArtifacts {
        return ApplyArtifactsCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name, applyArtifactsRequest: applyArtifactsRequest)
    }
    public static func Claim(subscriptionId: String, resourceGroupName: String, labName: String, name: String) -> VirtualMachinesClaim {
        return ClaimCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name)
    }
    public static func CreateOrUpdate(subscriptionId: String, resourceGroupName: String, labName: String, name: String, labVirtualMachine: LabVirtualMachineProtocol) -> VirtualMachinesCreateOrUpdate {
        return CreateOrUpdateCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name, labVirtualMachine: labVirtualMachine)
    }
    public static func Delete(subscriptionId: String, resourceGroupName: String, labName: String, name: String) -> VirtualMachinesDelete {
        return DeleteCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name)
    }
    public static func DetachDataDisk(subscriptionId: String, resourceGroupName: String, labName: String, name: String, detachDataDiskProperties: DetachDataDiskPropertiesProtocol) -> VirtualMachinesDetachDataDisk {
        return DetachDataDiskCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name, detachDataDiskProperties: detachDataDiskProperties)
    }
    public static func Get(subscriptionId: String, resourceGroupName: String, labName: String, name: String) -> VirtualMachinesGet {
        return GetCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name)
    }
    public static func List(subscriptionId: String, resourceGroupName: String, labName: String) -> VirtualMachinesList {
        return ListCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName)
    }
    public static func ListApplicableSchedules(subscriptionId: String, resourceGroupName: String, labName: String, name: String) -> VirtualMachinesListApplicableSchedules {
        return ListApplicableSchedulesCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name)
    }
    public static func Start(subscriptionId: String, resourceGroupName: String, labName: String, name: String) -> VirtualMachinesStart {
        return StartCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name)
    }
    public static func Stop(subscriptionId: String, resourceGroupName: String, labName: String, name: String) -> VirtualMachinesStop {
        return StopCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name)
    }
    public static func Update(subscriptionId: String, resourceGroupName: String, labName: String, name: String, labVirtualMachine: LabVirtualMachineFragmentProtocol) -> VirtualMachinesUpdate {
        return UpdateCommand(subscriptionId: subscriptionId, resourceGroupName: resourceGroupName, labName: labName, name: name, labVirtualMachine: labVirtualMachine)
    }
}
}
