// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BillingPeriodPropertiesData : BillingPeriodPropertiesProtocol {
    public var billingPeriodStartDate: Date?
    public var billingPeriodEndDate: Date?
    public var invoiceIds: [String]?

        enum CodingKeys: String, CodingKey {case billingPeriodStartDate = "billingPeriodStartDate"
        case billingPeriodEndDate = "billingPeriodEndDate"
        case invoiceIds = "invoiceIds"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.billingPeriodStartDate) {
        self.billingPeriodStartDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .billingPeriodStartDate)), format: .date)
    }
    if container.contains(.billingPeriodEndDate) {
        self.billingPeriodEndDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .billingPeriodEndDate)), format: .date)
    }
    if container.contains(.invoiceIds) {
        self.invoiceIds = try container.decode([String]?.self, forKey: .invoiceIds)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.billingPeriodStartDate != nil {
        try container.encode(DateConverter.toString(date: self.billingPeriodStartDate!, format: .date), forKey: .billingPeriodStartDate)
    }
    if self.billingPeriodEndDate != nil {
        try container.encode(DateConverter.toString(date: self.billingPeriodEndDate!, format: .date), forKey: .billingPeriodEndDate)
    }
    if self.invoiceIds != nil {try container.encode(self.invoiceIds as! [String]?, forKey: .invoiceIds)}
  }
}

extension DataFactory {
  public static func createBillingPeriodPropertiesProtocol() -> BillingPeriodPropertiesProtocol {
    return BillingPeriodPropertiesData()
  }
}
