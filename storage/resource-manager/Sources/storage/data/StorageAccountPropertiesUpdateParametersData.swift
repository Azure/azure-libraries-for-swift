// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct StorageAccountPropertiesUpdateParametersData : StorageAccountPropertiesUpdateParametersProtocol {
    public var customDomain: CustomDomainProtocol?
    public var encryption: EncryptionProtocol?
    public var accessTier: AccessTier?
    public var enableHttpsTrafficOnly: Bool?
    public var networkRuleSet: NetworkRuleSetProtocol?

    enum CodingKeys: String, CodingKey {
        case customDomain = "customDomain"
        case encryption = "encryption"
        case accessTier = "accessTier"
        case enableHttpsTrafficOnly = "supportsHttpsTrafficOnly"
        case networkRuleSet = "networkAcls"
    }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.customDomain) {
        customDomain = try container.decode(CustomDomainData?.self, forKey: .customDomain)
    }
    if container.contains(.encryption) {
        encryption = try container.decode(EncryptionData?.self, forKey: .encryption)
    }
    if container.contains(.accessTier) {
        accessTier = try container.decode(AccessTier?.self, forKey: .accessTier)
    }
    if container.contains(.enableHttpsTrafficOnly) {
        enableHttpsTrafficOnly = try container.decode(Bool.self, forKey: .enableHttpsTrafficOnly)
    }
    if container.contains(.networkRuleSet) {
        networkRuleSet = try container.decode(NetworkRuleSetData?.self, forKey: .networkRuleSet)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.customDomain != nil {try container.encode(customDomain as! CustomDomainData?, forKey: .customDomain)}
    if self.encryption != nil {try container.encode(encryption as! EncryptionData?, forKey: .encryption)}
    if self.accessTier != nil {try container.encode(accessTier, forKey: .accessTier)}
    if self.enableHttpsTrafficOnly != nil {try container.encode(enableHttpsTrafficOnly, forKey: .enableHttpsTrafficOnly)}
    if self.networkRuleSet != nil {try container.encode(networkRuleSet as! NetworkRuleSetData?, forKey: .networkRuleSet)}
  }
}

extension DataFactory {
  public static func createStorageAccountPropertiesUpdateParametersProtocol() -> StorageAccountPropertiesUpdateParametersProtocol {
    return StorageAccountPropertiesUpdateParametersData()
  }
}
