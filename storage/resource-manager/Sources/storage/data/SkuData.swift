// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct SkuData : SkuProtocol {
    public var name: SkuName
    public var tier: SkuTier?
    public var resourceType: String?
    public var kind: Kind?
    public var locations: [String]?
    public var capabilities: [SKUCapabilityProtocol?]?
    public var restrictions: [RestrictionProtocol?]?

    enum CodingKeys: String, CodingKey {
        case name = "name"
        case tier = "tier"
        case resourceType = "resourceType"
        case kind = "kind"
        case locations = "locations"
        case capabilities = "capabilities"
        case restrictions = "restrictions"
    }

  public init(name: SkuName)  {
    self.name = name
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    name = try container.decode(SkuName.self, forKey: .name)
    if container.contains(.tier) {
        tier = try container.decode(SkuTier?.self, forKey: .tier)
    }
    if container.contains(.resourceType) {
        resourceType = try container.decode(String.self, forKey: .resourceType)
    }
    if container.contains(.kind) {
        kind = try container.decode(Kind?.self, forKey: .kind)
    }
    if container.contains(.locations) {
        locations = try container.decode([String]?.self, forKey: .locations)
    }
    if container.contains(.capabilities) {
        capabilities = try container.decode([SKUCapabilityData?]?.self, forKey: .capabilities)
    }
    if container.contains(.restrictions) {
        restrictions = try container.decode([RestrictionData?]?.self, forKey: .restrictions)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(name, forKey: .name)
    if self.tier != nil {try container.encode(tier, forKey: .tier)}
    if self.resourceType != nil {try container.encode(resourceType, forKey: .resourceType)}
    if self.kind != nil {try container.encode(kind, forKey: .kind)}
    if self.locations != nil {try container.encode(locations as! [String]?, forKey: .locations)}
    if self.capabilities != nil {try container.encode(capabilities as! [SKUCapabilityData?]?, forKey: .capabilities)}
    if self.restrictions != nil {try container.encode(restrictions as! [RestrictionData?]?, forKey: .restrictions)}
  }
}

extension DataFactory {
  public static func createSkuProtocol(name: SkuName) -> SkuProtocol {
    return SkuData(name: name)
  }
}
