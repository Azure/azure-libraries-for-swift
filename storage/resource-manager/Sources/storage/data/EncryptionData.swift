// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct EncryptionData : EncryptionProtocol {
    public var services: EncryptionServicesProtocol?
    public var keySource: KeySource
    public var keyVaultProperties: KeyVaultPropertiesProtocol?

    enum CodingKeys: String, CodingKey {
        case services = "services"
        case keySource = "keySource"
        case keyVaultProperties = "keyvaultproperties"
    }

  public init(keySource: KeySource)  {
    self.keySource = keySource
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.services) {
        services = try container.decode(EncryptionServicesData?.self, forKey: .services)
    }
    keySource = try container.decode(KeySource.self, forKey: .keySource)
    if container.contains(.keyVaultProperties) {
        keyVaultProperties = try container.decode(KeyVaultPropertiesData?.self, forKey: .keyVaultProperties)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.services != nil {try container.encode(services as! EncryptionServicesData?, forKey: .services)}
    try container.encode(keySource, forKey: .keySource)
    if self.keyVaultProperties != nil {try container.encode(keyVaultProperties as! KeyVaultPropertiesData?, forKey: .keyVaultProperties)}
  }
}

extension DataFactory {
  public static func createEncryptionProtocol(keySource: KeySource) -> EncryptionProtocol {
    return EncryptionData(keySource: keySource)
  }
}
