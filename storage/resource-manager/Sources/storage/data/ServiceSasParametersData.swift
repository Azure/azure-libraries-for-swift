// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct ServiceSasParametersData : ServiceSasParametersProtocol {
    public var canonicalizedResource: String
    public var resource: SignedResource
    public var permissions: Permissions?
    public var iPAddressOrRange: String?
    public var protocols: HttpProtocol?
    public var sharedAccessStartTime: Date?
    public var sharedAccessExpiryTime: Date?
    public var identifier: String?
    public var partitionKeyStart: String?
    public var partitionKeyEnd: String?
    public var rowKeyStart: String?
    public var rowKeyEnd: String?
    public var keyToSign: String?
    public var cacheControl: String?
    public var contentDisposition: String?
    public var contentEncoding: String?
    public var contentLanguage: String?
    public var contentType: String?

    enum CodingKeys: String, CodingKey {
        case canonicalizedResource = "canonicalizedResource"
        case resource = "signedResource"
        case permissions = "signedPermission"
        case iPAddressOrRange = "signedIp"
        case protocols = "signedProtocol"
        case sharedAccessStartTime = "signedStart"
        case sharedAccessExpiryTime = "signedExpiry"
        case identifier = "signedIdentifier"
        case partitionKeyStart = "startPk"
        case partitionKeyEnd = "endPk"
        case rowKeyStart = "startRk"
        case rowKeyEnd = "endRk"
        case keyToSign = "keyToSign"
        case cacheControl = "rscc"
        case contentDisposition = "rscd"
        case contentEncoding = "rsce"
        case contentLanguage = "rscl"
        case contentType = "rsct"
    }

  public init(canonicalizedResource: String, resource: SignedResource)  {
    self.canonicalizedResource = canonicalizedResource
    self.resource = resource
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    canonicalizedResource = try container.decode(String.self, forKey: .canonicalizedResource)
    resource = try container.decode(SignedResource.self, forKey: .resource)
    if container.contains(.permissions) {
        permissions = try container.decode(Permissions?.self, forKey: .permissions)
    }
    if container.contains(.iPAddressOrRange) {
        iPAddressOrRange = try container.decode(String.self, forKey: .iPAddressOrRange)
    }
    if container.contains(.protocols) {
        protocols = try container.decode(HttpProtocol?.self, forKey: .protocols)
    }
    if container.contains(.sharedAccessStartTime) {
        sharedAccessStartTime = try container.decode(Date.self, forKey: .sharedAccessStartTime)
    }
    if container.contains(.sharedAccessExpiryTime) {
        sharedAccessExpiryTime = try container.decode(Date.self, forKey: .sharedAccessExpiryTime)
    }
    if container.contains(.identifier) {
        identifier = try container.decode(String.self, forKey: .identifier)
    }
    if container.contains(.partitionKeyStart) {
        partitionKeyStart = try container.decode(String.self, forKey: .partitionKeyStart)
    }
    if container.contains(.partitionKeyEnd) {
        partitionKeyEnd = try container.decode(String.self, forKey: .partitionKeyEnd)
    }
    if container.contains(.rowKeyStart) {
        rowKeyStart = try container.decode(String.self, forKey: .rowKeyStart)
    }
    if container.contains(.rowKeyEnd) {
        rowKeyEnd = try container.decode(String.self, forKey: .rowKeyEnd)
    }
    if container.contains(.keyToSign) {
        keyToSign = try container.decode(String.self, forKey: .keyToSign)
    }
    if container.contains(.cacheControl) {
        cacheControl = try container.decode(String.self, forKey: .cacheControl)
    }
    if container.contains(.contentDisposition) {
        contentDisposition = try container.decode(String.self, forKey: .contentDisposition)
    }
    if container.contains(.contentEncoding) {
        contentEncoding = try container.decode(String.self, forKey: .contentEncoding)
    }
    if container.contains(.contentLanguage) {
        contentLanguage = try container.decode(String.self, forKey: .contentLanguage)
    }
    if container.contains(.contentType) {
        contentType = try container.decode(String.self, forKey: .contentType)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(canonicalizedResource, forKey: .canonicalizedResource)
    try container.encode(resource, forKey: .resource)
    if self.permissions != nil {try container.encode(permissions, forKey: .permissions)}
    if self.iPAddressOrRange != nil {try container.encode(iPAddressOrRange, forKey: .iPAddressOrRange)}
    if self.protocols != nil {try container.encode(protocols, forKey: .protocols)}
    if self.sharedAccessStartTime != nil {try container.encode(sharedAccessStartTime, forKey: .sharedAccessStartTime)}
    if self.sharedAccessExpiryTime != nil {try container.encode(sharedAccessExpiryTime, forKey: .sharedAccessExpiryTime)}
    if self.identifier != nil {try container.encode(identifier, forKey: .identifier)}
    if self.partitionKeyStart != nil {try container.encode(partitionKeyStart, forKey: .partitionKeyStart)}
    if self.partitionKeyEnd != nil {try container.encode(partitionKeyEnd, forKey: .partitionKeyEnd)}
    if self.rowKeyStart != nil {try container.encode(rowKeyStart, forKey: .rowKeyStart)}
    if self.rowKeyEnd != nil {try container.encode(rowKeyEnd, forKey: .rowKeyEnd)}
    if self.keyToSign != nil {try container.encode(keyToSign, forKey: .keyToSign)}
    if self.cacheControl != nil {try container.encode(cacheControl, forKey: .cacheControl)}
    if self.contentDisposition != nil {try container.encode(contentDisposition, forKey: .contentDisposition)}
    if self.contentEncoding != nil {try container.encode(contentEncoding, forKey: .contentEncoding)}
    if self.contentLanguage != nil {try container.encode(contentLanguage, forKey: .contentLanguage)}
    if self.contentType != nil {try container.encode(contentType, forKey: .contentType)}
  }
}

extension DataFactory {
  public static func createServiceSasParametersProtocol(canonicalizedResource: String, resource: SignedResource) -> ServiceSasParametersProtocol {
    return ServiceSasParametersData(canonicalizedResource: canonicalizedResource, resource: resource)
  }
}
