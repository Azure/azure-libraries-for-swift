// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AccountSasParametersData : AccountSasParametersProtocol {
    public var services: ServicesEnum
    public var resourceTypes: SignedResourceTypesEnum
    public var permissions: PermissionsEnum
    public var iPAddressOrRange: String?
    public var protocols: HttpProtocolEnum?
    public var sharedAccessStartTime: Date?
    public var sharedAccessExpiryTime: Date
    public var keyToSign: String?

        enum CodingKeys: String, CodingKey {case services = "signedServices"
        case resourceTypes = "signedResourceTypes"
        case permissions = "signedPermission"
        case iPAddressOrRange = "signedIp"
        case protocols = "signedProtocol"
        case sharedAccessStartTime = "signedStart"
        case sharedAccessExpiryTime = "signedExpiry"
        case keyToSign = "keyToSign"
        }

  public init(services: ServicesEnum, resourceTypes: SignedResourceTypesEnum, permissions: PermissionsEnum, sharedAccessExpiryTime: Date)  {
    self.services = services
    self.resourceTypes = resourceTypes
    self.permissions = permissions
    self.sharedAccessExpiryTime = sharedAccessExpiryTime
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.services = try container.decode(ServicesEnum.self, forKey: .services)
    self.resourceTypes = try container.decode(SignedResourceTypesEnum.self, forKey: .resourceTypes)
    self.permissions = try container.decode(PermissionsEnum.self, forKey: .permissions)
    if container.contains(.iPAddressOrRange) {
        self.iPAddressOrRange = try container.decode(String?.self, forKey: .iPAddressOrRange)
    }
    if container.contains(.protocols) {
        self.protocols = try container.decode(HttpProtocolEnum?.self, forKey: .protocols)
    }
    if container.contains(.sharedAccessStartTime) {
        self.sharedAccessStartTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .sharedAccessStartTime)), format: .dateTime)
    }
        self.sharedAccessExpiryTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .sharedAccessExpiryTime)), format: .dateTime)!
    if container.contains(.keyToSign) {
        self.keyToSign = try container.decode(String?.self, forKey: .keyToSign)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.services, forKey: .services)
    try container.encode(self.resourceTypes, forKey: .resourceTypes)
    try container.encode(self.permissions, forKey: .permissions)
    if self.iPAddressOrRange != nil {try container.encode(self.iPAddressOrRange, forKey: .iPAddressOrRange)}
    if self.protocols != nil {try container.encode(self.protocols, forKey: .protocols)}
    if self.sharedAccessStartTime != nil {
        try container.encode(DateConverter.toString(date: self.sharedAccessStartTime!, format: .dateTime), forKey: .sharedAccessStartTime)
    }
    try container.encode(DateConverter.toString(date: self.sharedAccessExpiryTime, format: .dateTime), forKey: .sharedAccessExpiryTime)
    if self.keyToSign != nil {try container.encode(self.keyToSign, forKey: .keyToSign)}
  }
}

extension DataFactory {
  public static func createAccountSasParametersProtocol(services: ServicesEnum, resourceTypes: SignedResourceTypesEnum, permissions: PermissionsEnum, sharedAccessExpiryTime: Date) -> AccountSasParametersProtocol {
    return AccountSasParametersData(services: services, resourceTypes: resourceTypes, permissions: permissions, sharedAccessExpiryTime: sharedAccessExpiryTime)
  }
}
