// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct AccountSasParametersData : AccountSasParametersProtocol {
    public var services: Services
    public var resourceTypes: SignedResourceTypes
    public var permissions: Permissions
    public var iPAddressOrRange: String?
    public var protocols: HttpProtocol?
    public var sharedAccessStartTime: Date?
    public var sharedAccessExpiryTime: Date
    public var keyToSign: String?

    enum CodingKeys: String, CodingKey {
        case services = "signedServices"
        case resourceTypes = "signedResourceTypes"
        case permissions = "signedPermission"
        case iPAddressOrRange = "signedIp"
        case protocols = "signedProtocol"
        case sharedAccessStartTime = "signedStart"
        case sharedAccessExpiryTime = "signedExpiry"
        case keyToSign = "keyToSign"
    }

  public init(services: Services, resourceTypes: SignedResourceTypes, permissions: Permissions, sharedAccessExpiryTime: Date)  {
    self.services = services
    self.resourceTypes = resourceTypes
    self.permissions = permissions
    self.sharedAccessExpiryTime = sharedAccessExpiryTime
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    services = try container.decode(Services.self, forKey: .services)
    resourceTypes = try container.decode(SignedResourceTypes.self, forKey: .resourceTypes)
    permissions = try container.decode(Permissions.self, forKey: .permissions)
    if container.contains(.iPAddressOrRange) {
        iPAddressOrRange = try container.decode(String.self, forKey: .iPAddressOrRange)
    }
    if container.contains(.protocols) {
        protocols = try container.decode(HttpProtocol?.self, forKey: .protocols)
    }
    if container.contains(.sharedAccessStartTime) {
        sharedAccessStartTime = try container.decode(Date.self, forKey: .sharedAccessStartTime)
    }
    sharedAccessExpiryTime = try container.decode(Date.self, forKey: .sharedAccessExpiryTime)
    if container.contains(.keyToSign) {
        keyToSign = try container.decode(String.self, forKey: .keyToSign)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(services, forKey: .services)
    try container.encode(resourceTypes, forKey: .resourceTypes)
    try container.encode(permissions, forKey: .permissions)
    if self.iPAddressOrRange != nil {try container.encode(iPAddressOrRange, forKey: .iPAddressOrRange)}
    if self.protocols != nil {try container.encode(protocols, forKey: .protocols)}
    if self.sharedAccessStartTime != nil {try container.encode(sharedAccessStartTime, forKey: .sharedAccessStartTime)}
    try container.encode(sharedAccessExpiryTime, forKey: .sharedAccessExpiryTime)
    if self.keyToSign != nil {try container.encode(keyToSign, forKey: .keyToSign)}
  }
}

extension DataFactory {
  public static func createAccountSasParametersProtocol(services: Services, resourceTypes: SignedResourceTypes, permissions: Permissions, sharedAccessExpiryTime: Date) -> AccountSasParametersProtocol {
    return AccountSasParametersData(services: services, resourceTypes: resourceTypes, permissions: permissions, sharedAccessExpiryTime: sharedAccessExpiryTime)
  }
}
