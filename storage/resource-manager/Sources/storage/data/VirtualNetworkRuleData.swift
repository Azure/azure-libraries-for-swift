// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualNetworkRuleData : VirtualNetworkRuleProtocol {
    public var virtualNetworkResourceId: String
    public var action: ActionEnum?
    public var state: StateEnum?

        enum CodingKeys: String, CodingKey {case virtualNetworkResourceId = "id"
        case action = "action"
        case state = "state"
        }

  public init(virtualNetworkResourceId: String)  {
    self.virtualNetworkResourceId = virtualNetworkResourceId
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.virtualNetworkResourceId = try container.decode(String.self, forKey: .virtualNetworkResourceId)
    if container.contains(.action) {
        self.action = try container.decode(ActionEnum?.self, forKey: .action)
    }
    if container.contains(.state) {
        self.state = try container.decode(StateEnum?.self, forKey: .state)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.virtualNetworkResourceId, forKey: .virtualNetworkResourceId)
    if self.action != nil {try container.encode(self.action, forKey: .action)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
  }
}

extension DataFactory {
  public static func createVirtualNetworkRuleProtocol(virtualNetworkResourceId: String) -> VirtualNetworkRuleProtocol {
    return VirtualNetworkRuleData(virtualNetworkResourceId: virtualNetworkResourceId)
  }
}
