// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkRuleSetData : NetworkRuleSetProtocol {
    public var bypass: BypassEnum?
    public var virtualNetworkRules: [VirtualNetworkRuleProtocol?]?
    public var ipRules: [IPRuleProtocol?]?
    public var defaultAction: DefaultActionEnum

        enum CodingKeys: String, CodingKey {case bypass = "bypass"
        case virtualNetworkRules = "virtualNetworkRules"
        case ipRules = "ipRules"
        case defaultAction = "defaultAction"
        }

  public init(defaultAction: DefaultActionEnum)  {
    self.defaultAction = defaultAction
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.bypass) {
        self.bypass = try container.decode(BypassEnum?.self, forKey: .bypass)
    }
    if container.contains(.virtualNetworkRules) {
        self.virtualNetworkRules = try container.decode([VirtualNetworkRuleData?]?.self, forKey: .virtualNetworkRules)
    }
    if container.contains(.ipRules) {
        self.ipRules = try container.decode([IPRuleData?]?.self, forKey: .ipRules)
    }
    self.defaultAction = try container.decode(DefaultActionEnum.self, forKey: .defaultAction)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.bypass != nil {try container.encode(self.bypass, forKey: .bypass)}
    if self.virtualNetworkRules != nil {try container.encode(self.virtualNetworkRules as! [VirtualNetworkRuleData?]?, forKey: .virtualNetworkRules)}
    if self.ipRules != nil {try container.encode(self.ipRules as! [IPRuleData?]?, forKey: .ipRules)}
    try container.encode(self.defaultAction, forKey: .defaultAction)
  }
}

extension DataFactory {
  public static func createNetworkRuleSetProtocol(defaultAction: DefaultActionEnum) -> NetworkRuleSetProtocol {
    return NetworkRuleSetData(defaultAction: defaultAction)
  }
}
