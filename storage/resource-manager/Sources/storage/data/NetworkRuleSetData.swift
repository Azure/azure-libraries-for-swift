// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct NetworkRuleSetData : NetworkRuleSetProtocol {
    public var bypass: Bypass?
    public var virtualNetworkRules: [VirtualNetworkRuleProtocol?]?
    public var ipRules: [IPRuleProtocol?]?
    public var defaultAction: DefaultAction

    enum CodingKeys: String, CodingKey {
        case bypass = "bypass"
        case virtualNetworkRules = "virtualNetworkRules"
        case ipRules = "ipRules"
        case defaultAction = "defaultAction"
    }

  public init(defaultAction: DefaultAction)  {
    self.defaultAction = defaultAction
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.bypass) {
        bypass = try container.decode(Bypass?.self, forKey: .bypass)
    }
    if container.contains(.virtualNetworkRules) {
        virtualNetworkRules = try container.decode([VirtualNetworkRuleData?]?.self, forKey: .virtualNetworkRules)
    }
    if container.contains(.ipRules) {
        ipRules = try container.decode([IPRuleData?]?.self, forKey: .ipRules)
    }
    defaultAction = try container.decode(DefaultAction.self, forKey: .defaultAction)
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.bypass != nil {try container.encode(bypass, forKey: .bypass)}
    if self.virtualNetworkRules != nil {try container.encode(virtualNetworkRules as! [VirtualNetworkRuleData?]?, forKey: .virtualNetworkRules)}
    if self.ipRules != nil {try container.encode(ipRules as! [IPRuleData?]?, forKey: .ipRules)}
    try container.encode(defaultAction, forKey: .defaultAction)
  }
}

extension DataFactory {
  public static func createNetworkRuleSetProtocol(defaultAction: DefaultAction) -> NetworkRuleSetProtocol {
    return NetworkRuleSetData(defaultAction: defaultAction)
  }
}
