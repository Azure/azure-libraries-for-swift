// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct StorageAccountPropertiesData : StorageAccountPropertiesProtocol {
    public var provisioningState: ProvisioningState?
    public var primaryEndpoints: EndpointsProtocol?
    public var primaryLocation: String?
    public var statusOfPrimary: AccountStatus?
    public var lastGeoFailoverTime: Date?
    public var secondaryLocation: String?
    public var statusOfSecondary: AccountStatus?
    public var creationTime: Date?
    public var customDomain: CustomDomainProtocol?
    public var secondaryEndpoints: EndpointsProtocol?
    public var encryption: EncryptionProtocol?
    public var accessTier: AccessTier?
    public var enableHttpsTrafficOnly: Bool?
    public var networkRuleSet: NetworkRuleSetProtocol?

    enum CodingKeys: String, CodingKey {
        case provisioningState = "provisioningState"
        case primaryEndpoints = "primaryEndpoints"
        case primaryLocation = "primaryLocation"
        case statusOfPrimary = "statusOfPrimary"
        case lastGeoFailoverTime = "lastGeoFailoverTime"
        case secondaryLocation = "secondaryLocation"
        case statusOfSecondary = "statusOfSecondary"
        case creationTime = "creationTime"
        case customDomain = "customDomain"
        case secondaryEndpoints = "secondaryEndpoints"
        case encryption = "encryption"
        case accessTier = "accessTier"
        case enableHttpsTrafficOnly = "supportsHttpsTrafficOnly"
        case networkRuleSet = "networkAcls"
    }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.provisioningState) {
        provisioningState = try container.decode(ProvisioningState?.self, forKey: .provisioningState)
    }
    if container.contains(.primaryEndpoints) {
        primaryEndpoints = try container.decode(EndpointsData?.self, forKey: .primaryEndpoints)
    }
    if container.contains(.primaryLocation) {
        primaryLocation = try container.decode(String.self, forKey: .primaryLocation)
    }
    if container.contains(.statusOfPrimary) {
        statusOfPrimary = try container.decode(AccountStatus?.self, forKey: .statusOfPrimary)
    }
    if container.contains(.lastGeoFailoverTime) {
        lastGeoFailoverTime = try container.decode(Date.self, forKey: .lastGeoFailoverTime)
    }
    if container.contains(.secondaryLocation) {
        secondaryLocation = try container.decode(String.self, forKey: .secondaryLocation)
    }
    if container.contains(.statusOfSecondary) {
        statusOfSecondary = try container.decode(AccountStatus?.self, forKey: .statusOfSecondary)
    }
    if container.contains(.creationTime) {
        creationTime = try container.decode(Date.self, forKey: .creationTime)
    }
    if container.contains(.customDomain) {
        customDomain = try container.decode(CustomDomainData?.self, forKey: .customDomain)
    }
    if container.contains(.secondaryEndpoints) {
        secondaryEndpoints = try container.decode(EndpointsData?.self, forKey: .secondaryEndpoints)
    }
    if container.contains(.encryption) {
        encryption = try container.decode(EncryptionData?.self, forKey: .encryption)
    }
    if container.contains(.accessTier) {
        accessTier = try container.decode(AccessTier?.self, forKey: .accessTier)
    }
    if container.contains(.enableHttpsTrafficOnly) {
        enableHttpsTrafficOnly = try container.decode(Bool.self, forKey: .enableHttpsTrafficOnly)
    }
    if container.contains(.networkRuleSet) {
        networkRuleSet = try container.decode(NetworkRuleSetData?.self, forKey: .networkRuleSet)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.provisioningState != nil {try container.encode(provisioningState, forKey: .provisioningState)}
    if self.primaryEndpoints != nil {try container.encode(primaryEndpoints as! EndpointsData?, forKey: .primaryEndpoints)}
    if self.primaryLocation != nil {try container.encode(primaryLocation, forKey: .primaryLocation)}
    if self.statusOfPrimary != nil {try container.encode(statusOfPrimary, forKey: .statusOfPrimary)}
    if self.lastGeoFailoverTime != nil {try container.encode(lastGeoFailoverTime, forKey: .lastGeoFailoverTime)}
    if self.secondaryLocation != nil {try container.encode(secondaryLocation, forKey: .secondaryLocation)}
    if self.statusOfSecondary != nil {try container.encode(statusOfSecondary, forKey: .statusOfSecondary)}
    if self.creationTime != nil {try container.encode(creationTime, forKey: .creationTime)}
    if self.customDomain != nil {try container.encode(customDomain as! CustomDomainData?, forKey: .customDomain)}
    if self.secondaryEndpoints != nil {try container.encode(secondaryEndpoints as! EndpointsData?, forKey: .secondaryEndpoints)}
    if self.encryption != nil {try container.encode(encryption as! EncryptionData?, forKey: .encryption)}
    if self.accessTier != nil {try container.encode(accessTier, forKey: .accessTier)}
    if self.enableHttpsTrafficOnly != nil {try container.encode(enableHttpsTrafficOnly, forKey: .enableHttpsTrafficOnly)}
    if self.networkRuleSet != nil {try container.encode(networkRuleSet as! NetworkRuleSetData?, forKey: .networkRuleSet)}
  }
}

extension DataFactory {
  public static func createStorageAccountPropertiesProtocol() -> StorageAccountPropertiesProtocol {
    return StorageAccountPropertiesData()
  }
}
