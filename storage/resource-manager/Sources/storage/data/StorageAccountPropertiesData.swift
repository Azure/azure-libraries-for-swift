// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StorageAccountPropertiesData : StorageAccountPropertiesProtocol {
    public var provisioningState: ProvisioningStateEnum?
    public var primaryEndpoints: EndpointsProtocol?
    public var primaryLocation: String?
    public var statusOfPrimary: AccountStatusEnum?
    public var lastGeoFailoverTime: Date?
    public var secondaryLocation: String?
    public var statusOfSecondary: AccountStatusEnum?
    public var creationTime: Date?
    public var customDomain: CustomDomainProtocol?
    public var secondaryEndpoints: EndpointsProtocol?
    public var encryption: EncryptionProtocol?
    public var accessTier: AccessTierEnum?
    public var enableHttpsTrafficOnly: Bool?
    public var networkRuleSet: NetworkRuleSetProtocol?

        enum CodingKeys: String, CodingKey {case provisioningState = "provisioningState"
        case primaryEndpoints = "primaryEndpoints"
        case primaryLocation = "primaryLocation"
        case statusOfPrimary = "statusOfPrimary"
        case lastGeoFailoverTime = "lastGeoFailoverTime"
        case secondaryLocation = "secondaryLocation"
        case statusOfSecondary = "statusOfSecondary"
        case creationTime = "creationTime"
        case customDomain = "customDomain"
        case secondaryEndpoints = "secondaryEndpoints"
        case encryption = "encryption"
        case accessTier = "accessTier"
        case enableHttpsTrafficOnly = "supportsHttpsTrafficOnly"
        case networkRuleSet = "networkAcls"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(ProvisioningStateEnum?.self, forKey: .provisioningState)
    }
    if container.contains(.primaryEndpoints) {
        self.primaryEndpoints = try container.decode(EndpointsData?.self, forKey: .primaryEndpoints)
    }
    if container.contains(.primaryLocation) {
        self.primaryLocation = try container.decode(String?.self, forKey: .primaryLocation)
    }
    if container.contains(.statusOfPrimary) {
        self.statusOfPrimary = try container.decode(AccountStatusEnum?.self, forKey: .statusOfPrimary)
    }
    if container.contains(.lastGeoFailoverTime) {
        self.lastGeoFailoverTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastGeoFailoverTime)), format: .dateTime)
    }
    if container.contains(.secondaryLocation) {
        self.secondaryLocation = try container.decode(String?.self, forKey: .secondaryLocation)
    }
    if container.contains(.statusOfSecondary) {
        self.statusOfSecondary = try container.decode(AccountStatusEnum?.self, forKey: .statusOfSecondary)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.customDomain) {
        self.customDomain = try container.decode(CustomDomainData?.self, forKey: .customDomain)
    }
    if container.contains(.secondaryEndpoints) {
        self.secondaryEndpoints = try container.decode(EndpointsData?.self, forKey: .secondaryEndpoints)
    }
    if container.contains(.encryption) {
        self.encryption = try container.decode(EncryptionData?.self, forKey: .encryption)
    }
    if container.contains(.accessTier) {
        self.accessTier = try container.decode(AccessTierEnum?.self, forKey: .accessTier)
    }
    if container.contains(.enableHttpsTrafficOnly) {
        self.enableHttpsTrafficOnly = try container.decode(Bool?.self, forKey: .enableHttpsTrafficOnly)
    }
    if container.contains(.networkRuleSet) {
        self.networkRuleSet = try container.decode(NetworkRuleSetData?.self, forKey: .networkRuleSet)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.primaryEndpoints != nil {try container.encode(self.primaryEndpoints as! EndpointsData?, forKey: .primaryEndpoints)}
    if self.primaryLocation != nil {try container.encode(self.primaryLocation, forKey: .primaryLocation)}
    if self.statusOfPrimary != nil {try container.encode(self.statusOfPrimary, forKey: .statusOfPrimary)}
    if self.lastGeoFailoverTime != nil {
        try container.encode(DateConverter.toString(date: self.lastGeoFailoverTime!, format: .dateTime), forKey: .lastGeoFailoverTime)
    }
    if self.secondaryLocation != nil {try container.encode(self.secondaryLocation, forKey: .secondaryLocation)}
    if self.statusOfSecondary != nil {try container.encode(self.statusOfSecondary, forKey: .statusOfSecondary)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.customDomain != nil {try container.encode(self.customDomain as! CustomDomainData?, forKey: .customDomain)}
    if self.secondaryEndpoints != nil {try container.encode(self.secondaryEndpoints as! EndpointsData?, forKey: .secondaryEndpoints)}
    if self.encryption != nil {try container.encode(self.encryption as! EncryptionData?, forKey: .encryption)}
    if self.accessTier != nil {try container.encode(self.accessTier, forKey: .accessTier)}
    if self.enableHttpsTrafficOnly != nil {try container.encode(self.enableHttpsTrafficOnly, forKey: .enableHttpsTrafficOnly)}
    if self.networkRuleSet != nil {try container.encode(self.networkRuleSet as! NetworkRuleSetData?, forKey: .networkRuleSet)}
  }
}

extension DataFactory {
  public static func createStorageAccountPropertiesProtocol() -> StorageAccountPropertiesProtocol {
    return StorageAccountPropertiesData()
  }
}
