// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct BlobsGetPropertiesHeadersData : BlobsGetPropertiesHeadersProtocol {
    public var lastModified: String?
    public var metadata: [String:String]?
    public var blobType: BlobType?
    public var copyCompletionTime: Date?
    public var copyStatusDescription: String?
    public var copyId: String?
    public var copyProgress: String?
    public var copySource: String?
    public var copyStatus: CopyStatusType?
    public var isIncrementalCopy: Bool?
    public var leaseDuration: LeaseDurationType?
    public var leaseState: LeaseStateType?
    public var leaseStatus: LeaseStatusType?
    public var contentLength: Int32?
    public var contentType: String?
    public var eTag: String?
    public var contentMD5: String?
    public var contentEncoding: String?
    public var contentDisposition: String?
    public var cacheControl: String?
    public var blobSequenceNumber: String?
    public var requestId: String?
    public var version: String?
    public var date: Date?
    public var acceptRanges: String?
    public var blobCommittedBlockCount: String?
    public var isServerEncrypted: Bool?

    enum CodingKeys: String, CodingKey {
        case lastModified = "Last-Modified"
        case metadata = "x-ms-meta"
        case blobType = "x-ms-blob-type"
        case copyCompletionTime = "x-ms-copy-completion-time"
        case copyStatusDescription = "x-ms-copy-status-description"
        case copyId = "x-ms-copy-id"
        case copyProgress = "x-ms-copy-progress"
        case copySource = "x-ms-copy-source"
        case copyStatus = "x-ms-copy-status"
        case isIncrementalCopy = "x-ms-incremental-copy"
        case leaseDuration = "x-ms-lease-duration"
        case leaseState = "x-ms-lease-state"
        case leaseStatus = "x-ms-lease-status"
        case contentLength = "Content-Length"
        case contentType = "Content-Type"
        case eTag = "ETag"
        case contentMD5 = "Content-MD5"
        case contentEncoding = "Content-Encoding"
        case contentDisposition = "Content-Disposition"
        case cacheControl = "Cache-Control"
        case blobSequenceNumber = "x-ms-blob-sequence-number"
        case requestId = "x-ms-request-id"
        case version = "x-ms-version"
        case date = "Date"
        case acceptRanges = "Accept-Ranges"
        case blobCommittedBlockCount = "x-ms-blob-committed-block-count"
        case isServerEncrypted = "x-ms-server-encrypted"
    }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.lastModified) {
        lastModified = try container.decode(String.self, forKey: .lastModified)
    }
    if container.contains(.metadata) {
        metadata = try container.decode([String:String]?.self, forKey: .metadata)
    }
    if container.contains(.blobType) {
        blobType = try container.decode(BlobType?.self, forKey: .blobType)
    }
    if container.contains(.copyCompletionTime) {
        copyCompletionTime = try container.decode(Date.self, forKey: .copyCompletionTime)
    }
    if container.contains(.copyStatusDescription) {
        copyStatusDescription = try container.decode(String.self, forKey: .copyStatusDescription)
    }
    if container.contains(.copyId) {
        copyId = try container.decode(String.self, forKey: .copyId)
    }
    if container.contains(.copyProgress) {
        copyProgress = try container.decode(String.self, forKey: .copyProgress)
    }
    if container.contains(.copySource) {
        copySource = try container.decode(String.self, forKey: .copySource)
    }
    if container.contains(.copyStatus) {
        copyStatus = try container.decode(CopyStatusType?.self, forKey: .copyStatus)
    }
    if container.contains(.isIncrementalCopy) {
        isIncrementalCopy = try container.decode(Bool.self, forKey: .isIncrementalCopy)
    }
    if container.contains(.leaseDuration) {
        leaseDuration = try container.decode(LeaseDurationType?.self, forKey: .leaseDuration)
    }
    if container.contains(.leaseState) {
        leaseState = try container.decode(LeaseStateType?.self, forKey: .leaseState)
    }
    if container.contains(.leaseStatus) {
        leaseStatus = try container.decode(LeaseStatusType?.self, forKey: .leaseStatus)
    }
    if container.contains(.contentLength) {
        contentLength = try container.decode(Int32.self, forKey: .contentLength)
    }
    if container.contains(.contentType) {
        contentType = try container.decode(String.self, forKey: .contentType)
    }
    if container.contains(.eTag) {
        eTag = try container.decode(String.self, forKey: .eTag)
    }
    if container.contains(.contentMD5) {
        contentMD5 = try container.decode(String.self, forKey: .contentMD5)
    }
    if container.contains(.contentEncoding) {
        contentEncoding = try container.decode(String.self, forKey: .contentEncoding)
    }
    if container.contains(.contentDisposition) {
        contentDisposition = try container.decode(String.self, forKey: .contentDisposition)
    }
    if container.contains(.cacheControl) {
        cacheControl = try container.decode(String.self, forKey: .cacheControl)
    }
    if container.contains(.blobSequenceNumber) {
        blobSequenceNumber = try container.decode(String.self, forKey: .blobSequenceNumber)
    }
    if container.contains(.requestId) {
        requestId = try container.decode(String.self, forKey: .requestId)
    }
    if container.contains(.version) {
        version = try container.decode(String.self, forKey: .version)
    }
    if container.contains(.date) {
        date = try container.decode(Date.self, forKey: .date)
    }
    if container.contains(.acceptRanges) {
        acceptRanges = try container.decode(String.self, forKey: .acceptRanges)
    }
    if container.contains(.blobCommittedBlockCount) {
        blobCommittedBlockCount = try container.decode(String.self, forKey: .blobCommittedBlockCount)
    }
    if container.contains(.isServerEncrypted) {
        isServerEncrypted = try container.decode(Bool.self, forKey: .isServerEncrypted)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.lastModified != nil {try container.encode(lastModified, forKey: .lastModified)}
    if self.metadata != nil {try container.encode(metadata, forKey: .metadata)}
    if self.blobType != nil {try container.encode(blobType, forKey: .blobType)}
    if self.copyCompletionTime != nil {try container.encode(copyCompletionTime, forKey: .copyCompletionTime)}
    if self.copyStatusDescription != nil {try container.encode(copyStatusDescription, forKey: .copyStatusDescription)}
    if self.copyId != nil {try container.encode(copyId, forKey: .copyId)}
    if self.copyProgress != nil {try container.encode(copyProgress, forKey: .copyProgress)}
    if self.copySource != nil {try container.encode(copySource, forKey: .copySource)}
    if self.copyStatus != nil {try container.encode(copyStatus, forKey: .copyStatus)}
    if self.isIncrementalCopy != nil {try container.encode(isIncrementalCopy, forKey: .isIncrementalCopy)}
    if self.leaseDuration != nil {try container.encode(leaseDuration, forKey: .leaseDuration)}
    if self.leaseState != nil {try container.encode(leaseState, forKey: .leaseState)}
    if self.leaseStatus != nil {try container.encode(leaseStatus, forKey: .leaseStatus)}
    if self.contentLength != nil {try container.encode(contentLength, forKey: .contentLength)}
    if self.contentType != nil {try container.encode(contentType, forKey: .contentType)}
    if self.eTag != nil {try container.encode(eTag, forKey: .eTag)}
    if self.contentMD5 != nil {try container.encode(contentMD5, forKey: .contentMD5)}
    if self.contentEncoding != nil {try container.encode(contentEncoding, forKey: .contentEncoding)}
    if self.contentDisposition != nil {try container.encode(contentDisposition, forKey: .contentDisposition)}
    if self.cacheControl != nil {try container.encode(cacheControl, forKey: .cacheControl)}
    if self.blobSequenceNumber != nil {try container.encode(blobSequenceNumber, forKey: .blobSequenceNumber)}
    if self.requestId != nil {try container.encode(requestId, forKey: .requestId)}
    if self.version != nil {try container.encode(version, forKey: .version)}
    if self.date != nil {try container.encode(date, forKey: .date)}
    if self.acceptRanges != nil {try container.encode(acceptRanges, forKey: .acceptRanges)}
    if self.blobCommittedBlockCount != nil {try container.encode(blobCommittedBlockCount, forKey: .blobCommittedBlockCount)}
    if self.isServerEncrypted != nil {try container.encode(isServerEncrypted, forKey: .isServerEncrypted)}
  }
}

extension DataFactory {
  public static func createBlobsGetPropertiesHeadersProtocol() -> BlobsGetPropertiesHeadersProtocol {
    return BlobsGetPropertiesHeadersData()
  }
}
