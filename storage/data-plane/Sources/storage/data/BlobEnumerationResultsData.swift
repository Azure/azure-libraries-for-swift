// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct BlobEnumerationResultsData : BlobEnumerationResultsProtocol {
    public var serviceEndpoint: String?
    public var containerName: String?
    public var prefix: String?
    public var marker: String?
    public var maxResults: Int32?
    public var delimiter: String?
    public var blobs: [BlobProtocol?]?
    public var nextMarker: String?

    enum CodingKeys: String, CodingKey {
        case serviceEndpoint = "ServiceEndpoint"
        case containerName = "ContainerName"
        case prefix = "Prefix"
        case marker = "Marker"
        case maxResults = "MaxResults"
        case delimiter = "Delimiter"
        case blobs = "Blobs"
        case nextMarker = "NextMarker"
    }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.serviceEndpoint) {
        serviceEndpoint = try container.decode(String.self, forKey: .serviceEndpoint)
    }
    if container.contains(.containerName) {
        containerName = try container.decode(String.self, forKey: .containerName)
    }
    if container.contains(.prefix) {
        prefix = try container.decode(String.self, forKey: .prefix)
    }
    if container.contains(.marker) {
        marker = try container.decode(String.self, forKey: .marker)
    }
    if container.contains(.maxResults) {
        maxResults = try container.decode(Int32.self, forKey: .maxResults)
    }
    if container.contains(.delimiter) {
        delimiter = try container.decode(String.self, forKey: .delimiter)
    }
    if container.contains(.blobs) {
        blobs = try container.decode([BlobData?]?.self, forKey: .blobs)
    }
    if container.contains(.nextMarker) {
        nextMarker = try container.decode(String.self, forKey: .nextMarker)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.serviceEndpoint != nil {try container.encode(serviceEndpoint, forKey: .serviceEndpoint)}
    if self.containerName != nil {try container.encode(containerName, forKey: .containerName)}
    if self.prefix != nil {try container.encode(prefix, forKey: .prefix)}
    if self.marker != nil {try container.encode(marker, forKey: .marker)}
    if self.maxResults != nil {try container.encode(maxResults, forKey: .maxResults)}
    if self.delimiter != nil {try container.encode(delimiter, forKey: .delimiter)}
    if self.blobs != nil {try container.encode(blobs as! [BlobData?]?, forKey: .blobs)}
    if self.nextMarker != nil {try container.encode(nextMarker, forKey: .nextMarker)}
  }
}

extension DataFactory {
  public static func createBlobEnumerationResultsProtocol() -> BlobEnumerationResultsProtocol {
    return BlobEnumerationResultsData()
  }
}
