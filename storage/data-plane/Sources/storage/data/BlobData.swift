// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct BlobData : BlobProtocol {
    public var name: String?
    public var snapshot: Date?
    public var properties: BlobPropertiesProtocol?
    public var metadata: [String:String]?

    enum CodingKeys: String, CodingKey {
        case name = "Name"
        case snapshot = "Snapshot"
        case properties = "Properties"
        case metadata = "Metadata"
    }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.name) {
        name = try container.decode(String.self, forKey: .name)
    }
    if container.contains(.snapshot) {
        snapshot = try container.decode(Date.self, forKey: .snapshot)
    }
    if container.contains(.properties) {
        properties = try container.decode(BlobPropertiesData?.self, forKey: .properties)
    }
    if container.contains(.metadata) {
        metadata = try container.decode([String:String]?.self, forKey: .metadata)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(name, forKey: .name)}
    if self.snapshot != nil {try container.encode(snapshot, forKey: .snapshot)}
    if self.properties != nil {try container.encode(properties as! BlobPropertiesData?, forKey: .properties)}
    if self.metadata != nil {try container.encode(metadata, forKey: .metadata)}
  }
}

extension DataFactory {
  public static func createBlobProtocol() -> BlobProtocol {
    return BlobData()
  }
}
