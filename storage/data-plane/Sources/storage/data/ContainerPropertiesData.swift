// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct ContainerPropertiesData : ContainerPropertiesProtocol {
    public var lastModified: Date?
    public var etag: String?
    public var leaseStatus: LeaseStatusType?
    public var leaseState: LeaseStateType?
    public var leaseDuration: LeaseDurationType?
    public var publicAccess: PublicAccessType?

    enum CodingKeys: String, CodingKey {
        case lastModified = "Last-Modified"
        case etag = "Etag"
        case leaseStatus = "LeaseStatus"
        case leaseState = "LeaseState"
        case leaseDuration = "LeaseDuration"
        case publicAccess = "PublicAccess"
    }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.lastModified) {
        lastModified = try container.decode(Date.self, forKey: .lastModified)
    }
    if container.contains(.etag) {
        etag = try container.decode(String.self, forKey: .etag)
    }
    if container.contains(.leaseStatus) {
        leaseStatus = try container.decode(LeaseStatusType?.self, forKey: .leaseStatus)
    }
    if container.contains(.leaseState) {
        leaseState = try container.decode(LeaseStateType?.self, forKey: .leaseState)
    }
    if container.contains(.leaseDuration) {
        leaseDuration = try container.decode(LeaseDurationType?.self, forKey: .leaseDuration)
    }
    if container.contains(.publicAccess) {
        publicAccess = try container.decode(PublicAccessType?.self, forKey: .publicAccess)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.lastModified != nil {try container.encode(lastModified, forKey: .lastModified)}
    if self.etag != nil {try container.encode(etag, forKey: .etag)}
    if self.leaseStatus != nil {try container.encode(leaseStatus, forKey: .leaseStatus)}
    if self.leaseState != nil {try container.encode(leaseState, forKey: .leaseState)}
    if self.leaseDuration != nil {try container.encode(leaseDuration, forKey: .leaseDuration)}
    if self.publicAccess != nil {try container.encode(publicAccess, forKey: .publicAccess)}
  }
}

extension DataFactory {
  public static func createContainerPropertiesProtocol() -> ContainerPropertiesProtocol {
    return ContainerPropertiesData()
  }
}
