// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct LoggingData : LoggingProtocol {
    public var version: String
    public var delete: Bool
    public var read: Bool
    public var write: Bool
    public var retentionPolicy: RetentionPolicyProtocol

    enum CodingKeys: String, CodingKey {
        case version = "Version"
        case delete = "Delete"
        case read = "Read"
        case write = "Write"
        case retentionPolicy = "RetentionPolicy"
    }

  public init(version: String, delete: Bool, read: Bool, write: Bool, retentionPolicy: RetentionPolicyProtocol)  {
    self.version = version
    self.delete = delete
    self.read = read
    self.write = write
    self.retentionPolicy = retentionPolicy
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    version = try container.decode(String.self, forKey: .version)
    delete = try container.decode(Bool.self, forKey: .delete)
    read = try container.decode(Bool.self, forKey: .read)
    write = try container.decode(Bool.self, forKey: .write)
    retentionPolicy = try container.decode(RetentionPolicyData.self, forKey: .retentionPolicy)
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(version, forKey: .version)
    try container.encode(delete, forKey: .delete)
    try container.encode(read, forKey: .read)
    try container.encode(write, forKey: .write)
    try container.encode(retentionPolicy as! RetentionPolicyData, forKey: .retentionPolicy)
  }
}

extension DataFactory {
  public static func createLoggingProtocol(version: String, delete: Bool, read: Bool, write: Bool, retentionPolicy: RetentionPolicyProtocol) -> LoggingProtocol {
    return LoggingData(version: version, delete: delete, read: read, write: write, retentionPolicy: retentionPolicy)
  }
}
