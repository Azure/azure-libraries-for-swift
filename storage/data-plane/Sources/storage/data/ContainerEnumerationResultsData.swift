// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
import Foundation
internal struct ContainerEnumerationResultsData : ContainerEnumerationResultsProtocol {
    public var serviceEndpoint: String?
    public var prefix: String?
    public var marker: String?
    public var maxResults: Int32?
    public var containers: [ContainerProtocol?]?
    public var nextMarker: String?

    enum CodingKeys: String, CodingKey {
        case serviceEndpoint = "ServiceEndpoint"
        case prefix = "Prefix"
        case marker = "Marker"
        case maxResults = "MaxResults"
        case containers = "Containers"
        case nextMarker = "NextMarker"
    }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if container.contains(.serviceEndpoint) {
        serviceEndpoint = try container.decode(String.self, forKey: .serviceEndpoint)
    }
    if container.contains(.prefix) {
        prefix = try container.decode(String.self, forKey: .prefix)
    }
    if container.contains(.marker) {
        marker = try container.decode(String.self, forKey: .marker)
    }
    if container.contains(.maxResults) {
        maxResults = try container.decode(Int32.self, forKey: .maxResults)
    }
    if container.contains(.containers) {
        containers = try container.decode([ContainerData?]?.self, forKey: .containers)
    }
    if container.contains(.nextMarker) {
        nextMarker = try container.decode(String.self, forKey: .nextMarker)
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.serviceEndpoint != nil {try container.encode(serviceEndpoint, forKey: .serviceEndpoint)}
    if self.prefix != nil {try container.encode(prefix, forKey: .prefix)}
    if self.marker != nil {try container.encode(marker, forKey: .marker)}
    if self.maxResults != nil {try container.encode(maxResults, forKey: .maxResults)}
    if self.containers != nil {try container.encode(containers as! [ContainerData?]?, forKey: .containers)}
    if self.nextMarker != nil {try container.encode(nextMarker, forKey: .nextMarker)}
  }
}

extension DataFactory {
  public static func createContainerEnumerationResultsProtocol() -> ContainerEnumerationResultsProtocol {
    return ContainerEnumerationResultsData()
  }
}
