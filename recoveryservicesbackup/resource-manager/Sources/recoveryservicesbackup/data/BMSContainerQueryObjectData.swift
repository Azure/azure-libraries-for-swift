// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BMSContainerQueryObjectData : BMSContainerQueryObjectProtocol {
    public var backupManagementType: BackupManagementTypeEnum
    public var containerType: ContainerTypeEnum?
    public var backupEngineName: String?
    public var fabricName: String?
    public var status: String?
    public var friendlyName: String?

        enum CodingKeys: String, CodingKey {case backupManagementType = "backupManagementType"
        case containerType = "containerType"
        case backupEngineName = "backupEngineName"
        case fabricName = "fabricName"
        case status = "status"
        case friendlyName = "friendlyName"
        }

  public init(backupManagementType: BackupManagementTypeEnum)  {
    self.backupManagementType = backupManagementType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.backupManagementType = try container.decode(BackupManagementTypeEnum.self, forKey: .backupManagementType)
    if container.contains(.containerType) {
        self.containerType = try container.decode(ContainerTypeEnum?.self, forKey: .containerType)
    }
    if container.contains(.backupEngineName) {
        self.backupEngineName = try container.decode(String?.self, forKey: .backupEngineName)
    }
    if container.contains(.fabricName) {
        self.fabricName = try container.decode(String?.self, forKey: .fabricName)
    }
    if container.contains(.status) {
        self.status = try container.decode(String?.self, forKey: .status)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.backupManagementType, forKey: .backupManagementType)
    if self.containerType != nil {try container.encode(self.containerType, forKey: .containerType)}
    if self.backupEngineName != nil {try container.encode(self.backupEngineName, forKey: .backupEngineName)}
    if self.fabricName != nil {try container.encode(self.fabricName, forKey: .fabricName)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
  }
}

extension DataFactory {
  public static func createBMSContainerQueryObjectProtocol(backupManagementType: BackupManagementTypeEnum) -> BMSContainerQueryObjectProtocol {
    return BMSContainerQueryObjectData(backupManagementType: backupManagementType)
  }
}
