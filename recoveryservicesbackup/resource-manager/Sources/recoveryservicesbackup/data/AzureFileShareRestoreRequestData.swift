// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureFileShareRestoreRequestData : AzureFileShareRestoreRequestProtocol, RestoreRequestProtocol {
    public var recoveryType: RecoveryTypeEnum?
    public var sourceResourceId: String?
    public var copyOptions: CopyOptionsEnum?
    public var restoreRequestType: RestoreRequestTypeEnum?
    public var restoreFileSpecs: [RestoreFileSpecsProtocol?]?
    public var targetDetails: TargetAFSRestoreInfoProtocol?

        enum CodingKeys: String, CodingKey {case recoveryType = "recoveryType"
        case sourceResourceId = "sourceResourceId"
        case copyOptions = "copyOptions"
        case restoreRequestType = "restoreRequestType"
        case restoreFileSpecs = "restoreFileSpecs"
        case targetDetails = "targetDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.recoveryType) {
        self.recoveryType = try container.decode(RecoveryTypeEnum?.self, forKey: .recoveryType)
    }
    if container.contains(.sourceResourceId) {
        self.sourceResourceId = try container.decode(String?.self, forKey: .sourceResourceId)
    }
    if container.contains(.copyOptions) {
        self.copyOptions = try container.decode(CopyOptionsEnum?.self, forKey: .copyOptions)
    }
    if container.contains(.restoreRequestType) {
        self.restoreRequestType = try container.decode(RestoreRequestTypeEnum?.self, forKey: .restoreRequestType)
    }
    if container.contains(.restoreFileSpecs) {
        self.restoreFileSpecs = try container.decode([RestoreFileSpecsData?]?.self, forKey: .restoreFileSpecs)
    }
    if container.contains(.targetDetails) {
        self.targetDetails = try container.decode(TargetAFSRestoreInfoData?.self, forKey: .targetDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.recoveryType != nil {try container.encode(self.recoveryType, forKey: .recoveryType)}
    if self.sourceResourceId != nil {try container.encode(self.sourceResourceId, forKey: .sourceResourceId)}
    if self.copyOptions != nil {try container.encode(self.copyOptions, forKey: .copyOptions)}
    if self.restoreRequestType != nil {try container.encode(self.restoreRequestType, forKey: .restoreRequestType)}
    if self.restoreFileSpecs != nil {try container.encode(self.restoreFileSpecs as! [RestoreFileSpecsData?]?, forKey: .restoreFileSpecs)}
    if self.targetDetails != nil {try container.encode(self.targetDetails as! TargetAFSRestoreInfoData?, forKey: .targetDetails)}
  }
}

extension DataFactory {
  public static func createAzureFileShareRestoreRequestProtocol() -> AzureFileShareRestoreRequestProtocol {
    return AzureFileShareRestoreRequestData()
  }
}
