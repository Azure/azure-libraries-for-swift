// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PreValidateEnableBackupResponseData : PreValidateEnableBackupResponseProtocol {
    public var status: ValidationStatusEnum?
    public var errorCode: String?
    public var errorMessage: String?
    public var recommendation: String?
    public var containerName: String?
    public var protectedItemName: String?

        enum CodingKeys: String, CodingKey {case status = "status"
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case recommendation = "recommendation"
        case containerName = "containerName"
        case protectedItemName = "protectedItemName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.status) {
        self.status = try container.decode(ValidationStatusEnum?.self, forKey: .status)
    }
    if container.contains(.errorCode) {
        self.errorCode = try container.decode(String?.self, forKey: .errorCode)
    }
    if container.contains(.errorMessage) {
        self.errorMessage = try container.decode(String?.self, forKey: .errorMessage)
    }
    if container.contains(.recommendation) {
        self.recommendation = try container.decode(String?.self, forKey: .recommendation)
    }
    if container.contains(.containerName) {
        self.containerName = try container.decode(String?.self, forKey: .containerName)
    }
    if container.contains(.protectedItemName) {
        self.protectedItemName = try container.decode(String?.self, forKey: .protectedItemName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.errorCode != nil {try container.encode(self.errorCode, forKey: .errorCode)}
    if self.errorMessage != nil {try container.encode(self.errorMessage, forKey: .errorMessage)}
    if self.recommendation != nil {try container.encode(self.recommendation, forKey: .recommendation)}
    if self.containerName != nil {try container.encode(self.containerName, forKey: .containerName)}
    if self.protectedItemName != nil {try container.encode(self.protectedItemName, forKey: .protectedItemName)}
  }
}

extension DataFactory {
  public static func createPreValidateEnableBackupResponseProtocol() -> PreValidateEnableBackupResponseProtocol {
    return PreValidateEnableBackupResponseData()
  }
}
