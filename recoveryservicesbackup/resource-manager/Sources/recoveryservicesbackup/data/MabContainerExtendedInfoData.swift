// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MabContainerExtendedInfoData : MabContainerExtendedInfoProtocol {
    public var lastRefreshedAt: Date?
    public var backupItemType: BackupItemTypeEnum?
    public var backupItems: [String]?
    public var policyName: String?
    public var lastBackupStatus: String?

        enum CodingKeys: String, CodingKey {case lastRefreshedAt = "lastRefreshedAt"
        case backupItemType = "backupItemType"
        case backupItems = "backupItems"
        case policyName = "policyName"
        case lastBackupStatus = "lastBackupStatus"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.lastRefreshedAt) {
        self.lastRefreshedAt = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastRefreshedAt)), format: .dateTime)
    }
    if container.contains(.backupItemType) {
        self.backupItemType = try container.decode(BackupItemTypeEnum?.self, forKey: .backupItemType)
    }
    if container.contains(.backupItems) {
        self.backupItems = try container.decode([String]?.self, forKey: .backupItems)
    }
    if container.contains(.policyName) {
        self.policyName = try container.decode(String?.self, forKey: .policyName)
    }
    if container.contains(.lastBackupStatus) {
        self.lastBackupStatus = try container.decode(String?.self, forKey: .lastBackupStatus)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.lastRefreshedAt != nil {
        try container.encode(DateConverter.toString(date: self.lastRefreshedAt!, format: .dateTime), forKey: .lastRefreshedAt)
    }
    if self.backupItemType != nil {try container.encode(self.backupItemType, forKey: .backupItemType)}
    if self.backupItems != nil {try container.encode(self.backupItems as! [String]?, forKey: .backupItems)}
    if self.policyName != nil {try container.encode(self.policyName, forKey: .policyName)}
    if self.lastBackupStatus != nil {try container.encode(self.lastBackupStatus, forKey: .lastBackupStatus)}
  }
}

extension DataFactory {
  public static func createMabContainerExtendedInfoProtocol() -> MabContainerExtendedInfoProtocol {
    return MabContainerExtendedInfoData()
  }
}
