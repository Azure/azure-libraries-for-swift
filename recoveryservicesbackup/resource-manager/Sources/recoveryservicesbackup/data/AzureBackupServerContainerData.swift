// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureBackupServerContainerData : AzureBackupServerContainerProtocol, ProtectionContainerProtocol {
    public var friendlyName: String?
    public var backupManagementType: BackupManagementTypeEnum?
    public var registrationStatus: String?
    public var healthStatus: String?
    public var canReRegister: Bool?
    public var containerId: String?
    public var protectedItemCount: Int64?
    public var dpmAgentVersion: String?
    public var dpmServers: [String]?
    public var upgradeAvailable: Bool?
    public var protectionStatus: String?
    public var extendedInfo: DPMContainerExtendedInfoProtocol?

        enum CodingKeys: String, CodingKey {case friendlyName = "friendlyName"
        case backupManagementType = "backupManagementType"
        case registrationStatus = "registrationStatus"
        case healthStatus = "healthStatus"
        case canReRegister = "canReRegister"
        case containerId = "containerId"
        case protectedItemCount = "protectedItemCount"
        case dpmAgentVersion = "dpmAgentVersion"
        case dpmServers = "dpmServers"
        case upgradeAvailable = "upgradeAvailable"
        case protectionStatus = "protectionStatus"
        case extendedInfo = "extendedInfo"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.backupManagementType) {
        self.backupManagementType = try container.decode(BackupManagementTypeEnum?.self, forKey: .backupManagementType)
    }
    if container.contains(.registrationStatus) {
        self.registrationStatus = try container.decode(String?.self, forKey: .registrationStatus)
    }
    if container.contains(.healthStatus) {
        self.healthStatus = try container.decode(String?.self, forKey: .healthStatus)
    }
    if container.contains(.canReRegister) {
        self.canReRegister = try container.decode(Bool?.self, forKey: .canReRegister)
    }
    if container.contains(.containerId) {
        self.containerId = try container.decode(String?.self, forKey: .containerId)
    }
    if container.contains(.protectedItemCount) {
        self.protectedItemCount = try container.decode(Int64?.self, forKey: .protectedItemCount)
    }
    if container.contains(.dpmAgentVersion) {
        self.dpmAgentVersion = try container.decode(String?.self, forKey: .dpmAgentVersion)
    }
    if container.contains(.dpmServers) {
        self.dpmServers = try container.decode([String]?.self, forKey: .dpmServers)
    }
    if container.contains(.upgradeAvailable) {
        self.upgradeAvailable = try container.decode(Bool?.self, forKey: .upgradeAvailable)
    }
    if container.contains(.protectionStatus) {
        self.protectionStatus = try container.decode(String?.self, forKey: .protectionStatus)
    }
    if container.contains(.extendedInfo) {
        self.extendedInfo = try container.decode(DPMContainerExtendedInfoData?.self, forKey: .extendedInfo)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.backupManagementType != nil {try container.encode(self.backupManagementType, forKey: .backupManagementType)}
    if self.registrationStatus != nil {try container.encode(self.registrationStatus, forKey: .registrationStatus)}
    if self.healthStatus != nil {try container.encode(self.healthStatus, forKey: .healthStatus)}
    if self.canReRegister != nil {try container.encode(self.canReRegister, forKey: .canReRegister)}
    if self.containerId != nil {try container.encode(self.containerId, forKey: .containerId)}
    if self.protectedItemCount != nil {try container.encode(self.protectedItemCount, forKey: .protectedItemCount)}
    if self.dpmAgentVersion != nil {try container.encode(self.dpmAgentVersion, forKey: .dpmAgentVersion)}
    if self.dpmServers != nil {try container.encode(self.dpmServers as! [String]?, forKey: .dpmServers)}
    if self.upgradeAvailable != nil {try container.encode(self.upgradeAvailable, forKey: .upgradeAvailable)}
    if self.protectionStatus != nil {try container.encode(self.protectionStatus, forKey: .protectionStatus)}
    if self.extendedInfo != nil {try container.encode(self.extendedInfo as! DPMContainerExtendedInfoData?, forKey: .extendedInfo)}
  }
}

extension DataFactory {
  public static func createAzureBackupServerContainerProtocol() -> AzureBackupServerContainerProtocol {
    return AzureBackupServerContainerData()
  }
}
