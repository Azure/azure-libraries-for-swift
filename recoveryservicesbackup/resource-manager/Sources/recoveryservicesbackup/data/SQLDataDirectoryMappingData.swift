// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SQLDataDirectoryMappingData : SQLDataDirectoryMappingProtocol {
    public var mappingType: SQLDataDirectoryTypeEnum?
    public var sourceLogicalName: String?
    public var sourcePath: String?
    public var targetPath: String?

        enum CodingKeys: String, CodingKey {case mappingType = "mappingType"
        case sourceLogicalName = "sourceLogicalName"
        case sourcePath = "sourcePath"
        case targetPath = "targetPath"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.mappingType) {
        self.mappingType = try container.decode(SQLDataDirectoryTypeEnum?.self, forKey: .mappingType)
    }
    if container.contains(.sourceLogicalName) {
        self.sourceLogicalName = try container.decode(String?.self, forKey: .sourceLogicalName)
    }
    if container.contains(.sourcePath) {
        self.sourcePath = try container.decode(String?.self, forKey: .sourcePath)
    }
    if container.contains(.targetPath) {
        self.targetPath = try container.decode(String?.self, forKey: .targetPath)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.mappingType != nil {try container.encode(self.mappingType, forKey: .mappingType)}
    if self.sourceLogicalName != nil {try container.encode(self.sourceLogicalName, forKey: .sourceLogicalName)}
    if self.sourcePath != nil {try container.encode(self.sourcePath, forKey: .sourcePath)}
    if self.targetPath != nil {try container.encode(self.targetPath, forKey: .targetPath)}
  }
}

extension DataFactory {
  public static func createSQLDataDirectoryMappingProtocol() -> SQLDataDirectoryMappingProtocol {
    return SQLDataDirectoryMappingData()
  }
}
