// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct WeeklyRetentionFormatData : WeeklyRetentionFormatProtocol {
    public var daysOfTheWeek: [DayOfWeekEnum?]?
    public var weeksOfTheMonth: [WeekOfMonthEnum?]?

        enum CodingKeys: String, CodingKey {case daysOfTheWeek = "daysOfTheWeek"
        case weeksOfTheMonth = "weeksOfTheMonth"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.daysOfTheWeek) {
        self.daysOfTheWeek = try container.decode([DayOfWeekEnum?]?.self, forKey: .daysOfTheWeek)
    }
    if container.contains(.weeksOfTheMonth) {
        self.weeksOfTheMonth = try container.decode([WeekOfMonthEnum?]?.self, forKey: .weeksOfTheMonth)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.daysOfTheWeek != nil {try container.encode(self.daysOfTheWeek as! [DayOfWeekEnum?]?, forKey: .daysOfTheWeek)}
    if self.weeksOfTheMonth != nil {try container.encode(self.weeksOfTheMonth as! [WeekOfMonthEnum?]?, forKey: .weeksOfTheMonth)}
  }
}

extension DataFactory {
  public static func createWeeklyRetentionFormatProtocol() -> WeeklyRetentionFormatProtocol {
    return WeeklyRetentionFormatData()
  }
}
