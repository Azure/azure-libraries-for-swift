// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureWorkloadBackupRequestData : AzureWorkloadBackupRequestProtocol, BackupRequestProtocol {
    public var backupType: BackupTypeEnum?
    public var enableCompression: Bool?
    public var recoveryPointExpiryTimeInUTC: Date?

        enum CodingKeys: String, CodingKey {case backupType = "backupType"
        case enableCompression = "enableCompression"
        case recoveryPointExpiryTimeInUTC = "recoveryPointExpiryTimeInUTC"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.backupType) {
        self.backupType = try container.decode(BackupTypeEnum?.self, forKey: .backupType)
    }
    if container.contains(.enableCompression) {
        self.enableCompression = try container.decode(Bool?.self, forKey: .enableCompression)
    }
    if container.contains(.recoveryPointExpiryTimeInUTC) {
        self.recoveryPointExpiryTimeInUTC = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .recoveryPointExpiryTimeInUTC)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.backupType != nil {try container.encode(self.backupType, forKey: .backupType)}
    if self.enableCompression != nil {try container.encode(self.enableCompression, forKey: .enableCompression)}
    if self.recoveryPointExpiryTimeInUTC != nil {
        try container.encode(DateConverter.toString(date: self.recoveryPointExpiryTimeInUTC!, format: .dateTime), forKey: .recoveryPointExpiryTimeInUTC)
    }
  }
}

extension DataFactory {
  public static func createAzureWorkloadBackupRequestProtocol() -> AzureWorkloadBackupRequestProtocol {
    return AzureWorkloadBackupRequestData()
  }
}
