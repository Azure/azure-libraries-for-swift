// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerIdentityInfoData : ContainerIdentityInfoProtocol {
    public var uniqueName: String?
    public var aadTenantId: String?
    public var servicePrincipalClientId: String?
    public var audience: String?

        enum CodingKeys: String, CodingKey {case uniqueName = "uniqueName"
        case aadTenantId = "aadTenantId"
        case servicePrincipalClientId = "servicePrincipalClientId"
        case audience = "audience"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.uniqueName) {
        self.uniqueName = try container.decode(String?.self, forKey: .uniqueName)
    }
    if container.contains(.aadTenantId) {
        self.aadTenantId = try container.decode(String?.self, forKey: .aadTenantId)
    }
    if container.contains(.servicePrincipalClientId) {
        self.servicePrincipalClientId = try container.decode(String?.self, forKey: .servicePrincipalClientId)
    }
    if container.contains(.audience) {
        self.audience = try container.decode(String?.self, forKey: .audience)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.uniqueName != nil {try container.encode(self.uniqueName, forKey: .uniqueName)}
    if self.aadTenantId != nil {try container.encode(self.aadTenantId, forKey: .aadTenantId)}
    if self.servicePrincipalClientId != nil {try container.encode(self.servicePrincipalClientId, forKey: .servicePrincipalClientId)}
    if self.audience != nil {try container.encode(self.audience, forKey: .audience)}
  }
}

extension DataFactory {
  public static func createContainerIdentityInfoProtocol() -> ContainerIdentityInfoProtocol {
    return ContainerIdentityInfoData()
  }
}
