// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DayData : DayProtocol {
    public var date: Int32?
    public var isLast: Bool?

        enum CodingKeys: String, CodingKey {case date = "date"
        case isLast = "isLast"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.date) {
        self.date = try container.decode(Int32?.self, forKey: .date)
    }
    if container.contains(.isLast) {
        self.isLast = try container.decode(Bool?.self, forKey: .isLast)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.date != nil {try container.encode(self.date, forKey: .date)}
    if self.isLast != nil {try container.encode(self.isLast, forKey: .isLast)}
  }
}

extension DataFactory {
  public static func createDayProtocol() -> DayProtocol {
    return DayData()
  }
}
