// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BMSRPQueryObjectData : BMSRPQueryObjectProtocol {
    public var startDate: Date?
    public var endDate: Date?
    public var restorePointQueryType: RestorePointQueryTypeEnum?
    public var extendedInfo: Bool?

        enum CodingKeys: String, CodingKey {case startDate = "startDate"
        case endDate = "endDate"
        case restorePointQueryType = "restorePointQueryType"
        case extendedInfo = "extendedInfo"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.startDate) {
        self.startDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startDate)), format: .dateTime)
    }
    if container.contains(.endDate) {
        self.endDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endDate)), format: .dateTime)
    }
    if container.contains(.restorePointQueryType) {
        self.restorePointQueryType = try container.decode(RestorePointQueryTypeEnum?.self, forKey: .restorePointQueryType)
    }
    if container.contains(.extendedInfo) {
        self.extendedInfo = try container.decode(Bool?.self, forKey: .extendedInfo)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.startDate != nil {
        try container.encode(DateConverter.toString(date: self.startDate!, format: .dateTime), forKey: .startDate)
    }
    if self.endDate != nil {
        try container.encode(DateConverter.toString(date: self.endDate!, format: .dateTime), forKey: .endDate)
    }
    if self.restorePointQueryType != nil {try container.encode(self.restorePointQueryType, forKey: .restorePointQueryType)}
    if self.extendedInfo != nil {try container.encode(self.extendedInfo, forKey: .extendedInfo)}
  }
}

extension DataFactory {
  public static func createBMSRPQueryObjectProtocol() -> BMSRPQueryObjectProtocol {
    return BMSRPQueryObjectData()
  }
}
