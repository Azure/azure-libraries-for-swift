// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ClientScriptForConnectData : ClientScriptForConnectProtocol {
    public var scriptContent: String?
    public var scriptExtension: String?
    public var osType: String?
    public var url: String?
    public var scriptNameSuffix: String?

        enum CodingKeys: String, CodingKey {case scriptContent = "scriptContent"
        case scriptExtension = "scriptExtension"
        case osType = "osType"
        case url = "url"
        case scriptNameSuffix = "scriptNameSuffix"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.scriptContent) {
        self.scriptContent = try container.decode(String?.self, forKey: .scriptContent)
    }
    if container.contains(.scriptExtension) {
        self.scriptExtension = try container.decode(String?.self, forKey: .scriptExtension)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.url) {
        self.url = try container.decode(String?.self, forKey: .url)
    }
    if container.contains(.scriptNameSuffix) {
        self.scriptNameSuffix = try container.decode(String?.self, forKey: .scriptNameSuffix)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.scriptContent != nil {try container.encode(self.scriptContent, forKey: .scriptContent)}
    if self.scriptExtension != nil {try container.encode(self.scriptExtension, forKey: .scriptExtension)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.url != nil {try container.encode(self.url, forKey: .url)}
    if self.scriptNameSuffix != nil {try container.encode(self.scriptNameSuffix, forKey: .scriptNameSuffix)}
  }
}

extension DataFactory {
  public static func createClientScriptForConnectProtocol() -> ClientScriptForConnectProtocol {
    return ClientScriptForConnectData()
  }
}
