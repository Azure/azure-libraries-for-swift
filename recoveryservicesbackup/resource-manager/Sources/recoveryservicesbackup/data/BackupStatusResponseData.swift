// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BackupStatusResponseData : BackupStatusResponseProtocol {
    public var protectionStatus: ProtectionStatusEnum?
    public var vaultId: String?
    public var fabricName: FabricNameEnum?
    public var containerName: String?
    public var protectedItemName: String?
    public var errorCode: String?
    public var errorMessage: String?
    public var policyName: String?
    public var registrationStatus: String?

        enum CodingKeys: String, CodingKey {case protectionStatus = "protectionStatus"
        case vaultId = "vaultId"
        case fabricName = "fabricName"
        case containerName = "containerName"
        case protectedItemName = "protectedItemName"
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case policyName = "policyName"
        case registrationStatus = "registrationStatus"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.protectionStatus) {
        self.protectionStatus = try container.decode(ProtectionStatusEnum?.self, forKey: .protectionStatus)
    }
    if container.contains(.vaultId) {
        self.vaultId = try container.decode(String?.self, forKey: .vaultId)
    }
    if container.contains(.fabricName) {
        self.fabricName = try container.decode(FabricNameEnum?.self, forKey: .fabricName)
    }
    if container.contains(.containerName) {
        self.containerName = try container.decode(String?.self, forKey: .containerName)
    }
    if container.contains(.protectedItemName) {
        self.protectedItemName = try container.decode(String?.self, forKey: .protectedItemName)
    }
    if container.contains(.errorCode) {
        self.errorCode = try container.decode(String?.self, forKey: .errorCode)
    }
    if container.contains(.errorMessage) {
        self.errorMessage = try container.decode(String?.self, forKey: .errorMessage)
    }
    if container.contains(.policyName) {
        self.policyName = try container.decode(String?.self, forKey: .policyName)
    }
    if container.contains(.registrationStatus) {
        self.registrationStatus = try container.decode(String?.self, forKey: .registrationStatus)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.protectionStatus != nil {try container.encode(self.protectionStatus, forKey: .protectionStatus)}
    if self.vaultId != nil {try container.encode(self.vaultId, forKey: .vaultId)}
    if self.fabricName != nil {try container.encode(self.fabricName, forKey: .fabricName)}
    if self.containerName != nil {try container.encode(self.containerName, forKey: .containerName)}
    if self.protectedItemName != nil {try container.encode(self.protectedItemName, forKey: .protectedItemName)}
    if self.errorCode != nil {try container.encode(self.errorCode, forKey: .errorCode)}
    if self.errorMessage != nil {try container.encode(self.errorMessage, forKey: .errorMessage)}
    if self.policyName != nil {try container.encode(self.policyName, forKey: .policyName)}
    if self.registrationStatus != nil {try container.encode(self.registrationStatus, forKey: .registrationStatus)}
  }
}

extension DataFactory {
  public static func createBackupStatusResponseProtocol() -> BackupStatusResponseProtocol {
    return BackupStatusResponseData()
  }
}
