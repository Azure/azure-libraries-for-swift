// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureVmWorkloadSQLDatabaseProtectedItemData : AzureVmWorkloadSQLDatabaseProtectedItemProtocol, ProtectedItemProtocol {
    public var backupManagementType: BackupManagementTypeEnum?
    public var workloadType: DataSourceTypeEnum?
    public var containerName: String?
    public var sourceResourceId: String?
    public var policyId: String?
    public var lastRecoveryPoint: Date?
    public var backupSetName: String?
    public var friendlyName: String?
    public var serverName: String?
    public var parentName: String?
    public var parentType: String?
    public var protectionStatus: String?
    public var protectionState: ProtectionStateEnum?
    public var lastBackupStatus: LastBackupStatusEnum?
    public var lastBackupTime: Date?
    public var lastBackupErrorDetail: ErrorDetailProtocol?
    public var protectedItemDataSourceId: String?
    public var protectedItemHealthStatus: ProtectedItemHealthStatusEnum?
    public var extendedInfo: AzureVmWorkloadProtectedItemExtendedInfoProtocol?

        enum CodingKeys: String, CodingKey {case backupManagementType = "backupManagementType"
        case workloadType = "workloadType"
        case containerName = "containerName"
        case sourceResourceId = "sourceResourceId"
        case policyId = "policyId"
        case lastRecoveryPoint = "lastRecoveryPoint"
        case backupSetName = "backupSetName"
        case friendlyName = "friendlyName"
        case serverName = "serverName"
        case parentName = "parentName"
        case parentType = "parentType"
        case protectionStatus = "protectionStatus"
        case protectionState = "protectionState"
        case lastBackupStatus = "lastBackupStatus"
        case lastBackupTime = "lastBackupTime"
        case lastBackupErrorDetail = "lastBackupErrorDetail"
        case protectedItemDataSourceId = "protectedItemDataSourceId"
        case protectedItemHealthStatus = "protectedItemHealthStatus"
        case extendedInfo = "extendedInfo"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.backupManagementType) {
        self.backupManagementType = try container.decode(BackupManagementTypeEnum?.self, forKey: .backupManagementType)
    }
    if container.contains(.workloadType) {
        self.workloadType = try container.decode(DataSourceTypeEnum?.self, forKey: .workloadType)
    }
    if container.contains(.containerName) {
        self.containerName = try container.decode(String?.self, forKey: .containerName)
    }
    if container.contains(.sourceResourceId) {
        self.sourceResourceId = try container.decode(String?.self, forKey: .sourceResourceId)
    }
    if container.contains(.policyId) {
        self.policyId = try container.decode(String?.self, forKey: .policyId)
    }
    if container.contains(.lastRecoveryPoint) {
        self.lastRecoveryPoint = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastRecoveryPoint)), format: .dateTime)
    }
    if container.contains(.backupSetName) {
        self.backupSetName = try container.decode(String?.self, forKey: .backupSetName)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.serverName) {
        self.serverName = try container.decode(String?.self, forKey: .serverName)
    }
    if container.contains(.parentName) {
        self.parentName = try container.decode(String?.self, forKey: .parentName)
    }
    if container.contains(.parentType) {
        self.parentType = try container.decode(String?.self, forKey: .parentType)
    }
    if container.contains(.protectionStatus) {
        self.protectionStatus = try container.decode(String?.self, forKey: .protectionStatus)
    }
    if container.contains(.protectionState) {
        self.protectionState = try container.decode(ProtectionStateEnum?.self, forKey: .protectionState)
    }
    if container.contains(.lastBackupStatus) {
        self.lastBackupStatus = try container.decode(LastBackupStatusEnum?.self, forKey: .lastBackupStatus)
    }
    if container.contains(.lastBackupTime) {
        self.lastBackupTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastBackupTime)), format: .dateTime)
    }
    if container.contains(.lastBackupErrorDetail) {
        self.lastBackupErrorDetail = try container.decode(ErrorDetailData?.self, forKey: .lastBackupErrorDetail)
    }
    if container.contains(.protectedItemDataSourceId) {
        self.protectedItemDataSourceId = try container.decode(String?.self, forKey: .protectedItemDataSourceId)
    }
    if container.contains(.protectedItemHealthStatus) {
        self.protectedItemHealthStatus = try container.decode(ProtectedItemHealthStatusEnum?.self, forKey: .protectedItemHealthStatus)
    }
    if container.contains(.extendedInfo) {
        self.extendedInfo = try container.decode(AzureVmWorkloadProtectedItemExtendedInfoData?.self, forKey: .extendedInfo)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.backupManagementType != nil {try container.encode(self.backupManagementType, forKey: .backupManagementType)}
    if self.workloadType != nil {try container.encode(self.workloadType, forKey: .workloadType)}
    if self.containerName != nil {try container.encode(self.containerName, forKey: .containerName)}
    if self.sourceResourceId != nil {try container.encode(self.sourceResourceId, forKey: .sourceResourceId)}
    if self.policyId != nil {try container.encode(self.policyId, forKey: .policyId)}
    if self.lastRecoveryPoint != nil {
        try container.encode(DateConverter.toString(date: self.lastRecoveryPoint!, format: .dateTime), forKey: .lastRecoveryPoint)
    }
    if self.backupSetName != nil {try container.encode(self.backupSetName, forKey: .backupSetName)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.serverName != nil {try container.encode(self.serverName, forKey: .serverName)}
    if self.parentName != nil {try container.encode(self.parentName, forKey: .parentName)}
    if self.parentType != nil {try container.encode(self.parentType, forKey: .parentType)}
    if self.protectionStatus != nil {try container.encode(self.protectionStatus, forKey: .protectionStatus)}
    if self.protectionState != nil {try container.encode(self.protectionState, forKey: .protectionState)}
    if self.lastBackupStatus != nil {try container.encode(self.lastBackupStatus, forKey: .lastBackupStatus)}
    if self.lastBackupTime != nil {
        try container.encode(DateConverter.toString(date: self.lastBackupTime!, format: .dateTime), forKey: .lastBackupTime)
    }
    if self.lastBackupErrorDetail != nil {try container.encode(self.lastBackupErrorDetail as! ErrorDetailData?, forKey: .lastBackupErrorDetail)}
    if self.protectedItemDataSourceId != nil {try container.encode(self.protectedItemDataSourceId, forKey: .protectedItemDataSourceId)}
    if self.protectedItemHealthStatus != nil {try container.encode(self.protectedItemHealthStatus, forKey: .protectedItemHealthStatus)}
    if self.extendedInfo != nil {try container.encode(self.extendedInfo as! AzureVmWorkloadProtectedItemExtendedInfoData?, forKey: .extendedInfo)}
  }
}

extension DataFactory {
  public static func createAzureVmWorkloadSQLDatabaseProtectedItemProtocol() -> AzureVmWorkloadSQLDatabaseProtectedItemProtocol {
    return AzureVmWorkloadSQLDatabaseProtectedItemData()
  }
}
