// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct KeyAndSecretDetailsData : KeyAndSecretDetailsProtocol {
    public var kekDetails: KEKDetailsProtocol?
    public var bekDetails: BEKDetailsProtocol?

        enum CodingKeys: String, CodingKey {case kekDetails = "kekDetails"
        case bekDetails = "bekDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.kekDetails) {
        self.kekDetails = try container.decode(KEKDetailsData?.self, forKey: .kekDetails)
    }
    if container.contains(.bekDetails) {
        self.bekDetails = try container.decode(BEKDetailsData?.self, forKey: .bekDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.kekDetails != nil {try container.encode(self.kekDetails as! KEKDetailsData?, forKey: .kekDetails)}
    if self.bekDetails != nil {try container.encode(self.bekDetails as! BEKDetailsData?, forKey: .bekDetails)}
  }
}

extension DataFactory {
  public static func createKeyAndSecretDetailsProtocol() -> KeyAndSecretDetailsProtocol {
    return KeyAndSecretDetailsData()
  }
}
