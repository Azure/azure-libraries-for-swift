// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureVmWorkloadProtectionPolicyData : AzureVmWorkloadProtectionPolicyProtocol, ProtectionPolicyProtocol {
    public var protectedItemsCount: Int32?
    public var workLoadType: String?
    public var settings: SettingsProtocol?
    public var subProtectionPolicy: [SubProtectionPolicyProtocol?]?

        enum CodingKeys: String, CodingKey {case protectedItemsCount = "protectedItemsCount"
        case workLoadType = "workLoadType"
        case settings = "settings"
        case subProtectionPolicy = "subProtectionPolicy"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.protectedItemsCount) {
        self.protectedItemsCount = try container.decode(Int32?.self, forKey: .protectedItemsCount)
    }
    if container.contains(.workLoadType) {
        self.workLoadType = try container.decode(String?.self, forKey: .workLoadType)
    }
    if container.contains(.settings) {
        self.settings = try container.decode(SettingsData?.self, forKey: .settings)
    }
    if container.contains(.subProtectionPolicy) {
        self.subProtectionPolicy = try container.decode([SubProtectionPolicyData?]?.self, forKey: .subProtectionPolicy)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.protectedItemsCount != nil {try container.encode(self.protectedItemsCount, forKey: .protectedItemsCount)}
    if self.workLoadType != nil {try container.encode(self.workLoadType, forKey: .workLoadType)}
    if self.settings != nil {try container.encode(self.settings as! SettingsData?, forKey: .settings)}
    if self.subProtectionPolicy != nil {try container.encode(self.subProtectionPolicy as! [SubProtectionPolicyData?]?, forKey: .subProtectionPolicy)}
  }
}

extension DataFactory {
  public static func createAzureVmWorkloadProtectionPolicyProtocol() -> AzureVmWorkloadProtectionPolicyProtocol {
    return AzureVmWorkloadProtectionPolicyData()
  }
}
