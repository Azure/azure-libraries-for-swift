// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TargetRestoreInfoData : TargetRestoreInfoProtocol {
    public var overwriteOption: OverwriteOptionsEnum?
    public var containerId: String?
    public var databaseName: String?

        enum CodingKeys: String, CodingKey {case overwriteOption = "overwriteOption"
        case containerId = "containerId"
        case databaseName = "databaseName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.overwriteOption) {
        self.overwriteOption = try container.decode(OverwriteOptionsEnum?.self, forKey: .overwriteOption)
    }
    if container.contains(.containerId) {
        self.containerId = try container.decode(String?.self, forKey: .containerId)
    }
    if container.contains(.databaseName) {
        self.databaseName = try container.decode(String?.self, forKey: .databaseName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.overwriteOption != nil {try container.encode(self.overwriteOption, forKey: .overwriteOption)}
    if self.containerId != nil {try container.encode(self.containerId, forKey: .containerId)}
    if self.databaseName != nil {try container.encode(self.databaseName, forKey: .databaseName)}
  }
}

extension DataFactory {
  public static func createTargetRestoreInfoProtocol() -> TargetRestoreInfoProtocol {
    return TargetRestoreInfoData()
  }
}
