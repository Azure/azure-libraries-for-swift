// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EncryptionDetailsData : EncryptionDetailsProtocol {
    public var encryptionEnabled: Bool?
    public var kekUrl: String?
    public var secretKeyUrl: String?
    public var kekVaultId: String?
    public var secretKeyVaultId: String?

        enum CodingKeys: String, CodingKey {case encryptionEnabled = "encryptionEnabled"
        case kekUrl = "kekUrl"
        case secretKeyUrl = "secretKeyUrl"
        case kekVaultId = "kekVaultId"
        case secretKeyVaultId = "secretKeyVaultId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.encryptionEnabled) {
        self.encryptionEnabled = try container.decode(Bool?.self, forKey: .encryptionEnabled)
    }
    if container.contains(.kekUrl) {
        self.kekUrl = try container.decode(String?.self, forKey: .kekUrl)
    }
    if container.contains(.secretKeyUrl) {
        self.secretKeyUrl = try container.decode(String?.self, forKey: .secretKeyUrl)
    }
    if container.contains(.kekVaultId) {
        self.kekVaultId = try container.decode(String?.self, forKey: .kekVaultId)
    }
    if container.contains(.secretKeyVaultId) {
        self.secretKeyVaultId = try container.decode(String?.self, forKey: .secretKeyVaultId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.encryptionEnabled != nil {try container.encode(self.encryptionEnabled, forKey: .encryptionEnabled)}
    if self.kekUrl != nil {try container.encode(self.kekUrl, forKey: .kekUrl)}
    if self.secretKeyUrl != nil {try container.encode(self.secretKeyUrl, forKey: .secretKeyUrl)}
    if self.kekVaultId != nil {try container.encode(self.kekVaultId, forKey: .kekVaultId)}
    if self.secretKeyVaultId != nil {try container.encode(self.secretKeyVaultId, forKey: .secretKeyVaultId)}
  }
}

extension DataFactory {
  public static func createEncryptionDetailsProtocol() -> EncryptionDetailsProtocol {
    return EncryptionDetailsData()
  }
}
