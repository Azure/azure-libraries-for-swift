// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureFileShareProtectableItemData : AzureFileShareProtectableItemProtocol, WorkloadProtectableItemProtocol {
    public var backupManagementType: String?
    public var workloadType: String?
    public var friendlyName: String?
    public var protectionState: ProtectionStatusEnum?
    public var parentContainerFabricId: String?
    public var parentContainerFriendlyName: String?
    public var azureFileShareType: AzureFileShareTypeEnum?

        enum CodingKeys: String, CodingKey {case backupManagementType = "backupManagementType"
        case workloadType = "workloadType"
        case friendlyName = "friendlyName"
        case protectionState = "protectionState"
        case parentContainerFabricId = "parentContainerFabricId"
        case parentContainerFriendlyName = "parentContainerFriendlyName"
        case azureFileShareType = "azureFileShareType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.backupManagementType) {
        self.backupManagementType = try container.decode(String?.self, forKey: .backupManagementType)
    }
    if container.contains(.workloadType) {
        self.workloadType = try container.decode(String?.self, forKey: .workloadType)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.protectionState) {
        self.protectionState = try container.decode(ProtectionStatusEnum?.self, forKey: .protectionState)
    }
    if container.contains(.parentContainerFabricId) {
        self.parentContainerFabricId = try container.decode(String?.self, forKey: .parentContainerFabricId)
    }
    if container.contains(.parentContainerFriendlyName) {
        self.parentContainerFriendlyName = try container.decode(String?.self, forKey: .parentContainerFriendlyName)
    }
    if container.contains(.azureFileShareType) {
        self.azureFileShareType = try container.decode(AzureFileShareTypeEnum?.self, forKey: .azureFileShareType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.backupManagementType != nil {try container.encode(self.backupManagementType, forKey: .backupManagementType)}
    if self.workloadType != nil {try container.encode(self.workloadType, forKey: .workloadType)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.protectionState != nil {try container.encode(self.protectionState, forKey: .protectionState)}
    if self.parentContainerFabricId != nil {try container.encode(self.parentContainerFabricId, forKey: .parentContainerFabricId)}
    if self.parentContainerFriendlyName != nil {try container.encode(self.parentContainerFriendlyName, forKey: .parentContainerFriendlyName)}
    if self.azureFileShareType != nil {try container.encode(self.azureFileShareType, forKey: .azureFileShareType)}
  }
}

extension DataFactory {
  public static func createAzureFileShareProtectableItemProtocol() -> AzureFileShareProtectableItemProtocol {
    return AzureFileShareProtectableItemData()
  }
}
