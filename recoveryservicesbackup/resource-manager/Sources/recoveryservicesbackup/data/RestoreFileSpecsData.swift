// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RestoreFileSpecsData : RestoreFileSpecsProtocol {
    public var path: String?
    public var fileSpecType: String?
    public var targetFolderPath: String?

        enum CodingKeys: String, CodingKey {case path = "path"
        case fileSpecType = "fileSpecType"
        case targetFolderPath = "targetFolderPath"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.path) {
        self.path = try container.decode(String?.self, forKey: .path)
    }
    if container.contains(.fileSpecType) {
        self.fileSpecType = try container.decode(String?.self, forKey: .fileSpecType)
    }
    if container.contains(.targetFolderPath) {
        self.targetFolderPath = try container.decode(String?.self, forKey: .targetFolderPath)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.path != nil {try container.encode(self.path, forKey: .path)}
    if self.fileSpecType != nil {try container.encode(self.fileSpecType, forKey: .fileSpecType)}
    if self.targetFolderPath != nil {try container.encode(self.targetFolderPath, forKey: .targetFolderPath)}
  }
}

extension DataFactory {
  public static func createRestoreFileSpecsProtocol() -> RestoreFileSpecsProtocol {
    return RestoreFileSpecsData()
  }
}
