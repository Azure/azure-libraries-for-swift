// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct GenericContainerExtendedInfoData : GenericContainerExtendedInfoProtocol {
    public var rawCertData: String?
    public var containerIdentityInfo: ContainerIdentityInfoProtocol?
    public var serviceEndpoints: [String:String]?

        enum CodingKeys: String, CodingKey {case rawCertData = "rawCertData"
        case containerIdentityInfo = "containerIdentityInfo"
        case serviceEndpoints = "serviceEndpoints"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.rawCertData) {
        self.rawCertData = try container.decode(String?.self, forKey: .rawCertData)
    }
    if container.contains(.containerIdentityInfo) {
        self.containerIdentityInfo = try container.decode(ContainerIdentityInfoData?.self, forKey: .containerIdentityInfo)
    }
    if container.contains(.serviceEndpoints) {
        self.serviceEndpoints = try container.decode([String:String]?.self, forKey: .serviceEndpoints)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.rawCertData != nil {try container.encode(self.rawCertData, forKey: .rawCertData)}
    if self.containerIdentityInfo != nil {try container.encode(self.containerIdentityInfo as! ContainerIdentityInfoData?, forKey: .containerIdentityInfo)}
    if self.serviceEndpoints != nil {try container.encode(self.serviceEndpoints, forKey: .serviceEndpoints)}
  }
}

extension DataFactory {
  public static func createGenericContainerExtendedInfoProtocol() -> GenericContainerExtendedInfoProtocol {
    return GenericContainerExtendedInfoData()
  }
}
