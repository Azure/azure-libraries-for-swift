// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BackupResourceVaultConfigData : BackupResourceVaultConfigProtocol {
    public var storageModelType: StorageTypeEnum?
    public var storageType: StorageTypeEnum?
    public var storageTypeState: StorageTypeStateEnum?
    public var enhancedSecurityState: EnhancedSecurityStateEnum?

        enum CodingKeys: String, CodingKey {case storageModelType = "storageModelType"
        case storageType = "storageType"
        case storageTypeState = "storageTypeState"
        case enhancedSecurityState = "enhancedSecurityState"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.storageModelType) {
        self.storageModelType = try container.decode(StorageTypeEnum?.self, forKey: .storageModelType)
    }
    if container.contains(.storageType) {
        self.storageType = try container.decode(StorageTypeEnum?.self, forKey: .storageType)
    }
    if container.contains(.storageTypeState) {
        self.storageTypeState = try container.decode(StorageTypeStateEnum?.self, forKey: .storageTypeState)
    }
    if container.contains(.enhancedSecurityState) {
        self.enhancedSecurityState = try container.decode(EnhancedSecurityStateEnum?.self, forKey: .enhancedSecurityState)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.storageModelType != nil {try container.encode(self.storageModelType, forKey: .storageModelType)}
    if self.storageType != nil {try container.encode(self.storageType, forKey: .storageType)}
    if self.storageTypeState != nil {try container.encode(self.storageTypeState, forKey: .storageTypeState)}
    if self.enhancedSecurityState != nil {try container.encode(self.enhancedSecurityState, forKey: .enhancedSecurityState)}
  }
}

extension DataFactory {
  public static func createBackupResourceVaultConfigProtocol() -> BackupResourceVaultConfigProtocol {
    return BackupResourceVaultConfigData()
  }
}
