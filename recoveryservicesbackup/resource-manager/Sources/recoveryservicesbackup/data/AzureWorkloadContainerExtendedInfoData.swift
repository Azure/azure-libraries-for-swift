// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureWorkloadContainerExtendedInfoData : AzureWorkloadContainerExtendedInfoProtocol {
    public var hostServerName: String?
    public var inquiryInfo: InquiryInfoProtocol?
    public var nodesList: [DistributedNodesInfoProtocol?]?

        enum CodingKeys: String, CodingKey {case hostServerName = "hostServerName"
        case inquiryInfo = "inquiryInfo"
        case nodesList = "nodesList"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.hostServerName) {
        self.hostServerName = try container.decode(String?.self, forKey: .hostServerName)
    }
    if container.contains(.inquiryInfo) {
        self.inquiryInfo = try container.decode(InquiryInfoData?.self, forKey: .inquiryInfo)
    }
    if container.contains(.nodesList) {
        self.nodesList = try container.decode([DistributedNodesInfoData?]?.self, forKey: .nodesList)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.hostServerName != nil {try container.encode(self.hostServerName, forKey: .hostServerName)}
    if self.inquiryInfo != nil {try container.encode(self.inquiryInfo as! InquiryInfoData?, forKey: .inquiryInfo)}
    if self.nodesList != nil {try container.encode(self.nodesList as! [DistributedNodesInfoData?]?, forKey: .nodesList)}
  }
}

extension DataFactory {
  public static func createAzureWorkloadContainerExtendedInfoProtocol() -> AzureWorkloadContainerExtendedInfoProtocol {
    return AzureWorkloadContainerExtendedInfoData()
  }
}
