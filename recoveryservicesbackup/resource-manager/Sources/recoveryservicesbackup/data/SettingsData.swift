// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SettingsData : SettingsProtocol {
    public var timeZone: String?
    public var issqlcompression: Bool?

        enum CodingKeys: String, CodingKey {case timeZone = "timeZone"
        case issqlcompression = "issqlcompression"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.timeZone) {
        self.timeZone = try container.decode(String?.self, forKey: .timeZone)
    }
    if container.contains(.issqlcompression) {
        self.issqlcompression = try container.decode(Bool?.self, forKey: .issqlcompression)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.timeZone != nil {try container.encode(self.timeZone, forKey: .timeZone)}
    if self.issqlcompression != nil {try container.encode(self.issqlcompression, forKey: .issqlcompression)}
  }
}

extension DataFactory {
  public static func createSettingsProtocol() -> SettingsProtocol {
    return SettingsData()
  }
}
