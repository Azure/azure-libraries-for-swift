// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct WorkloadInquiryDetailsData : WorkloadInquiryDetailsProtocol {
    public var type: String?
    public var itemCount: Int64?
    public var inquiryValidation: InquiryValidationProtocol?

        enum CodingKeys: String, CodingKey {case type = "type"
        case itemCount = "itemCount"
        case inquiryValidation = "inquiryValidation"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.type) {
        self.type = try container.decode(String?.self, forKey: .type)
    }
    if container.contains(.itemCount) {
        self.itemCount = try container.decode(Int64?.self, forKey: .itemCount)
    }
    if container.contains(.inquiryValidation) {
        self.inquiryValidation = try container.decode(InquiryValidationData?.self, forKey: .inquiryValidation)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.itemCount != nil {try container.encode(self.itemCount, forKey: .itemCount)}
    if self.inquiryValidation != nil {try container.encode(self.inquiryValidation as! InquiryValidationData?, forKey: .inquiryValidation)}
  }
}

extension DataFactory {
  public static func createWorkloadInquiryDetailsProtocol() -> WorkloadInquiryDetailsProtocol {
    return WorkloadInquiryDetailsData()
  }
}
