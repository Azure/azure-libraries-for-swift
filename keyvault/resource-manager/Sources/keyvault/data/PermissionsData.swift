// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PermissionsData : PermissionsProtocol {
    public var keys: [KeyPermissionsEnum?]?
    public var secrets: [SecretPermissionsEnum?]?
    public var certificates: [CertificatePermissionsEnum?]?
    public var storage: [StoragePermissionsEnum?]?

        enum CodingKeys: String, CodingKey {case keys = "keys"
        case secrets = "secrets"
        case certificates = "certificates"
        case storage = "storage"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.keys) {
        self.keys = try container.decode([KeyPermissionsEnum?]?.self, forKey: .keys)
    }
    if container.contains(.secrets) {
        self.secrets = try container.decode([SecretPermissionsEnum?]?.self, forKey: .secrets)
    }
    if container.contains(.certificates) {
        self.certificates = try container.decode([CertificatePermissionsEnum?]?.self, forKey: .certificates)
    }
    if container.contains(.storage) {
        self.storage = try container.decode([StoragePermissionsEnum?]?.self, forKey: .storage)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.keys != nil {try container.encode(self.keys as! [KeyPermissionsEnum?]?, forKey: .keys)}
    if self.secrets != nil {try container.encode(self.secrets as! [SecretPermissionsEnum?]?, forKey: .secrets)}
    if self.certificates != nil {try container.encode(self.certificates as! [CertificatePermissionsEnum?]?, forKey: .certificates)}
    if self.storage != nil {try container.encode(self.storage as! [StoragePermissionsEnum?]?, forKey: .storage)}
  }
}

extension DataFactory {
  public static func createPermissionsProtocol() -> PermissionsProtocol {
    return PermissionsData()
  }
}
