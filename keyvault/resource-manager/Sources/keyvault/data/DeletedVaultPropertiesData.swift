// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DeletedVaultPropertiesData : DeletedVaultPropertiesProtocol {
    public var vaultId: String?
    public var location: String?
    public var deletionDate: Date?
    public var scheduledPurgeDate: Date?
    public var tags: [String:String]?

        enum CodingKeys: String, CodingKey {case vaultId = "vaultId"
        case location = "location"
        case deletionDate = "deletionDate"
        case scheduledPurgeDate = "scheduledPurgeDate"
        case tags = "tags"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.vaultId) {
        self.vaultId = try container.decode(String?.self, forKey: .vaultId)
    }
    if container.contains(.location) {
        self.location = try container.decode(String?.self, forKey: .location)
    }
    if container.contains(.deletionDate) {
        self.deletionDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .deletionDate)), format: .dateTime)
    }
    if container.contains(.scheduledPurgeDate) {
        self.scheduledPurgeDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .scheduledPurgeDate)), format: .dateTime)
    }
    if container.contains(.tags) {
        self.tags = try container.decode([String:String]?.self, forKey: .tags)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.vaultId != nil {try container.encode(self.vaultId, forKey: .vaultId)}
    if self.location != nil {try container.encode(self.location, forKey: .location)}
    if self.deletionDate != nil {
        try container.encode(DateConverter.toString(date: self.deletionDate!, format: .dateTime), forKey: .deletionDate)
    }
    if self.scheduledPurgeDate != nil {
        try container.encode(DateConverter.toString(date: self.scheduledPurgeDate!, format: .dateTime), forKey: .scheduledPurgeDate)
    }
    if self.tags != nil {try container.encode(self.tags, forKey: .tags)}
  }
}

extension DataFactory {
  public static func createDeletedVaultPropertiesProtocol() -> DeletedVaultPropertiesProtocol {
    return DeletedVaultPropertiesData()
  }
}
