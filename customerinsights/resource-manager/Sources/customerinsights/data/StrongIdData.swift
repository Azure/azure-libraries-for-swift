// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct StrongIdData : StrongIdProtocol {
    public var keyPropertyNames: [String]
    public var strongIdName: String
    public var displayName: [String:String]?
    public var description: [String:String]?

        enum CodingKeys: String, CodingKey {case keyPropertyNames = "keyPropertyNames"
        case strongIdName = "strongIdName"
        case displayName = "displayName"
        case description = "description"
        }

  public init(keyPropertyNames: [String], strongIdName: String)  {
    self.keyPropertyNames = keyPropertyNames
    self.strongIdName = strongIdName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.keyPropertyNames = try container.decode([String].self, forKey: .keyPropertyNames)
    self.strongIdName = try container.decode(String.self, forKey: .strongIdName)
    if container.contains(.displayName) {
        self.displayName = try container.decode([String:String]?.self, forKey: .displayName)
    }
    if container.contains(.description) {
        self.description = try container.decode([String:String]?.self, forKey: .description)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.keyPropertyNames as! [String], forKey: .keyPropertyNames)
    try container.encode(self.strongIdName, forKey: .strongIdName)
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
  }
}

extension DataFactory {
  public static func createStrongIdProtocol(keyPropertyNames: [String], strongIdName: String) -> StrongIdProtocol {
    return StrongIdData(keyPropertyNames: keyPropertyNames, strongIdName: strongIdName)
  }
}
