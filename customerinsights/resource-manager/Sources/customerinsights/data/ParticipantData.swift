// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ParticipantData : ParticipantProtocol {
    public var profileTypeName: String
    public var participantPropertyReferences: [ParticipantPropertyReferenceProtocol]
    public var participantName: String
    public var displayName: [String:String]?
    public var description: [String:String]?
    public var role: String?

        enum CodingKeys: String, CodingKey {case profileTypeName = "profileTypeName"
        case participantPropertyReferences = "participantPropertyReferences"
        case participantName = "participantName"
        case displayName = "displayName"
        case description = "description"
        case role = "role"
        }

  public init(profileTypeName: String, participantPropertyReferences: [ParticipantPropertyReferenceProtocol], participantName: String)  {
    self.profileTypeName = profileTypeName
    self.participantPropertyReferences = participantPropertyReferences
    self.participantName = participantName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.profileTypeName = try container.decode(String.self, forKey: .profileTypeName)
    self.participantPropertyReferences = try container.decode([ParticipantPropertyReferenceData].self, forKey: .participantPropertyReferences)
    self.participantName = try container.decode(String.self, forKey: .participantName)
    if container.contains(.displayName) {
        self.displayName = try container.decode([String:String]?.self, forKey: .displayName)
    }
    if container.contains(.description) {
        self.description = try container.decode([String:String]?.self, forKey: .description)
    }
    if container.contains(.role) {
        self.role = try container.decode(String?.self, forKey: .role)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.profileTypeName, forKey: .profileTypeName)
    try container.encode(self.participantPropertyReferences as! [ParticipantPropertyReferenceData], forKey: .participantPropertyReferences)
    try container.encode(self.participantName, forKey: .participantName)
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.role != nil {try container.encode(self.role, forKey: .role)}
  }
}

extension DataFactory {
  public static func createParticipantProtocol(profileTypeName: String, participantPropertyReferences: [ParticipantPropertyReferenceProtocol], participantName: String) -> ParticipantProtocol {
    return ParticipantData(profileTypeName: profileTypeName, participantPropertyReferences: participantPropertyReferences, participantName: participantName)
  }
}
