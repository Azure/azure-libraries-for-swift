// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DataSourceData : DataSourceProtocol {
    public var name: String?
    public var dataSourceType: DataSourceTypeEnum?
    public var status: StatusEnum?
    public var id: Int32?
    public var dataSourceReferenceId: String?

        enum CodingKeys: String, CodingKey {case name = "name"
        case dataSourceType = "dataSourceType"
        case status = "status"
        case id = "id"
        case dataSourceReferenceId = "dataSourceReferenceId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.dataSourceType) {
        self.dataSourceType = try container.decode(DataSourceTypeEnum?.self, forKey: .dataSourceType)
    }
    if container.contains(.status) {
        self.status = try container.decode(StatusEnum?.self, forKey: .status)
    }
    if container.contains(.id) {
        self.id = try container.decode(Int32?.self, forKey: .id)
    }
    if container.contains(.dataSourceReferenceId) {
        self.dataSourceReferenceId = try container.decode(String?.self, forKey: .dataSourceReferenceId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.dataSourceType != nil {try container.encode(self.dataSourceType, forKey: .dataSourceType)}
    if self.status != nil {try container.encode(self.status, forKey: .status)}
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.dataSourceReferenceId != nil {try container.encode(self.dataSourceReferenceId, forKey: .dataSourceReferenceId)}
  }
}

extension DataFactory {
  public static func createDataSourceProtocol() -> DataSourceProtocol {
    return DataSourceData()
  }
}
