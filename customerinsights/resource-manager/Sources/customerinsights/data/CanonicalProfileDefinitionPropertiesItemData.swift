// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CanonicalProfileDefinitionPropertiesItemData : CanonicalProfileDefinitionPropertiesItemProtocol {
    public var profileName: String?
    public var profilePropertyName: String?
    public var rank: Int32?
    public var type: CanonicalPropertyValueTypeEnum?
    public var value: String?

        enum CodingKeys: String, CodingKey {case profileName = "profileName"
        case profilePropertyName = "profilePropertyName"
        case rank = "rank"
        case type = "type"
        case value = "value"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.profileName) {
        self.profileName = try container.decode(String?.self, forKey: .profileName)
    }
    if container.contains(.profilePropertyName) {
        self.profilePropertyName = try container.decode(String?.self, forKey: .profilePropertyName)
    }
    if container.contains(.rank) {
        self.rank = try container.decode(Int32?.self, forKey: .rank)
    }
    if container.contains(.type) {
        self.type = try container.decode(CanonicalPropertyValueTypeEnum?.self, forKey: .type)
    }
    if container.contains(.value) {
        self.value = try container.decode(String?.self, forKey: .value)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.profileName != nil {try container.encode(self.profileName, forKey: .profileName)}
    if self.profilePropertyName != nil {try container.encode(self.profilePropertyName, forKey: .profilePropertyName)}
    if self.rank != nil {try container.encode(self.rank, forKey: .rank)}
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.value != nil {try container.encode(self.value, forKey: .value)}
  }
}

extension DataFactory {
  public static func createCanonicalProfileDefinitionPropertiesItemProtocol() -> CanonicalProfileDefinitionPropertiesItemProtocol {
    return CanonicalProfileDefinitionPropertiesItemData()
  }
}
