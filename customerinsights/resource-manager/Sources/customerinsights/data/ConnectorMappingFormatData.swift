// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ConnectorMappingFormatData : ConnectorMappingFormatProtocol {
    public var formatType: String
    public var columnDelimiter: String?
    public var acceptLanguage: String?
    public var quoteCharacter: String?
    public var quoteEscapeCharacter: String?
    public var arraySeparator: String?

        enum CodingKeys: String, CodingKey {case formatType = "formatType"
        case columnDelimiter = "columnDelimiter"
        case acceptLanguage = "acceptLanguage"
        case quoteCharacter = "quoteCharacter"
        case quoteEscapeCharacter = "quoteEscapeCharacter"
        case arraySeparator = "arraySeparator"
        }

  public init(formatType: String)  {
    self.formatType = formatType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.formatType = try container.decode(String.self, forKey: .formatType)
    if container.contains(.columnDelimiter) {
        self.columnDelimiter = try container.decode(String?.self, forKey: .columnDelimiter)
    }
    if container.contains(.acceptLanguage) {
        self.acceptLanguage = try container.decode(String?.self, forKey: .acceptLanguage)
    }
    if container.contains(.quoteCharacter) {
        self.quoteCharacter = try container.decode(String?.self, forKey: .quoteCharacter)
    }
    if container.contains(.quoteEscapeCharacter) {
        self.quoteEscapeCharacter = try container.decode(String?.self, forKey: .quoteEscapeCharacter)
    }
    if container.contains(.arraySeparator) {
        self.arraySeparator = try container.decode(String?.self, forKey: .arraySeparator)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.formatType, forKey: .formatType)
    if self.columnDelimiter != nil {try container.encode(self.columnDelimiter, forKey: .columnDelimiter)}
    if self.acceptLanguage != nil {try container.encode(self.acceptLanguage, forKey: .acceptLanguage)}
    if self.quoteCharacter != nil {try container.encode(self.quoteCharacter, forKey: .quoteCharacter)}
    if self.quoteEscapeCharacter != nil {try container.encode(self.quoteEscapeCharacter, forKey: .quoteEscapeCharacter)}
    if self.arraySeparator != nil {try container.encode(self.arraySeparator, forKey: .arraySeparator)}
  }
}

extension DataFactory {
  public static func createConnectorMappingFormatProtocol(formatType: String) -> ConnectorMappingFormatProtocol {
    return ConnectorMappingFormatData(formatType: formatType)
  }
}
