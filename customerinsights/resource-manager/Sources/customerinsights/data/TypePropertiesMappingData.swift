// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TypePropertiesMappingData : TypePropertiesMappingProtocol {
    public var sourcePropertyName: String
    public var targetPropertyName: String
    public var linkType: LinkTypesEnum?

        enum CodingKeys: String, CodingKey {case sourcePropertyName = "sourcePropertyName"
        case targetPropertyName = "targetPropertyName"
        case linkType = "linkType"
        }

  public init(sourcePropertyName: String, targetPropertyName: String)  {
    self.sourcePropertyName = sourcePropertyName
    self.targetPropertyName = targetPropertyName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.sourcePropertyName = try container.decode(String.self, forKey: .sourcePropertyName)
    self.targetPropertyName = try container.decode(String.self, forKey: .targetPropertyName)
    if container.contains(.linkType) {
        self.linkType = try container.decode(LinkTypesEnum?.self, forKey: .linkType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.sourcePropertyName, forKey: .sourcePropertyName)
    try container.encode(self.targetPropertyName, forKey: .targetPropertyName)
    if self.linkType != nil {try container.encode(self.linkType, forKey: .linkType)}
  }
}

extension DataFactory {
  public static func createTypePropertiesMappingProtocol(sourcePropertyName: String, targetPropertyName: String) -> TypePropertiesMappingProtocol {
    return TypePropertiesMappingData(sourcePropertyName: sourcePropertyName, targetPropertyName: targetPropertyName)
  }
}
