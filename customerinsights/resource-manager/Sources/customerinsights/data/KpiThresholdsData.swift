// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct KpiThresholdsData : KpiThresholdsProtocol {
    public var lowerLimit: Decimal
    public var upperLimit: Decimal
    public var increasingKpi: Bool

        enum CodingKeys: String, CodingKey {case lowerLimit = "lowerLimit"
        case upperLimit = "upperLimit"
        case increasingKpi = "increasingKpi"
        }

  public init(lowerLimit: Decimal, upperLimit: Decimal, increasingKpi: Bool)  {
    self.lowerLimit = lowerLimit
    self.upperLimit = upperLimit
    self.increasingKpi = increasingKpi
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.lowerLimit = try container.decode(Decimal.self, forKey: .lowerLimit)
    self.upperLimit = try container.decode(Decimal.self, forKey: .upperLimit)
    self.increasingKpi = try container.decode(Bool.self, forKey: .increasingKpi)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.lowerLimit, forKey: .lowerLimit)
    try container.encode(self.upperLimit, forKey: .upperLimit)
    try container.encode(self.increasingKpi, forKey: .increasingKpi)
  }
}

extension DataFactory {
  public static func createKpiThresholdsProtocol(lowerLimit: Decimal, upperLimit: Decimal, increasingKpi: Bool) -> KpiThresholdsProtocol {
    return KpiThresholdsData(lowerLimit: lowerLimit, upperLimit: upperLimit, increasingKpi: increasingKpi)
  }
}
