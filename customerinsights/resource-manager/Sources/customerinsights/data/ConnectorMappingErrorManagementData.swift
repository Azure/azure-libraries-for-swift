// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ConnectorMappingErrorManagementData : ConnectorMappingErrorManagementProtocol {
    public var errorManagementType: ErrorManagementTypesEnum
    public var errorLimit: Int32?

        enum CodingKeys: String, CodingKey {case errorManagementType = "errorManagementType"
        case errorLimit = "errorLimit"
        }

  public init(errorManagementType: ErrorManagementTypesEnum)  {
    self.errorManagementType = errorManagementType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.errorManagementType = try container.decode(ErrorManagementTypesEnum.self, forKey: .errorManagementType)
    if container.contains(.errorLimit) {
        self.errorLimit = try container.decode(Int32?.self, forKey: .errorLimit)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.errorManagementType, forKey: .errorManagementType)
    if self.errorLimit != nil {try container.encode(self.errorLimit, forKey: .errorLimit)}
  }
}

extension DataFactory {
  public static func createConnectorMappingErrorManagementProtocol(errorManagementType: ErrorManagementTypesEnum) -> ConnectorMappingErrorManagementProtocol {
    return ConnectorMappingErrorManagementData(errorManagementType: errorManagementType)
  }
}
