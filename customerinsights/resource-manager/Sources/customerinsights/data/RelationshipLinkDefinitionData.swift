// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RelationshipLinkDefinitionData : RelationshipLinkDefinitionProtocol {
    public var displayName: [String:String]?
    public var description: [String:String]?
    public var interactionType: String
    public var linkName: String?
    public var mappings: [RelationshipLinkFieldMappingProtocol?]?
    public var profilePropertyReferences: [ParticipantProfilePropertyReferenceProtocol]
    public var provisioningState: ProvisioningStatesEnum?
    public var relatedProfilePropertyReferences: [ParticipantProfilePropertyReferenceProtocol]
    public var relationshipName: String
    public var relationshipGuidId: String?
    public var tenantId: String?

        enum CodingKeys: String, CodingKey {case displayName = "displayName"
        case description = "description"
        case interactionType = "interactionType"
        case linkName = "linkName"
        case mappings = "mappings"
        case profilePropertyReferences = "profilePropertyReferences"
        case provisioningState = "provisioningState"
        case relatedProfilePropertyReferences = "relatedProfilePropertyReferences"
        case relationshipName = "relationshipName"
        case relationshipGuidId = "relationshipGuidId"
        case tenantId = "tenantId"
        }

  public init(interactionType: String, profilePropertyReferences: [ParticipantProfilePropertyReferenceProtocol], relatedProfilePropertyReferences: [ParticipantProfilePropertyReferenceProtocol], relationshipName: String)  {
    self.interactionType = interactionType
    self.profilePropertyReferences = profilePropertyReferences
    self.relatedProfilePropertyReferences = relatedProfilePropertyReferences
    self.relationshipName = relationshipName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.displayName) {
        self.displayName = try container.decode([String:String]?.self, forKey: .displayName)
    }
    if container.contains(.description) {
        self.description = try container.decode([String:String]?.self, forKey: .description)
    }
    self.interactionType = try container.decode(String.self, forKey: .interactionType)
    if container.contains(.linkName) {
        self.linkName = try container.decode(String?.self, forKey: .linkName)
    }
    if container.contains(.mappings) {
        self.mappings = try container.decode([RelationshipLinkFieldMappingData?]?.self, forKey: .mappings)
    }
    self.profilePropertyReferences = try container.decode([ParticipantProfilePropertyReferenceData].self, forKey: .profilePropertyReferences)
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(ProvisioningStatesEnum?.self, forKey: .provisioningState)
    }
    self.relatedProfilePropertyReferences = try container.decode([ParticipantProfilePropertyReferenceData].self, forKey: .relatedProfilePropertyReferences)
    self.relationshipName = try container.decode(String.self, forKey: .relationshipName)
    if container.contains(.relationshipGuidId) {
        self.relationshipGuidId = try container.decode(String?.self, forKey: .relationshipGuidId)
    }
    if container.contains(.tenantId) {
        self.tenantId = try container.decode(String?.self, forKey: .tenantId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    try container.encode(self.interactionType, forKey: .interactionType)
    if self.linkName != nil {try container.encode(self.linkName, forKey: .linkName)}
    if self.mappings != nil {try container.encode(self.mappings as! [RelationshipLinkFieldMappingData?]?, forKey: .mappings)}
    try container.encode(self.profilePropertyReferences as! [ParticipantProfilePropertyReferenceData], forKey: .profilePropertyReferences)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    try container.encode(self.relatedProfilePropertyReferences as! [ParticipantProfilePropertyReferenceData], forKey: .relatedProfilePropertyReferences)
    try container.encode(self.relationshipName, forKey: .relationshipName)
    if self.relationshipGuidId != nil {try container.encode(self.relationshipGuidId, forKey: .relationshipGuidId)}
    if self.tenantId != nil {try container.encode(self.tenantId, forKey: .tenantId)}
  }
}

extension DataFactory {
  public static func createRelationshipLinkDefinitionProtocol(interactionType: String, profilePropertyReferences: [ParticipantProfilePropertyReferenceProtocol], relatedProfilePropertyReferences: [ParticipantProfilePropertyReferenceProtocol], relationshipName: String) -> RelationshipLinkDefinitionProtocol {
    return RelationshipLinkDefinitionData(interactionType: interactionType, profilePropertyReferences: profilePropertyReferences, relatedProfilePropertyReferences: relatedProfilePropertyReferences, relationshipName: relationshipName)
  }
}
