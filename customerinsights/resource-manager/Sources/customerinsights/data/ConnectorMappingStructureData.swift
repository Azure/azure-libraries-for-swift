// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ConnectorMappingStructureData : ConnectorMappingStructureProtocol {
    public var propertyName: String
    public var columnName: String
    public var customFormatSpecifier: String?
    public var isEncrypted: Bool?

        enum CodingKeys: String, CodingKey {case propertyName = "propertyName"
        case columnName = "columnName"
        case customFormatSpecifier = "customFormatSpecifier"
        case isEncrypted = "isEncrypted"
        }

  public init(propertyName: String, columnName: String)  {
    self.propertyName = propertyName
    self.columnName = columnName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.propertyName = try container.decode(String.self, forKey: .propertyName)
    self.columnName = try container.decode(String.self, forKey: .columnName)
    if container.contains(.customFormatSpecifier) {
        self.customFormatSpecifier = try container.decode(String?.self, forKey: .customFormatSpecifier)
    }
    if container.contains(.isEncrypted) {
        self.isEncrypted = try container.decode(Bool?.self, forKey: .isEncrypted)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.propertyName, forKey: .propertyName)
    try container.encode(self.columnName, forKey: .columnName)
    if self.customFormatSpecifier != nil {try container.encode(self.customFormatSpecifier, forKey: .customFormatSpecifier)}
    if self.isEncrypted != nil {try container.encode(self.isEncrypted, forKey: .isEncrypted)}
  }
}

extension DataFactory {
  public static func createConnectorMappingStructureProtocol(propertyName: String, columnName: String) -> ConnectorMappingStructureProtocol {
    return ConnectorMappingStructureData(propertyName: propertyName, columnName: columnName)
  }
}
