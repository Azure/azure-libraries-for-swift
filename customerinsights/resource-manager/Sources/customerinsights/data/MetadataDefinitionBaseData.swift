// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MetadataDefinitionBaseData : MetadataDefinitionBaseProtocol {
    public var attributes: [String:[String]?]?
    public var description: [String:String]?
    public var displayName: [String:String]?
    public var localizedAttributes: [String:[String:String]?]?
    public var smallImage: String?
    public var mediumImage: String?
    public var largeImage: String?

        enum CodingKeys: String, CodingKey {case attributes = "attributes"
        case description = "description"
        case displayName = "displayName"
        case localizedAttributes = "localizedAttributes"
        case smallImage = "smallImage"
        case mediumImage = "mediumImage"
        case largeImage = "largeImage"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.attributes) {
        self.attributes = try container.decode([String:[String]?]?.self, forKey: .attributes)
    }
    if container.contains(.description) {
        self.description = try container.decode([String:String]?.self, forKey: .description)
    }
    if container.contains(.displayName) {
        self.displayName = try container.decode([String:String]?.self, forKey: .displayName)
    }
    if container.contains(.localizedAttributes) {
        self.localizedAttributes = try container.decode([String:[String:String]?]?.self, forKey: .localizedAttributes)
    }
    if container.contains(.smallImage) {
        self.smallImage = try container.decode(String?.self, forKey: .smallImage)
    }
    if container.contains(.mediumImage) {
        self.mediumImage = try container.decode(String?.self, forKey: .mediumImage)
    }
    if container.contains(.largeImage) {
        self.largeImage = try container.decode(String?.self, forKey: .largeImage)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.attributes != nil {try container.encode(self.attributes, forKey: .attributes)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.localizedAttributes != nil {try container.encode(self.localizedAttributes, forKey: .localizedAttributes)}
    if self.smallImage != nil {try container.encode(self.smallImage, forKey: .smallImage)}
    if self.mediumImage != nil {try container.encode(self.mediumImage, forKey: .mediumImage)}
    if self.largeImage != nil {try container.encode(self.largeImage, forKey: .largeImage)}
  }
}

extension DataFactory {
  public static func createMetadataDefinitionBaseProtocol() -> MetadataDefinitionBaseProtocol {
    return MetadataDefinitionBaseData()
  }
}
