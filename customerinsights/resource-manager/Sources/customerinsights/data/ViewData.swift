// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ViewData : ViewProtocol {
    public var viewName: String?
    public var userId: String?
    public var tenantId: String?
    public var displayName: [String:String]?
    public var definition: String
    public var changed: Date?
    public var created: Date?

        enum CodingKeys: String, CodingKey {case viewName = "viewName"
        case userId = "userId"
        case tenantId = "tenantId"
        case displayName = "displayName"
        case definition = "definition"
        case changed = "changed"
        case created = "created"
        }

  public init(definition: String)  {
    self.definition = definition
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.viewName) {
        self.viewName = try container.decode(String?.self, forKey: .viewName)
    }
    if container.contains(.userId) {
        self.userId = try container.decode(String?.self, forKey: .userId)
    }
    if container.contains(.tenantId) {
        self.tenantId = try container.decode(String?.self, forKey: .tenantId)
    }
    if container.contains(.displayName) {
        self.displayName = try container.decode([String:String]?.self, forKey: .displayName)
    }
    self.definition = try container.decode(String.self, forKey: .definition)
    if container.contains(.changed) {
        self.changed = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .changed)), format: .dateTime)
    }
    if container.contains(.created) {
        self.created = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .created)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.viewName != nil {try container.encode(self.viewName, forKey: .viewName)}
    if self.userId != nil {try container.encode(self.userId, forKey: .userId)}
    if self.tenantId != nil {try container.encode(self.tenantId, forKey: .tenantId)}
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    try container.encode(self.definition, forKey: .definition)
    if self.changed != nil {
        try container.encode(DateConverter.toString(date: self.changed!, format: .dateTime), forKey: .changed)
    }
    if self.created != nil {
        try container.encode(DateConverter.toString(date: self.created!, format: .dateTime), forKey: .created)
    }
  }
}

extension DataFactory {
  public static func createViewProtocol(definition: String) -> ViewProtocol {
    return ViewData(definition: definition)
  }
}
