// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ImageDefinitionData : ImageDefinitionProtocol {
    public var imageExists: Bool?
    public var contentUrl: String?
    public var relativePath: String?

        enum CodingKeys: String, CodingKey {case imageExists = "imageExists"
        case contentUrl = "contentUrl"
        case relativePath = "relativePath"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.imageExists) {
        self.imageExists = try container.decode(Bool?.self, forKey: .imageExists)
    }
    if container.contains(.contentUrl) {
        self.contentUrl = try container.decode(String?.self, forKey: .contentUrl)
    }
    if container.contains(.relativePath) {
        self.relativePath = try container.decode(String?.self, forKey: .relativePath)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.imageExists != nil {try container.encode(self.imageExists, forKey: .imageExists)}
    if self.contentUrl != nil {try container.encode(self.contentUrl, forKey: .contentUrl)}
    if self.relativePath != nil {try container.encode(self.relativePath, forKey: .relativePath)}
  }
}

extension DataFactory {
  public static func createImageDefinitionProtocol() -> ImageDefinitionProtocol {
    return ImageDefinitionData()
  }
}
