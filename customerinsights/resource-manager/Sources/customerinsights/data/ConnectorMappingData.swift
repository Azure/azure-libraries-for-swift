// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ConnectorMappingData : ConnectorMappingProtocol {
    public var connectorName: String?
    public var connectorType: ConnectorTypesEnum?
    public var created: Date?
    public var lastModified: Date?
    public var entityType: EntityTypesEnum
    public var entityTypeName: String
    public var connectorMappingName: String?
    public var displayName: String?
    public var description: String?
    public var dataFormatId: String?
    public var mappingProperties: ConnectorMappingPropertiesProtocol
    public var nextRunTime: Date?
    public var runId: String?
    public var state: ConnectorMappingStatesEnum?
    public var tenantId: String?

        enum CodingKeys: String, CodingKey {case connectorName = "connectorName"
        case connectorType = "connectorType"
        case created = "created"
        case lastModified = "lastModified"
        case entityType = "entityType"
        case entityTypeName = "entityTypeName"
        case connectorMappingName = "connectorMappingName"
        case displayName = "displayName"
        case description = "description"
        case dataFormatId = "dataFormatId"
        case mappingProperties = "mappingProperties"
        case nextRunTime = "nextRunTime"
        case runId = "runId"
        case state = "state"
        case tenantId = "tenantId"
        }

  public init(entityType: EntityTypesEnum, entityTypeName: String, mappingProperties: ConnectorMappingPropertiesProtocol)  {
    self.entityType = entityType
    self.entityTypeName = entityTypeName
    self.mappingProperties = mappingProperties
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.connectorName) {
        self.connectorName = try container.decode(String?.self, forKey: .connectorName)
    }
    if container.contains(.connectorType) {
        self.connectorType = try container.decode(ConnectorTypesEnum?.self, forKey: .connectorType)
    }
    if container.contains(.created) {
        self.created = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .created)), format: .dateTime)
    }
    if container.contains(.lastModified) {
        self.lastModified = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastModified)), format: .dateTime)
    }
    self.entityType = try container.decode(EntityTypesEnum.self, forKey: .entityType)
    self.entityTypeName = try container.decode(String.self, forKey: .entityTypeName)
    if container.contains(.connectorMappingName) {
        self.connectorMappingName = try container.decode(String?.self, forKey: .connectorMappingName)
    }
    if container.contains(.displayName) {
        self.displayName = try container.decode(String?.self, forKey: .displayName)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.dataFormatId) {
        self.dataFormatId = try container.decode(String?.self, forKey: .dataFormatId)
    }
    self.mappingProperties = try container.decode(ConnectorMappingPropertiesData.self, forKey: .mappingProperties)
    if container.contains(.nextRunTime) {
        self.nextRunTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .nextRunTime)), format: .dateTime)
    }
    if container.contains(.runId) {
        self.runId = try container.decode(String?.self, forKey: .runId)
    }
    if container.contains(.state) {
        self.state = try container.decode(ConnectorMappingStatesEnum?.self, forKey: .state)
    }
    if container.contains(.tenantId) {
        self.tenantId = try container.decode(String?.self, forKey: .tenantId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.connectorName != nil {try container.encode(self.connectorName, forKey: .connectorName)}
    if self.connectorType != nil {try container.encode(self.connectorType, forKey: .connectorType)}
    if self.created != nil {
        try container.encode(DateConverter.toString(date: self.created!, format: .dateTime), forKey: .created)
    }
    if self.lastModified != nil {
        try container.encode(DateConverter.toString(date: self.lastModified!, format: .dateTime), forKey: .lastModified)
    }
    try container.encode(self.entityType, forKey: .entityType)
    try container.encode(self.entityTypeName, forKey: .entityTypeName)
    if self.connectorMappingName != nil {try container.encode(self.connectorMappingName, forKey: .connectorMappingName)}
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.dataFormatId != nil {try container.encode(self.dataFormatId, forKey: .dataFormatId)}
    try container.encode(self.mappingProperties as! ConnectorMappingPropertiesData, forKey: .mappingProperties)
    if self.nextRunTime != nil {
        try container.encode(DateConverter.toString(date: self.nextRunTime!, format: .dateTime), forKey: .nextRunTime)
    }
    if self.runId != nil {try container.encode(self.runId, forKey: .runId)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.tenantId != nil {try container.encode(self.tenantId, forKey: .tenantId)}
  }
}

extension DataFactory {
  public static func createConnectorMappingProtocol(entityType: EntityTypesEnum, entityTypeName: String, mappingProperties: ConnectorMappingPropertiesProtocol) -> ConnectorMappingProtocol {
    return ConnectorMappingData(entityType: entityType, entityTypeName: entityTypeName, mappingProperties: mappingProperties)
  }
}
