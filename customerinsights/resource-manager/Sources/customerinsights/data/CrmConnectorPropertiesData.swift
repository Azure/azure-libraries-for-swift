// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CrmConnectorPropertiesData : CrmConnectorPropertiesProtocol {
    public var connectionString: String?
    public var organizationId: String
    public var organizationUrl: String
    public var entities: [CrmConnectorEntitiesProtocol]
    public var accessToken: String?

        enum CodingKeys: String, CodingKey {case connectionString = "connectionString"
        case organizationId = "organizationId"
        case organizationUrl = "organizationUrl"
        case entities = "entities"
        case accessToken = "accessToken"
        }

  public init(organizationId: String, organizationUrl: String, entities: [CrmConnectorEntitiesProtocol])  {
    self.organizationId = organizationId
    self.organizationUrl = organizationUrl
    self.entities = entities
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.connectionString) {
        self.connectionString = try container.decode(String?.self, forKey: .connectionString)
    }
    self.organizationId = try container.decode(String.self, forKey: .organizationId)
    self.organizationUrl = try container.decode(String.self, forKey: .organizationUrl)
    self.entities = try container.decode([CrmConnectorEntitiesData].self, forKey: .entities)
    if container.contains(.accessToken) {
        self.accessToken = try container.decode(String?.self, forKey: .accessToken)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.connectionString != nil {try container.encode(self.connectionString, forKey: .connectionString)}
    try container.encode(self.organizationId, forKey: .organizationId)
    try container.encode(self.organizationUrl, forKey: .organizationUrl)
    try container.encode(self.entities as! [CrmConnectorEntitiesData], forKey: .entities)
    if self.accessToken != nil {try container.encode(self.accessToken, forKey: .accessToken)}
  }
}

extension DataFactory {
  public static func createCrmConnectorPropertiesProtocol(organizationId: String, organizationUrl: String, entities: [CrmConnectorEntitiesProtocol]) -> CrmConnectorPropertiesProtocol {
    return CrmConnectorPropertiesData(organizationId: organizationId, organizationUrl: organizationUrl, entities: entities)
  }
}
