// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct WidgetTypeData : WidgetTypeProtocol {
    public var widgetTypeName: String?
    public var definition: String
    public var description: String?
    public var displayName: [String:String]?
    public var imageUrl: String?
    public var tenantId: String?
    public var widgetVersion: String?
    public var changed: Date?
    public var created: Date?

        enum CodingKeys: String, CodingKey {case widgetTypeName = "widgetTypeName"
        case definition = "definition"
        case description = "description"
        case displayName = "displayName"
        case imageUrl = "imageUrl"
        case tenantId = "tenantId"
        case widgetVersion = "widgetVersion"
        case changed = "changed"
        case created = "created"
        }

  public init(definition: String)  {
    self.definition = definition
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.widgetTypeName) {
        self.widgetTypeName = try container.decode(String?.self, forKey: .widgetTypeName)
    }
    self.definition = try container.decode(String.self, forKey: .definition)
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.displayName) {
        self.displayName = try container.decode([String:String]?.self, forKey: .displayName)
    }
    if container.contains(.imageUrl) {
        self.imageUrl = try container.decode(String?.self, forKey: .imageUrl)
    }
    if container.contains(.tenantId) {
        self.tenantId = try container.decode(String?.self, forKey: .tenantId)
    }
    if container.contains(.widgetVersion) {
        self.widgetVersion = try container.decode(String?.self, forKey: .widgetVersion)
    }
    if container.contains(.changed) {
        self.changed = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .changed)), format: .dateTime)
    }
    if container.contains(.created) {
        self.created = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .created)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.widgetTypeName != nil {try container.encode(self.widgetTypeName, forKey: .widgetTypeName)}
    try container.encode(self.definition, forKey: .definition)
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.imageUrl != nil {try container.encode(self.imageUrl, forKey: .imageUrl)}
    if self.tenantId != nil {try container.encode(self.tenantId, forKey: .tenantId)}
    if self.widgetVersion != nil {try container.encode(self.widgetVersion, forKey: .widgetVersion)}
    if self.changed != nil {
        try container.encode(DateConverter.toString(date: self.changed!, format: .dateTime), forKey: .changed)
    }
    if self.created != nil {
        try container.encode(DateConverter.toString(date: self.created!, format: .dateTime), forKey: .created)
    }
  }
}

extension DataFactory {
  public static func createWidgetTypeProtocol(definition: String) -> WidgetTypeProtocol {
    return WidgetTypeData(definition: definition)
  }
}
