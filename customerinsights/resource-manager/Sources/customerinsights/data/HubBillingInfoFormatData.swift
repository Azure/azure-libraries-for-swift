// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct HubBillingInfoFormatData : HubBillingInfoFormatProtocol {
    public var skuName: String?
    public var minUnits: Int32?
    public var maxUnits: Int32?

        enum CodingKeys: String, CodingKey {case skuName = "skuName"
        case minUnits = "minUnits"
        case maxUnits = "maxUnits"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.skuName) {
        self.skuName = try container.decode(String?.self, forKey: .skuName)
    }
    if container.contains(.minUnits) {
        self.minUnits = try container.decode(Int32?.self, forKey: .minUnits)
    }
    if container.contains(.maxUnits) {
        self.maxUnits = try container.decode(Int32?.self, forKey: .maxUnits)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.skuName != nil {try container.encode(self.skuName, forKey: .skuName)}
    if self.minUnits != nil {try container.encode(self.minUnits, forKey: .minUnits)}
    if self.maxUnits != nil {try container.encode(self.maxUnits, forKey: .maxUnits)}
  }
}

extension DataFactory {
  public static func createHubBillingInfoFormatProtocol() -> HubBillingInfoFormatProtocol {
    return HubBillingInfoFormatData()
  }
}
