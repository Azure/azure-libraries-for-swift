// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CrmConnectorEntitiesData : CrmConnectorEntitiesProtocol {
    public var logicalName: String
    public var displayName: String?
    public var isProfile: Bool?

        enum CodingKeys: String, CodingKey {case logicalName = "logicalName"
        case displayName = "displayName"
        case isProfile = "isProfile"
        }

  public init(logicalName: String)  {
    self.logicalName = logicalName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.logicalName = try container.decode(String.self, forKey: .logicalName)
    if container.contains(.displayName) {
        self.displayName = try container.decode(String?.self, forKey: .displayName)
    }
    if container.contains(.isProfile) {
        self.isProfile = try container.decode(Bool?.self, forKey: .isProfile)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.logicalName, forKey: .logicalName)
    if self.displayName != nil {try container.encode(self.displayName, forKey: .displayName)}
    if self.isProfile != nil {try container.encode(self.isProfile, forKey: .isProfile)}
  }
}

extension DataFactory {
  public static func createCrmConnectorEntitiesProtocol(logicalName: String) -> CrmConnectorEntitiesProtocol {
    return CrmConnectorEntitiesData(logicalName: logicalName)
  }
}
