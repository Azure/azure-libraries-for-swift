// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// VirtualMachines is the compute Client
import Foundation
import azureSwiftRuntime
extension Commands {
public struct VirtualMachines {
    public static func Capture(resourceGroupName: String, vmName: String, subscriptionId: String, parameters: VirtualMachineCaptureParametersProtocol) -> VirtualMachinesCapture {
        return CaptureCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func ConvertToManagedDisks(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesConvertToManagedDisks {
        return ConvertToManagedDisksCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func CreateOrUpdate(resourceGroupName: String, vmName: String, subscriptionId: String, parameters: VirtualMachineProtocol) -> VirtualMachinesCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func Deallocate(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesDeallocate {
        return DeallocateCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func Delete(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func Generalize(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesGeneralize {
        return GeneralizeCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesGet {
        return GetCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func InstanceView(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesInstanceView {
        return InstanceViewCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func List(resourceGroupName: String, subscriptionId: String) -> VirtualMachinesList {
        return ListCommand(resourceGroupName: resourceGroupName, subscriptionId: subscriptionId)
    }
    public static func ListAll(subscriptionId: String) -> VirtualMachinesListAll {
        return ListAllCommand(subscriptionId: subscriptionId)
    }
    public static func ListAvailableSizes(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesListAvailableSizes {
        return ListAvailableSizesCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func PerformMaintenance(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesPerformMaintenance {
        return PerformMaintenanceCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func PowerOff(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesPowerOff {
        return PowerOffCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func Redeploy(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesRedeploy {
        return RedeployCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func Restart(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesRestart {
        return RestartCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
    public static func RunCommand(resourceGroupName: String, vmName: String, subscriptionId: String, parameters: RunCommandInputProtocol) -> VirtualMachinesRunCommand {
        return RunCommandCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func Start(resourceGroupName: String, vmName: String, subscriptionId: String) -> VirtualMachinesStart {
        return StartCommand(resourceGroupName: resourceGroupName, vmName: vmName, subscriptionId: subscriptionId)
    }
}
}
