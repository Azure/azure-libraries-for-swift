// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineExtensionInstanceViewData : VirtualMachineExtensionInstanceViewProtocol {
    public var name: String?
    public var type: String?
    public var typeHandlerVersion: String?
    public var substatuses: [InstanceViewStatusProtocol?]?
    public var statuses: [InstanceViewStatusProtocol?]?

        enum CodingKeys: String, CodingKey {case name = "name"
        case type = "type"
        case typeHandlerVersion = "typeHandlerVersion"
        case substatuses = "substatuses"
        case statuses = "statuses"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.type) {
        self.type = try container.decode(String?.self, forKey: .type)
    }
    if container.contains(.typeHandlerVersion) {
        self.typeHandlerVersion = try container.decode(String?.self, forKey: .typeHandlerVersion)
    }
    if container.contains(.substatuses) {
        self.substatuses = try container.decode([InstanceViewStatusData?]?.self, forKey: .substatuses)
    }
    if container.contains(.statuses) {
        self.statuses = try container.decode([InstanceViewStatusData?]?.self, forKey: .statuses)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.typeHandlerVersion != nil {try container.encode(self.typeHandlerVersion, forKey: .typeHandlerVersion)}
    if self.substatuses != nil {try container.encode(self.substatuses as! [InstanceViewStatusData?]?, forKey: .substatuses)}
    if self.statuses != nil {try container.encode(self.statuses as! [InstanceViewStatusData?]?, forKey: .statuses)}
  }
}

extension DataFactory {
  public static func createVirtualMachineExtensionInstanceViewProtocol() -> VirtualMachineExtensionInstanceViewProtocol {
    return VirtualMachineExtensionInstanceViewData()
  }
}
