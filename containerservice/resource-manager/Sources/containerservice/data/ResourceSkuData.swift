// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ResourceSkuData : ResourceSkuProtocol {
    public var resourceType: String?
    public var name: String?
    public var tier: String?
    public var size: String?
    public var family: String?
    public var kind: String?
    public var capacity: ResourceSkuCapacityProtocol?
    public var locations: [String]?
    public var locationInfo: [ResourceSkuLocationInfoProtocol?]?
    public var apiVersions: [String]?
    public var costs: [ResourceSkuCostsProtocol?]?
    public var capabilities: [ResourceSkuCapabilitiesProtocol?]?
    public var restrictions: [ResourceSkuRestrictionsProtocol?]?

        enum CodingKeys: String, CodingKey {case resourceType = "resourceType"
        case name = "name"
        case tier = "tier"
        case size = "size"
        case family = "family"
        case kind = "kind"
        case capacity = "capacity"
        case locations = "locations"
        case locationInfo = "locationInfo"
        case apiVersions = "apiVersions"
        case costs = "costs"
        case capabilities = "capabilities"
        case restrictions = "restrictions"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.resourceType) {
        self.resourceType = try container.decode(String?.self, forKey: .resourceType)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.tier) {
        self.tier = try container.decode(String?.self, forKey: .tier)
    }
    if container.contains(.size) {
        self.size = try container.decode(String?.self, forKey: .size)
    }
    if container.contains(.family) {
        self.family = try container.decode(String?.self, forKey: .family)
    }
    if container.contains(.kind) {
        self.kind = try container.decode(String?.self, forKey: .kind)
    }
    if container.contains(.capacity) {
        self.capacity = try container.decode(ResourceSkuCapacityData?.self, forKey: .capacity)
    }
    if container.contains(.locations) {
        self.locations = try container.decode([String]?.self, forKey: .locations)
    }
    if container.contains(.locationInfo) {
        self.locationInfo = try container.decode([ResourceSkuLocationInfoData?]?.self, forKey: .locationInfo)
    }
    if container.contains(.apiVersions) {
        self.apiVersions = try container.decode([String]?.self, forKey: .apiVersions)
    }
    if container.contains(.costs) {
        self.costs = try container.decode([ResourceSkuCostsData?]?.self, forKey: .costs)
    }
    if container.contains(.capabilities) {
        self.capabilities = try container.decode([ResourceSkuCapabilitiesData?]?.self, forKey: .capabilities)
    }
    if container.contains(.restrictions) {
        self.restrictions = try container.decode([ResourceSkuRestrictionsData?]?.self, forKey: .restrictions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.resourceType != nil {try container.encode(self.resourceType, forKey: .resourceType)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.tier != nil {try container.encode(self.tier, forKey: .tier)}
    if self.size != nil {try container.encode(self.size, forKey: .size)}
    if self.family != nil {try container.encode(self.family, forKey: .family)}
    if self.kind != nil {try container.encode(self.kind, forKey: .kind)}
    if self.capacity != nil {try container.encode(self.capacity as! ResourceSkuCapacityData?, forKey: .capacity)}
    if self.locations != nil {try container.encode(self.locations as! [String]?, forKey: .locations)}
    if self.locationInfo != nil {try container.encode(self.locationInfo as! [ResourceSkuLocationInfoData?]?, forKey: .locationInfo)}
    if self.apiVersions != nil {try container.encode(self.apiVersions as! [String]?, forKey: .apiVersions)}
    if self.costs != nil {try container.encode(self.costs as! [ResourceSkuCostsData?]?, forKey: .costs)}
    if self.capabilities != nil {try container.encode(self.capabilities as! [ResourceSkuCapabilitiesData?]?, forKey: .capabilities)}
    if self.restrictions != nil {try container.encode(self.restrictions as! [ResourceSkuRestrictionsData?]?, forKey: .restrictions)}
  }
}

extension DataFactory {
  public static func createResourceSkuProtocol() -> ResourceSkuProtocol {
    return ResourceSkuData()
  }
}
