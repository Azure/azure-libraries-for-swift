// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerServiceLinuxProfileData : ContainerServiceLinuxProfileProtocol {
    public var adminUsername: String
    public var ssh: ContainerServiceSshConfigurationProtocol

        enum CodingKeys: String, CodingKey {case adminUsername = "adminUsername"
        case ssh = "ssh"
        }

  public init(adminUsername: String, ssh: ContainerServiceSshConfigurationProtocol)  {
    self.adminUsername = adminUsername
    self.ssh = ssh
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.adminUsername = try container.decode(String.self, forKey: .adminUsername)
    self.ssh = try container.decode(ContainerServiceSshConfigurationData.self, forKey: .ssh)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.adminUsername, forKey: .adminUsername)
    try container.encode(self.ssh as! ContainerServiceSshConfigurationData, forKey: .ssh)
  }
}

extension DataFactory {
  public static func createContainerServiceLinuxProfileProtocol(adminUsername: String, ssh: ContainerServiceSshConfigurationProtocol) -> ContainerServiceLinuxProfileProtocol {
    return ContainerServiceLinuxProfileData(adminUsername: adminUsername, ssh: ssh)
  }
}
