// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineImagePropertiesData : VirtualMachineImagePropertiesProtocol {
    public var plan: PurchasePlanProtocol?
    public var osDiskImage: OSDiskImageProtocol?
    public var dataDiskImages: [DataDiskImageProtocol?]?

        enum CodingKeys: String, CodingKey {case plan = "plan"
        case osDiskImage = "osDiskImage"
        case dataDiskImages = "dataDiskImages"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.plan) {
        self.plan = try container.decode(PurchasePlanData?.self, forKey: .plan)
    }
    if container.contains(.osDiskImage) {
        self.osDiskImage = try container.decode(OSDiskImageData?.self, forKey: .osDiskImage)
    }
    if container.contains(.dataDiskImages) {
        self.dataDiskImages = try container.decode([DataDiskImageData?]?.self, forKey: .dataDiskImages)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.plan != nil {try container.encode(self.plan as! PurchasePlanData?, forKey: .plan)}
    if self.osDiskImage != nil {try container.encode(self.osDiskImage as! OSDiskImageData?, forKey: .osDiskImage)}
    if self.dataDiskImages != nil {try container.encode(self.dataDiskImages as! [DataDiskImageData?]?, forKey: .dataDiskImages)}
  }
}

extension DataFactory {
  public static func createVirtualMachineImagePropertiesProtocol() -> VirtualMachineImagePropertiesProtocol {
    return VirtualMachineImagePropertiesData()
  }
}
