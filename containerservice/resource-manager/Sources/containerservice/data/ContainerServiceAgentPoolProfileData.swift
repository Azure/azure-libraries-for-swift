// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerServiceAgentPoolProfileData : ContainerServiceAgentPoolProfileProtocol {
    public var name: String
    public var count: Int32
    public var vmSize: ContainerServiceVMSizeTypesEnum
    public var dnsPrefix: String
    public var fqdn: String?

        enum CodingKeys: String, CodingKey {case name = "name"
        case count = "count"
        case vmSize = "vmSize"
        case dnsPrefix = "dnsPrefix"
        case fqdn = "fqdn"
        }

  public init(name: String, count: Int32, vmSize: ContainerServiceVMSizeTypesEnum, dnsPrefix: String)  {
    self.name = name
    self.count = count
    self.vmSize = vmSize
    self.dnsPrefix = dnsPrefix
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.name = try container.decode(String.self, forKey: .name)
    self.count = try container.decode(Int32.self, forKey: .count)
    self.vmSize = try container.decode(ContainerServiceVMSizeTypesEnum.self, forKey: .vmSize)
    self.dnsPrefix = try container.decode(String.self, forKey: .dnsPrefix)
    if container.contains(.fqdn) {
        self.fqdn = try container.decode(String?.self, forKey: .fqdn)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.name, forKey: .name)
    try container.encode(self.count, forKey: .count)
    try container.encode(self.vmSize, forKey: .vmSize)
    try container.encode(self.dnsPrefix, forKey: .dnsPrefix)
    if self.fqdn != nil {try container.encode(self.fqdn, forKey: .fqdn)}
  }
}

extension DataFactory {
  public static func createContainerServiceAgentPoolProfileProtocol(name: String, count: Int32, vmSize: ContainerServiceVMSizeTypesEnum, dnsPrefix: String) -> ContainerServiceAgentPoolProfileProtocol {
    return ContainerServiceAgentPoolProfileData(name: name, count: count, vmSize: vmSize, dnsPrefix: dnsPrefix)
  }
}
