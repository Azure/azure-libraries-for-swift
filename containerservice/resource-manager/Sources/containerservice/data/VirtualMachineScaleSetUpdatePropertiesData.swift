// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineScaleSetUpdatePropertiesData : VirtualMachineScaleSetUpdatePropertiesProtocol {
    public var upgradePolicy: UpgradePolicyProtocol?
    public var virtualMachineProfile: VirtualMachineScaleSetUpdateVMProfileProtocol?
    public var overprovision: Bool?
    public var singlePlacementGroup: Bool?

        enum CodingKeys: String, CodingKey {case upgradePolicy = "upgradePolicy"
        case virtualMachineProfile = "virtualMachineProfile"
        case overprovision = "overprovision"
        case singlePlacementGroup = "singlePlacementGroup"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.upgradePolicy) {
        self.upgradePolicy = try container.decode(UpgradePolicyData?.self, forKey: .upgradePolicy)
    }
    if container.contains(.virtualMachineProfile) {
        self.virtualMachineProfile = try container.decode(VirtualMachineScaleSetUpdateVMProfileData?.self, forKey: .virtualMachineProfile)
    }
    if container.contains(.overprovision) {
        self.overprovision = try container.decode(Bool?.self, forKey: .overprovision)
    }
    if container.contains(.singlePlacementGroup) {
        self.singlePlacementGroup = try container.decode(Bool?.self, forKey: .singlePlacementGroup)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.upgradePolicy != nil {try container.encode(self.upgradePolicy as! UpgradePolicyData?, forKey: .upgradePolicy)}
    if self.virtualMachineProfile != nil {try container.encode(self.virtualMachineProfile as! VirtualMachineScaleSetUpdateVMProfileData?, forKey: .virtualMachineProfile)}
    if self.overprovision != nil {try container.encode(self.overprovision, forKey: .overprovision)}
    if self.singlePlacementGroup != nil {try container.encode(self.singlePlacementGroup, forKey: .singlePlacementGroup)}
  }
}

extension DataFactory {
  public static func createVirtualMachineScaleSetUpdatePropertiesProtocol() -> VirtualMachineScaleSetUpdatePropertiesProtocol {
    return VirtualMachineScaleSetUpdatePropertiesData()
  }
}
