// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VaultCertificateData : VaultCertificateProtocol {
    public var certificateUrl: String?
    public var certificateStore: String?

        enum CodingKeys: String, CodingKey {case certificateUrl = "certificateUrl"
        case certificateStore = "certificateStore"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.certificateUrl) {
        self.certificateUrl = try container.decode(String?.self, forKey: .certificateUrl)
    }
    if container.contains(.certificateStore) {
        self.certificateStore = try container.decode(String?.self, forKey: .certificateStore)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.certificateUrl != nil {try container.encode(self.certificateUrl, forKey: .certificateUrl)}
    if self.certificateStore != nil {try container.encode(self.certificateStore, forKey: .certificateStore)}
  }
}

extension DataFactory {
  public static func createVaultCertificateProtocol() -> VaultCertificateProtocol {
    return VaultCertificateData()
  }
}
