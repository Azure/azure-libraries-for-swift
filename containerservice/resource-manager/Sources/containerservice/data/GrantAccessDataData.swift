// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct GrantAccessDataData : GrantAccessDataProtocol {
    public var access: AccessLevelEnum
    public var durationInSeconds: Int32

        enum CodingKeys: String, CodingKey {case access = "access"
        case durationInSeconds = "durationInSeconds"
        }

  public init(access: AccessLevelEnum, durationInSeconds: Int32)  {
    self.access = access
    self.durationInSeconds = durationInSeconds
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.access = try container.decode(AccessLevelEnum.self, forKey: .access)
    self.durationInSeconds = try container.decode(Int32.self, forKey: .durationInSeconds)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.access, forKey: .access)
    try container.encode(self.durationInSeconds, forKey: .durationInSeconds)
  }
}

extension DataFactory {
  public static func createGrantAccessDataProtocol(access: AccessLevelEnum, durationInSeconds: Int32) -> GrantAccessDataProtocol {
    return GrantAccessDataData(access: access, durationInSeconds: durationInSeconds)
  }
}
