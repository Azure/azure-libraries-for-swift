// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineScaleSetPropertiesData : VirtualMachineScaleSetPropertiesProtocol {
    public var upgradePolicy: UpgradePolicyProtocol?
    public var virtualMachineProfile: VirtualMachineScaleSetVMProfileProtocol?
    public var provisioningState: String?
    public var overprovision: Bool?
    public var uniqueId: String?
    public var singlePlacementGroup: Bool?
    public var zoneBalance: Bool?
    public var platformFaultDomainCount: Int32?

        enum CodingKeys: String, CodingKey {case upgradePolicy = "upgradePolicy"
        case virtualMachineProfile = "virtualMachineProfile"
        case provisioningState = "provisioningState"
        case overprovision = "overprovision"
        case uniqueId = "uniqueId"
        case singlePlacementGroup = "singlePlacementGroup"
        case zoneBalance = "zoneBalance"
        case platformFaultDomainCount = "platformFaultDomainCount"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.upgradePolicy) {
        self.upgradePolicy = try container.decode(UpgradePolicyData?.self, forKey: .upgradePolicy)
    }
    if container.contains(.virtualMachineProfile) {
        self.virtualMachineProfile = try container.decode(VirtualMachineScaleSetVMProfileData?.self, forKey: .virtualMachineProfile)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.overprovision) {
        self.overprovision = try container.decode(Bool?.self, forKey: .overprovision)
    }
    if container.contains(.uniqueId) {
        self.uniqueId = try container.decode(String?.self, forKey: .uniqueId)
    }
    if container.contains(.singlePlacementGroup) {
        self.singlePlacementGroup = try container.decode(Bool?.self, forKey: .singlePlacementGroup)
    }
    if container.contains(.zoneBalance) {
        self.zoneBalance = try container.decode(Bool?.self, forKey: .zoneBalance)
    }
    if container.contains(.platformFaultDomainCount) {
        self.platformFaultDomainCount = try container.decode(Int32?.self, forKey: .platformFaultDomainCount)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.upgradePolicy != nil {try container.encode(self.upgradePolicy as! UpgradePolicyData?, forKey: .upgradePolicy)}
    if self.virtualMachineProfile != nil {try container.encode(self.virtualMachineProfile as! VirtualMachineScaleSetVMProfileData?, forKey: .virtualMachineProfile)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.overprovision != nil {try container.encode(self.overprovision, forKey: .overprovision)}
    if self.uniqueId != nil {try container.encode(self.uniqueId, forKey: .uniqueId)}
    if self.singlePlacementGroup != nil {try container.encode(self.singlePlacementGroup, forKey: .singlePlacementGroup)}
    if self.zoneBalance != nil {try container.encode(self.zoneBalance, forKey: .zoneBalance)}
    if self.platformFaultDomainCount != nil {try container.encode(self.platformFaultDomainCount, forKey: .platformFaultDomainCount)}
  }
}

extension DataFactory {
  public static func createVirtualMachineScaleSetPropertiesProtocol() -> VirtualMachineScaleSetPropertiesProtocol {
    return VirtualMachineScaleSetPropertiesData()
  }
}
