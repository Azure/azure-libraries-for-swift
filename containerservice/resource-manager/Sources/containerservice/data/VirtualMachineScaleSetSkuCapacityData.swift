// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VirtualMachineScaleSetSkuCapacityData : VirtualMachineScaleSetSkuCapacityProtocol {
    public var minimum: Int64?
    public var maximum: Int64?
    public var defaultCapacity: Int64?
    public var scaleType: VirtualMachineScaleSetSkuScaleTypeEnum?

        enum CodingKeys: String, CodingKey {case minimum = "minimum"
        case maximum = "maximum"
        case defaultCapacity = "defaultCapacity"
        case scaleType = "scaleType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.minimum) {
        self.minimum = try container.decode(Int64?.self, forKey: .minimum)
    }
    if container.contains(.maximum) {
        self.maximum = try container.decode(Int64?.self, forKey: .maximum)
    }
    if container.contains(.defaultCapacity) {
        self.defaultCapacity = try container.decode(Int64?.self, forKey: .defaultCapacity)
    }
    if container.contains(.scaleType) {
        self.scaleType = try container.decode(VirtualMachineScaleSetSkuScaleTypeEnum?.self, forKey: .scaleType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.minimum != nil {try container.encode(self.minimum, forKey: .minimum)}
    if self.maximum != nil {try container.encode(self.maximum, forKey: .maximum)}
    if self.defaultCapacity != nil {try container.encode(self.defaultCapacity, forKey: .defaultCapacity)}
    if self.scaleType != nil {try container.encode(self.scaleType, forKey: .scaleType)}
  }
}

extension DataFactory {
  public static func createVirtualMachineScaleSetSkuCapacityProtocol() -> VirtualMachineScaleSetSkuCapacityProtocol {
    return VirtualMachineScaleSetSkuCapacityData()
  }
}
