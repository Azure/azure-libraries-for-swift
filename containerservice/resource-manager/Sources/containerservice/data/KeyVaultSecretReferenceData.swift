// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct KeyVaultSecretReferenceData : KeyVaultSecretReferenceProtocol {
    public var secretUrl: String
    public var sourceVault: SubResourceProtocol

        enum CodingKeys: String, CodingKey {case secretUrl = "secretUrl"
        case sourceVault = "sourceVault"
        }

  public init(secretUrl: String, sourceVault: SubResourceProtocol)  {
    self.secretUrl = secretUrl
    self.sourceVault = sourceVault
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.secretUrl = try container.decode(String.self, forKey: .secretUrl)
    self.sourceVault = try container.decode(SubResourceData.self, forKey: .sourceVault)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.secretUrl, forKey: .secretUrl)
    try container.encode(self.sourceVault as! SubResourceData, forKey: .sourceVault)
  }
}

extension DataFactory {
  public static func createKeyVaultSecretReferenceProtocol(secretUrl: String, sourceVault: SubResourceProtocol) -> KeyVaultSecretReferenceProtocol {
    return KeyVaultSecretReferenceData(secretUrl: secretUrl, sourceVault: sourceVault)
  }
}
