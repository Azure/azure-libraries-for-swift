// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UpgradePolicyData : UpgradePolicyProtocol {
    public var mode: UpgradeModeEnum?
    public var rollingUpgradePolicy: RollingUpgradePolicyProtocol?
    public var automaticOSUpgrade: Bool?

        enum CodingKeys: String, CodingKey {case mode = "mode"
        case rollingUpgradePolicy = "rollingUpgradePolicy"
        case automaticOSUpgrade = "automaticOSUpgrade"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.mode) {
        self.mode = try container.decode(UpgradeModeEnum?.self, forKey: .mode)
    }
    if container.contains(.rollingUpgradePolicy) {
        self.rollingUpgradePolicy = try container.decode(RollingUpgradePolicyData?.self, forKey: .rollingUpgradePolicy)
    }
    if container.contains(.automaticOSUpgrade) {
        self.automaticOSUpgrade = try container.decode(Bool?.self, forKey: .automaticOSUpgrade)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.mode != nil {try container.encode(self.mode, forKey: .mode)}
    if self.rollingUpgradePolicy != nil {try container.encode(self.rollingUpgradePolicy as! RollingUpgradePolicyData?, forKey: .rollingUpgradePolicy)}
    if self.automaticOSUpgrade != nil {try container.encode(self.automaticOSUpgrade, forKey: .automaticOSUpgrade)}
  }
}

extension DataFactory {
  public static func createUpgradePolicyProtocol() -> UpgradePolicyProtocol {
    return UpgradePolicyData()
  }
}
