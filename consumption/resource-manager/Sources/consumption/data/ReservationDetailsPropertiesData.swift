// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ReservationDetailsPropertiesData : ReservationDetailsPropertiesProtocol {
    public var reservationOrderId: String?
    public var reservationId: String?
    public var skuName: String?
    public var reservedHours: Decimal?
    public var usageDate: Date?
    public var usedHours: Decimal?
    public var instanceId: String?
    public var totalReservedQuantity: Decimal?

        enum CodingKeys: String, CodingKey {case reservationOrderId = "reservationOrderId"
        case reservationId = "reservationId"
        case skuName = "skuName"
        case reservedHours = "reservedHours"
        case usageDate = "usageDate"
        case usedHours = "usedHours"
        case instanceId = "instanceId"
        case totalReservedQuantity = "totalReservedQuantity"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.reservationOrderId) {
        self.reservationOrderId = try container.decode(String?.self, forKey: .reservationOrderId)
    }
    if container.contains(.reservationId) {
        self.reservationId = try container.decode(String?.self, forKey: .reservationId)
    }
    if container.contains(.skuName) {
        self.skuName = try container.decode(String?.self, forKey: .skuName)
    }
    if container.contains(.reservedHours) {
        self.reservedHours = try container.decode(Decimal?.self, forKey: .reservedHours)
    }
    if container.contains(.usageDate) {
        self.usageDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .usageDate)), format: .dateTime)
    }
    if container.contains(.usedHours) {
        self.usedHours = try container.decode(Decimal?.self, forKey: .usedHours)
    }
    if container.contains(.instanceId) {
        self.instanceId = try container.decode(String?.self, forKey: .instanceId)
    }
    if container.contains(.totalReservedQuantity) {
        self.totalReservedQuantity = try container.decode(Decimal?.self, forKey: .totalReservedQuantity)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.reservationOrderId != nil {try container.encode(self.reservationOrderId, forKey: .reservationOrderId)}
    if self.reservationId != nil {try container.encode(self.reservationId, forKey: .reservationId)}
    if self.skuName != nil {try container.encode(self.skuName, forKey: .skuName)}
    if self.reservedHours != nil {try container.encode(self.reservedHours, forKey: .reservedHours)}
    if self.usageDate != nil {
        try container.encode(DateConverter.toString(date: self.usageDate!, format: .dateTime), forKey: .usageDate)
    }
    if self.usedHours != nil {try container.encode(self.usedHours, forKey: .usedHours)}
    if self.instanceId != nil {try container.encode(self.instanceId, forKey: .instanceId)}
    if self.totalReservedQuantity != nil {try container.encode(self.totalReservedQuantity, forKey: .totalReservedQuantity)}
  }
}

extension DataFactory {
  public static func createReservationDetailsPropertiesProtocol() -> ReservationDetailsPropertiesProtocol {
    return ReservationDetailsPropertiesData()
  }
}
