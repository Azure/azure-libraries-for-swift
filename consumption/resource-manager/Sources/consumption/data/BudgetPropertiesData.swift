// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct BudgetPropertiesData : BudgetPropertiesProtocol {
    public var category: CategoryTypeEnum
    public var amount: Decimal
    public var timeGrain: TimeGrainTypeEnum
    public var timePeriod: BudgetTimePeriodProtocol
    public var filters: FiltersProtocol?
    public var currentSpend: CurrentSpendProtocol?
    public var notifications: [String:NotificationProtocol?]?

        enum CodingKeys: String, CodingKey {case category = "category"
        case amount = "amount"
        case timeGrain = "timeGrain"
        case timePeriod = "timePeriod"
        case filters = "filters"
        case currentSpend = "currentSpend"
        case notifications = "notifications"
        }

  public init(category: CategoryTypeEnum, amount: Decimal, timeGrain: TimeGrainTypeEnum, timePeriod: BudgetTimePeriodProtocol)  {
    self.category = category
    self.amount = amount
    self.timeGrain = timeGrain
    self.timePeriod = timePeriod
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.category = try container.decode(CategoryTypeEnum.self, forKey: .category)
    self.amount = try container.decode(Decimal.self, forKey: .amount)
    self.timeGrain = try container.decode(TimeGrainTypeEnum.self, forKey: .timeGrain)
    self.timePeriod = try container.decode(BudgetTimePeriodData.self, forKey: .timePeriod)
    if container.contains(.filters) {
        self.filters = try container.decode(FiltersData?.self, forKey: .filters)
    }
    if container.contains(.currentSpend) {
        self.currentSpend = try container.decode(CurrentSpendData?.self, forKey: .currentSpend)
    }
    if container.contains(.notifications) {
        self.notifications = try container.decode([String:NotificationData?]?.self, forKey: .notifications)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.category, forKey: .category)
    try container.encode(self.amount, forKey: .amount)
    try container.encode(self.timeGrain, forKey: .timeGrain)
    try container.encode(self.timePeriod as! BudgetTimePeriodData, forKey: .timePeriod)
    if self.filters != nil {try container.encode(self.filters as! FiltersData?, forKey: .filters)}
    if self.currentSpend != nil {try container.encode(self.currentSpend as! CurrentSpendData?, forKey: .currentSpend)}
    if self.notifications != nil {try container.encode(self.notifications, forKey: .notifications)}
  }
}

extension DataFactory {
  public static func createBudgetPropertiesProtocol(category: CategoryTypeEnum, amount: Decimal, timeGrain: TimeGrainTypeEnum, timePeriod: BudgetTimePeriodProtocol) -> BudgetPropertiesProtocol {
    return BudgetPropertiesData(category: category, amount: amount, timeGrain: timeGrain, timePeriod: timePeriod)
  }
}
