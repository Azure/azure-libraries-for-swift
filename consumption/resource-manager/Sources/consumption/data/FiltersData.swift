// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FiltersData : FiltersProtocol {
    public var resourceGroups: [String]?
    public var resources: [String]?
    public var meters: [String]?

        enum CodingKeys: String, CodingKey {case resourceGroups = "resourceGroups"
        case resources = "resources"
        case meters = "meters"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.resourceGroups) {
        self.resourceGroups = try container.decode([String]?.self, forKey: .resourceGroups)
    }
    if container.contains(.resources) {
        self.resources = try container.decode([String]?.self, forKey: .resources)
    }
    if container.contains(.meters) {
        self.meters = try container.decode([String]?.self, forKey: .meters)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.resourceGroups != nil {try container.encode(self.resourceGroups as! [String]?, forKey: .resourceGroups)}
    if self.resources != nil {try container.encode(self.resources as! [String]?, forKey: .resources)}
    if self.meters != nil {try container.encode(self.meters as! [String]?, forKey: .meters)}
  }
}

extension DataFactory {
  public static func createFiltersProtocol() -> FiltersProtocol {
    return FiltersData()
  }
}
