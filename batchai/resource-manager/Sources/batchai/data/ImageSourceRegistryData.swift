// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ImageSourceRegistryData : ImageSourceRegistryProtocol {
    public var serverUrl: String?
    public var image: String
    public var credentials: PrivateRegistryCredentialsProtocol?

        enum CodingKeys: String, CodingKey {case serverUrl = "serverUrl"
        case image = "image"
        case credentials = "credentials"
        }

  public init(image: String)  {
    self.image = image
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.serverUrl) {
        self.serverUrl = try container.decode(String?.self, forKey: .serverUrl)
    }
    self.image = try container.decode(String.self, forKey: .image)
    if container.contains(.credentials) {
        self.credentials = try container.decode(PrivateRegistryCredentialsData?.self, forKey: .credentials)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.serverUrl != nil {try container.encode(self.serverUrl, forKey: .serverUrl)}
    try container.encode(self.image, forKey: .image)
    if self.credentials != nil {try container.encode(self.credentials as! PrivateRegistryCredentialsData?, forKey: .credentials)}
  }
}

extension DataFactory {
  public static func createImageSourceRegistryProtocol(image: String) -> ImageSourceRegistryProtocol {
    return ImageSourceRegistryData(image: image)
  }
}
