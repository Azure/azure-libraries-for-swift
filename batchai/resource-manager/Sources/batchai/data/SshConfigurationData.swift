// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SshConfigurationData : SshConfigurationProtocol {
    public var publicIPsToAllow: [String]?
    public var userAccountSettings: UserAccountSettingsProtocol

        enum CodingKeys: String, CodingKey {case publicIPsToAllow = "publicIPsToAllow"
        case userAccountSettings = "userAccountSettings"
        }

  public init(userAccountSettings: UserAccountSettingsProtocol)  {
    self.userAccountSettings = userAccountSettings
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.publicIPsToAllow) {
        self.publicIPsToAllow = try container.decode([String]?.self, forKey: .publicIPsToAllow)
    }
    self.userAccountSettings = try container.decode(UserAccountSettingsData.self, forKey: .userAccountSettings)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.publicIPsToAllow != nil {try container.encode(self.publicIPsToAllow as! [String]?, forKey: .publicIPsToAllow)}
    try container.encode(self.userAccountSettings as! UserAccountSettingsData, forKey: .userAccountSettings)
  }
}

extension DataFactory {
  public static func createSshConfigurationProtocol(userAccountSettings: UserAccountSettingsProtocol) -> SshConfigurationProtocol {
    return SshConfigurationData(userAccountSettings: userAccountSettings)
  }
}
