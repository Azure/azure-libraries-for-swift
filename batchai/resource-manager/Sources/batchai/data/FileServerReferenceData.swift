// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FileServerReferenceData : FileServerReferenceProtocol {
    public var fileServer: ResourceIdProtocol
    public var sourceDirectory: String?
    public var relativeMountPath: String
    public var mountOptions: String?

        enum CodingKeys: String, CodingKey {case fileServer = "fileServer"
        case sourceDirectory = "sourceDirectory"
        case relativeMountPath = "relativeMountPath"
        case mountOptions = "mountOptions"
        }

  public init(fileServer: ResourceIdProtocol, relativeMountPath: String)  {
    self.fileServer = fileServer
    self.relativeMountPath = relativeMountPath
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.fileServer = try container.decode(ResourceIdData.self, forKey: .fileServer)
    if container.contains(.sourceDirectory) {
        self.sourceDirectory = try container.decode(String?.self, forKey: .sourceDirectory)
    }
    self.relativeMountPath = try container.decode(String.self, forKey: .relativeMountPath)
    if container.contains(.mountOptions) {
        self.mountOptions = try container.decode(String?.self, forKey: .mountOptions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.fileServer as! ResourceIdData, forKey: .fileServer)
    if self.sourceDirectory != nil {try container.encode(self.sourceDirectory, forKey: .sourceDirectory)}
    try container.encode(self.relativeMountPath, forKey: .relativeMountPath)
    if self.mountOptions != nil {try container.encode(self.mountOptions, forKey: .mountOptions)}
  }
}

extension DataFactory {
  public static func createFileServerReferenceProtocol(fileServer: ResourceIdProtocol, relativeMountPath: String) -> FileServerReferenceProtocol {
    return FileServerReferenceData(fileServer: fileServer, relativeMountPath: relativeMountPath)
  }
}
