// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MountVolumesData : MountVolumesProtocol {
    public var azureFileShares: [AzureFileShareReferenceProtocol?]?
    public var azureBlobFileSystems: [AzureBlobFileSystemReferenceProtocol?]?
    public var fileServers: [FileServerReferenceProtocol?]?
    public var unmanagedFileSystems: [UnmanagedFileSystemReferenceProtocol?]?

        enum CodingKeys: String, CodingKey {case azureFileShares = "azureFileShares"
        case azureBlobFileSystems = "azureBlobFileSystems"
        case fileServers = "fileServers"
        case unmanagedFileSystems = "unmanagedFileSystems"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.azureFileShares) {
        self.azureFileShares = try container.decode([AzureFileShareReferenceData?]?.self, forKey: .azureFileShares)
    }
    if container.contains(.azureBlobFileSystems) {
        self.azureBlobFileSystems = try container.decode([AzureBlobFileSystemReferenceData?]?.self, forKey: .azureBlobFileSystems)
    }
    if container.contains(.fileServers) {
        self.fileServers = try container.decode([FileServerReferenceData?]?.self, forKey: .fileServers)
    }
    if container.contains(.unmanagedFileSystems) {
        self.unmanagedFileSystems = try container.decode([UnmanagedFileSystemReferenceData?]?.self, forKey: .unmanagedFileSystems)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.azureFileShares != nil {try container.encode(self.azureFileShares as! [AzureFileShareReferenceData?]?, forKey: .azureFileShares)}
    if self.azureBlobFileSystems != nil {try container.encode(self.azureBlobFileSystems as! [AzureBlobFileSystemReferenceData?]?, forKey: .azureBlobFileSystems)}
    if self.fileServers != nil {try container.encode(self.fileServers as! [FileServerReferenceData?]?, forKey: .fileServers)}
    if self.unmanagedFileSystems != nil {try container.encode(self.unmanagedFileSystems as! [UnmanagedFileSystemReferenceData?]?, forKey: .unmanagedFileSystems)}
  }
}

extension DataFactory {
  public static func createMountVolumesProtocol() -> MountVolumesProtocol {
    return MountVolumesData()
  }
}
