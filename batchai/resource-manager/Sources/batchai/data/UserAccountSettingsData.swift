// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UserAccountSettingsData : UserAccountSettingsProtocol {
    public var adminUserName: String
    public var adminUserSshPublicKey: String?
    public var adminUserPassword: String?

        enum CodingKeys: String, CodingKey {case adminUserName = "adminUserName"
        case adminUserSshPublicKey = "adminUserSshPublicKey"
        case adminUserPassword = "adminUserPassword"
        }

  public init(adminUserName: String)  {
    self.adminUserName = adminUserName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.adminUserName = try container.decode(String.self, forKey: .adminUserName)
    if container.contains(.adminUserSshPublicKey) {
        self.adminUserSshPublicKey = try container.decode(String?.self, forKey: .adminUserSshPublicKey)
    }
    if container.contains(.adminUserPassword) {
        self.adminUserPassword = try container.decode(String?.self, forKey: .adminUserPassword)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.adminUserName, forKey: .adminUserName)
    if self.adminUserSshPublicKey != nil {try container.encode(self.adminUserSshPublicKey, forKey: .adminUserSshPublicKey)}
    if self.adminUserPassword != nil {try container.encode(self.adminUserPassword, forKey: .adminUserPassword)}
  }
}

extension DataFactory {
  public static func createUserAccountSettingsProtocol(adminUserName: String) -> UserAccountSettingsProtocol {
    return UserAccountSettingsData(adminUserName: adminUserName)
  }
}
