// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DataDisksData : DataDisksProtocol {
    public var diskSizeInGB: Int32
    public var cachingType: CachingTypeEnum?
    public var diskCount: Int32
    public var storageAccountType: StorageAccountTypeEnum

        enum CodingKeys: String, CodingKey {case diskSizeInGB = "diskSizeInGB"
        case cachingType = "cachingType"
        case diskCount = "diskCount"
        case storageAccountType = "storageAccountType"
        }

  public init(diskSizeInGB: Int32, diskCount: Int32, storageAccountType: StorageAccountTypeEnum)  {
    self.diskSizeInGB = diskSizeInGB
    self.diskCount = diskCount
    self.storageAccountType = storageAccountType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.diskSizeInGB = try container.decode(Int32.self, forKey: .diskSizeInGB)
    if container.contains(.cachingType) {
        self.cachingType = try container.decode(CachingTypeEnum?.self, forKey: .cachingType)
    }
    self.diskCount = try container.decode(Int32.self, forKey: .diskCount)
    self.storageAccountType = try container.decode(StorageAccountTypeEnum.self, forKey: .storageAccountType)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.diskSizeInGB, forKey: .diskSizeInGB)
    if self.cachingType != nil {try container.encode(self.cachingType, forKey: .cachingType)}
    try container.encode(self.diskCount, forKey: .diskCount)
    try container.encode(self.storageAccountType, forKey: .storageAccountType)
  }
}

extension DataFactory {
  public static func createDataDisksProtocol(diskSizeInGB: Int32, diskCount: Int32, storageAccountType: StorageAccountTypeEnum) -> DataDisksProtocol {
    return DataDisksData(diskSizeInGB: diskSizeInGB, diskCount: diskCount, storageAccountType: storageAccountType)
  }
}
