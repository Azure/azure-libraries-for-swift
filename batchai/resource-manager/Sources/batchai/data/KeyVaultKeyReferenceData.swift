// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct KeyVaultKeyReferenceData : KeyVaultKeyReferenceProtocol {
    public var sourceVault: ResourceIdProtocol
    public var keyUrl: String

        enum CodingKeys: String, CodingKey {case sourceVault = "sourceVault"
        case keyUrl = "keyUrl"
        }

  public init(sourceVault: ResourceIdProtocol, keyUrl: String)  {
    self.sourceVault = sourceVault
    self.keyUrl = keyUrl
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.sourceVault = try container.decode(ResourceIdData.self, forKey: .sourceVault)
    self.keyUrl = try container.decode(String.self, forKey: .keyUrl)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.sourceVault as! ResourceIdData, forKey: .sourceVault)
    try container.encode(self.keyUrl, forKey: .keyUrl)
  }
}

extension DataFactory {
  public static func createKeyVaultKeyReferenceProtocol(sourceVault: ResourceIdProtocol, keyUrl: String) -> KeyVaultKeyReferenceProtocol {
    return KeyVaultKeyReferenceData(sourceVault: sourceVault, keyUrl: keyUrl)
  }
}
