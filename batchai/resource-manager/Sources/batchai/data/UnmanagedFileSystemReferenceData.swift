// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UnmanagedFileSystemReferenceData : UnmanagedFileSystemReferenceProtocol {
    public var mountCommand: String
    public var relativeMountPath: String

        enum CodingKeys: String, CodingKey {case mountCommand = "mountCommand"
        case relativeMountPath = "relativeMountPath"
        }

  public init(mountCommand: String, relativeMountPath: String)  {
    self.mountCommand = mountCommand
    self.relativeMountPath = relativeMountPath
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.mountCommand = try container.decode(String.self, forKey: .mountCommand)
    self.relativeMountPath = try container.decode(String.self, forKey: .relativeMountPath)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.mountCommand, forKey: .mountCommand)
    try container.encode(self.relativeMountPath, forKey: .relativeMountPath)
  }
}

extension DataFactory {
  public static func createUnmanagedFileSystemReferenceProtocol(mountCommand: String, relativeMountPath: String) -> UnmanagedFileSystemReferenceProtocol {
    return UnmanagedFileSystemReferenceData(mountCommand: mountCommand, relativeMountPath: relativeMountPath)
  }
}
