// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AutoScaleSettingsData : AutoScaleSettingsProtocol {
    public var minimumNodeCount: Int32
    public var maximumNodeCount: Int32
    public var initialNodeCount: Int32?

        enum CodingKeys: String, CodingKey {case minimumNodeCount = "minimumNodeCount"
        case maximumNodeCount = "maximumNodeCount"
        case initialNodeCount = "initialNodeCount"
        }

  public init(minimumNodeCount: Int32, maximumNodeCount: Int32)  {
    self.minimumNodeCount = minimumNodeCount
    self.maximumNodeCount = maximumNodeCount
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.minimumNodeCount = try container.decode(Int32.self, forKey: .minimumNodeCount)
    self.maximumNodeCount = try container.decode(Int32.self, forKey: .maximumNodeCount)
    if container.contains(.initialNodeCount) {
        self.initialNodeCount = try container.decode(Int32?.self, forKey: .initialNodeCount)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.minimumNodeCount, forKey: .minimumNodeCount)
    try container.encode(self.maximumNodeCount, forKey: .maximumNodeCount)
    if self.initialNodeCount != nil {try container.encode(self.initialNodeCount, forKey: .initialNodeCount)}
  }
}

extension DataFactory {
  public static func createAutoScaleSettingsProtocol(minimumNodeCount: Int32, maximumNodeCount: Int32) -> AutoScaleSettingsProtocol {
    return AutoScaleSettingsData(minimumNodeCount: minimumNodeCount, maximumNodeCount: maximumNodeCount)
  }
}
