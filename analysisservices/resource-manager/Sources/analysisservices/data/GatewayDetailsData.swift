// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct GatewayDetailsData : GatewayDetailsProtocol {
    public var gatewayResourceId: String?
    public var gatewayObjectId: String?
    public var dmtsClusterUri: String?

        enum CodingKeys: String, CodingKey {case gatewayResourceId = "gatewayResourceId"
        case gatewayObjectId = "gatewayObjectId"
        case dmtsClusterUri = "dmtsClusterUri"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.gatewayResourceId) {
        self.gatewayResourceId = try container.decode(String?.self, forKey: .gatewayResourceId)
    }
    if container.contains(.gatewayObjectId) {
        self.gatewayObjectId = try container.decode(String?.self, forKey: .gatewayObjectId)
    }
    if container.contains(.dmtsClusterUri) {
        self.dmtsClusterUri = try container.decode(String?.self, forKey: .dmtsClusterUri)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.gatewayResourceId != nil {try container.encode(self.gatewayResourceId, forKey: .gatewayResourceId)}
    if self.gatewayObjectId != nil {try container.encode(self.gatewayObjectId, forKey: .gatewayObjectId)}
    if self.dmtsClusterUri != nil {try container.encode(self.dmtsClusterUri, forKey: .dmtsClusterUri)}
  }
}

extension DataFactory {
  public static func createGatewayDetailsProtocol() -> GatewayDetailsProtocol {
    return GatewayDetailsData()
  }
}
