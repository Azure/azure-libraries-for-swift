// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct IPv4FirewallSettingsData : IPv4FirewallSettingsProtocol {
    public var firewallRules: [IPv4FirewallRuleProtocol?]?
    public var enablePowerBIService: String?

        enum CodingKeys: String, CodingKey {case firewallRules = "firewallRules"
        case enablePowerBIService = "enablePowerBIService"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.firewallRules) {
        self.firewallRules = try container.decode([IPv4FirewallRuleData?]?.self, forKey: .firewallRules)
    }
    if container.contains(.enablePowerBIService) {
        self.enablePowerBIService = try container.decode(String?.self, forKey: .enablePowerBIService)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.firewallRules != nil {try container.encode(self.firewallRules as! [IPv4FirewallRuleData?]?, forKey: .firewallRules)}
    if self.enablePowerBIService != nil {try container.encode(self.enablePowerBIService, forKey: .enablePowerBIService)}
  }
}

extension DataFactory {
  public static func createIPv4FirewallSettingsProtocol() -> IPv4FirewallSettingsProtocol {
    return IPv4FirewallSettingsData()
  }
}
