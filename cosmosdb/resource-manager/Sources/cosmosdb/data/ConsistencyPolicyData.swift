// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ConsistencyPolicyData : ConsistencyPolicyProtocol {
    public var defaultConsistencyLevel: DefaultConsistencyLevelEnum
    public var maxStalenessPrefix: Int64?
    public var maxIntervalInSeconds: Int32?

        enum CodingKeys: String, CodingKey {case defaultConsistencyLevel = "defaultConsistencyLevel"
        case maxStalenessPrefix = "maxStalenessPrefix"
        case maxIntervalInSeconds = "maxIntervalInSeconds"
        }

  public init(defaultConsistencyLevel: DefaultConsistencyLevelEnum)  {
    self.defaultConsistencyLevel = defaultConsistencyLevel
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.defaultConsistencyLevel = try container.decode(DefaultConsistencyLevelEnum.self, forKey: .defaultConsistencyLevel)
    if container.contains(.maxStalenessPrefix) {
        self.maxStalenessPrefix = try container.decode(Int64?.self, forKey: .maxStalenessPrefix)
    }
    if container.contains(.maxIntervalInSeconds) {
        self.maxIntervalInSeconds = try container.decode(Int32?.self, forKey: .maxIntervalInSeconds)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.defaultConsistencyLevel, forKey: .defaultConsistencyLevel)
    if self.maxStalenessPrefix != nil {try container.encode(self.maxStalenessPrefix, forKey: .maxStalenessPrefix)}
    if self.maxIntervalInSeconds != nil {try container.encode(self.maxIntervalInSeconds, forKey: .maxIntervalInSeconds)}
  }
}

extension DataFactory {
  public static func createConsistencyPolicyProtocol(defaultConsistencyLevel: DefaultConsistencyLevelEnum) -> ConsistencyPolicyProtocol {
    return ConsistencyPolicyData(defaultConsistencyLevel: defaultConsistencyLevel)
  }
}
