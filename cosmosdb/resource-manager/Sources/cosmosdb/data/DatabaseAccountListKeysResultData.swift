// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DatabaseAccountListKeysResultData : DatabaseAccountListKeysResultProtocol {
    public var primaryMasterKey: String?
    public var secondaryMasterKey: String?
    public var properties: DatabaseAccountListReadOnlyKeysResultProtocol?

        enum CodingKeys: String, CodingKey {case primaryMasterKey = "primaryMasterKey"
        case secondaryMasterKey = "secondaryMasterKey"
        case properties = "properties"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.primaryMasterKey) {
        self.primaryMasterKey = try container.decode(String?.self, forKey: .primaryMasterKey)
    }
    if container.contains(.secondaryMasterKey) {
        self.secondaryMasterKey = try container.decode(String?.self, forKey: .secondaryMasterKey)
    }
    if container.contains(.properties) {
        self.properties = try container.decode(DatabaseAccountListReadOnlyKeysResultData?.self, forKey: .properties)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.primaryMasterKey != nil {try container.encode(self.primaryMasterKey, forKey: .primaryMasterKey)}
    if self.secondaryMasterKey != nil {try container.encode(self.secondaryMasterKey, forKey: .secondaryMasterKey)}
    if self.properties != nil {try container.encode(self.properties as! DatabaseAccountListReadOnlyKeysResultData?, forKey: .properties)}
  }
}

extension DataFactory {
  public static func createDatabaseAccountListKeysResultProtocol() -> DatabaseAccountListKeysResultProtocol {
    return DatabaseAccountListKeysResultData()
  }
}
