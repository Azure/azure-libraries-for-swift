// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LocationData : LocationProtocol {
    public var id: String?
    public var locationName: String?
    public var documentEndpoint: String?
    public var provisioningState: String?
    public var failoverPriority: Int32?

        enum CodingKeys: String, CodingKey {case id = "id"
        case locationName = "locationName"
        case documentEndpoint = "documentEndpoint"
        case provisioningState = "provisioningState"
        case failoverPriority = "failoverPriority"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.locationName) {
        self.locationName = try container.decode(String?.self, forKey: .locationName)
    }
    if container.contains(.documentEndpoint) {
        self.documentEndpoint = try container.decode(String?.self, forKey: .documentEndpoint)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.failoverPriority) {
        self.failoverPriority = try container.decode(Int32?.self, forKey: .failoverPriority)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.locationName != nil {try container.encode(self.locationName, forKey: .locationName)}
    if self.documentEndpoint != nil {try container.encode(self.documentEndpoint, forKey: .documentEndpoint)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.failoverPriority != nil {try container.encode(self.failoverPriority, forKey: .failoverPriority)}
  }
}

extension DataFactory {
  public static func createLocationProtocol() -> LocationProtocol {
    return LocationData()
  }
}
