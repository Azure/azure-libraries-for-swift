// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DiagnosticsStorageAccountConfigData : DiagnosticsStorageAccountConfigProtocol {
    public var storageAccountName: String
    public var protectedAccountKeyName: String
    public var blobEndpoint: String
    public var queueEndpoint: String
    public var tableEndpoint: String

        enum CodingKeys: String, CodingKey {case storageAccountName = "storageAccountName"
        case protectedAccountKeyName = "protectedAccountKeyName"
        case blobEndpoint = "blobEndpoint"
        case queueEndpoint = "queueEndpoint"
        case tableEndpoint = "tableEndpoint"
        }

  public init(storageAccountName: String, protectedAccountKeyName: String, blobEndpoint: String, queueEndpoint: String, tableEndpoint: String)  {
    self.storageAccountName = storageAccountName
    self.protectedAccountKeyName = protectedAccountKeyName
    self.blobEndpoint = blobEndpoint
    self.queueEndpoint = queueEndpoint
    self.tableEndpoint = tableEndpoint
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.storageAccountName = try container.decode(String.self, forKey: .storageAccountName)
    self.protectedAccountKeyName = try container.decode(String.self, forKey: .protectedAccountKeyName)
    self.blobEndpoint = try container.decode(String.self, forKey: .blobEndpoint)
    self.queueEndpoint = try container.decode(String.self, forKey: .queueEndpoint)
    self.tableEndpoint = try container.decode(String.self, forKey: .tableEndpoint)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.storageAccountName, forKey: .storageAccountName)
    try container.encode(self.protectedAccountKeyName, forKey: .protectedAccountKeyName)
    try container.encode(self.blobEndpoint, forKey: .blobEndpoint)
    try container.encode(self.queueEndpoint, forKey: .queueEndpoint)
    try container.encode(self.tableEndpoint, forKey: .tableEndpoint)
  }
}

extension DataFactory {
  public static func createDiagnosticsStorageAccountConfigProtocol(storageAccountName: String, protectedAccountKeyName: String, blobEndpoint: String, queueEndpoint: String, tableEndpoint: String) -> DiagnosticsStorageAccountConfigProtocol {
    return DiagnosticsStorageAccountConfigData(storageAccountName: storageAccountName, protectedAccountKeyName: protectedAccountKeyName, blobEndpoint: blobEndpoint, queueEndpoint: queueEndpoint, tableEndpoint: tableEndpoint)
  }
}
