// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ClusterUpgradePolicyData : ClusterUpgradePolicyProtocol {
    public var forceRestart: Bool?
    public var upgradeReplicaSetCheckTimeout: String
    public var healthCheckWaitDuration: String
    public var healthCheckStableDuration: String
    public var healthCheckRetryTimeout: String
    public var upgradeTimeout: String
    public var upgradeDomainTimeout: String
    public var healthPolicy: ClusterHealthPolicyProtocol
    public var deltaHealthPolicy: ClusterUpgradeDeltaHealthPolicyProtocol?

        enum CodingKeys: String, CodingKey {case forceRestart = "forceRestart"
        case upgradeReplicaSetCheckTimeout = "upgradeReplicaSetCheckTimeout"
        case healthCheckWaitDuration = "healthCheckWaitDuration"
        case healthCheckStableDuration = "healthCheckStableDuration"
        case healthCheckRetryTimeout = "healthCheckRetryTimeout"
        case upgradeTimeout = "upgradeTimeout"
        case upgradeDomainTimeout = "upgradeDomainTimeout"
        case healthPolicy = "healthPolicy"
        case deltaHealthPolicy = "deltaHealthPolicy"
        }

  public init(upgradeReplicaSetCheckTimeout: String, healthCheckWaitDuration: String, healthCheckStableDuration: String, healthCheckRetryTimeout: String, upgradeTimeout: String, upgradeDomainTimeout: String, healthPolicy: ClusterHealthPolicyProtocol)  {
    self.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout
    self.healthCheckWaitDuration = healthCheckWaitDuration
    self.healthCheckStableDuration = healthCheckStableDuration
    self.healthCheckRetryTimeout = healthCheckRetryTimeout
    self.upgradeTimeout = upgradeTimeout
    self.upgradeDomainTimeout = upgradeDomainTimeout
    self.healthPolicy = healthPolicy
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.forceRestart) {
        self.forceRestart = try container.decode(Bool?.self, forKey: .forceRestart)
    }
    self.upgradeReplicaSetCheckTimeout = try container.decode(String.self, forKey: .upgradeReplicaSetCheckTimeout)
    self.healthCheckWaitDuration = try container.decode(String.self, forKey: .healthCheckWaitDuration)
    self.healthCheckStableDuration = try container.decode(String.self, forKey: .healthCheckStableDuration)
    self.healthCheckRetryTimeout = try container.decode(String.self, forKey: .healthCheckRetryTimeout)
    self.upgradeTimeout = try container.decode(String.self, forKey: .upgradeTimeout)
    self.upgradeDomainTimeout = try container.decode(String.self, forKey: .upgradeDomainTimeout)
    self.healthPolicy = try container.decode(ClusterHealthPolicyData.self, forKey: .healthPolicy)
    if container.contains(.deltaHealthPolicy) {
        self.deltaHealthPolicy = try container.decode(ClusterUpgradeDeltaHealthPolicyData?.self, forKey: .deltaHealthPolicy)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.forceRestart != nil {try container.encode(self.forceRestart, forKey: .forceRestart)}
    try container.encode(self.upgradeReplicaSetCheckTimeout, forKey: .upgradeReplicaSetCheckTimeout)
    try container.encode(self.healthCheckWaitDuration, forKey: .healthCheckWaitDuration)
    try container.encode(self.healthCheckStableDuration, forKey: .healthCheckStableDuration)
    try container.encode(self.healthCheckRetryTimeout, forKey: .healthCheckRetryTimeout)
    try container.encode(self.upgradeTimeout, forKey: .upgradeTimeout)
    try container.encode(self.upgradeDomainTimeout, forKey: .upgradeDomainTimeout)
    try container.encode(self.healthPolicy as! ClusterHealthPolicyData, forKey: .healthPolicy)
    if self.deltaHealthPolicy != nil {try container.encode(self.deltaHealthPolicy as! ClusterUpgradeDeltaHealthPolicyData?, forKey: .deltaHealthPolicy)}
  }
}

extension DataFactory {
  public static func createClusterUpgradePolicyProtocol(upgradeReplicaSetCheckTimeout: String, healthCheckWaitDuration: String, healthCheckStableDuration: String, healthCheckRetryTimeout: String, upgradeTimeout: String, upgradeDomainTimeout: String, healthPolicy: ClusterHealthPolicyProtocol) -> ClusterUpgradePolicyProtocol {
    return ClusterUpgradePolicyData(upgradeReplicaSetCheckTimeout: upgradeReplicaSetCheckTimeout, healthCheckWaitDuration: healthCheckWaitDuration, healthCheckStableDuration: healthCheckStableDuration, healthCheckRetryTimeout: healthCheckRetryTimeout, upgradeTimeout: upgradeTimeout, upgradeDomainTimeout: upgradeDomainTimeout, healthPolicy: healthPolicy)
  }
}
