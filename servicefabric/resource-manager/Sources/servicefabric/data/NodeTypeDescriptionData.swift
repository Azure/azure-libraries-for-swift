// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NodeTypeDescriptionData : NodeTypeDescriptionProtocol {
    public var name: String
    public var placementProperties: [String:String]?
    public var capacities: [String:String]?
    public var clientConnectionEndpointPort: Int32
    public var httpGatewayEndpointPort: Int32
    public var durabilityLevel: DurabilityLevelEnum?
    public var applicationPorts: EndpointRangeDescriptionProtocol?
    public var ephemeralPorts: EndpointRangeDescriptionProtocol?
    public var isPrimary: Bool
    public var vmInstanceCount: Int32
    public var reverseProxyEndpointPort: Int32?

        enum CodingKeys: String, CodingKey {case name = "name"
        case placementProperties = "placementProperties"
        case capacities = "capacities"
        case clientConnectionEndpointPort = "clientConnectionEndpointPort"
        case httpGatewayEndpointPort = "httpGatewayEndpointPort"
        case durabilityLevel = "durabilityLevel"
        case applicationPorts = "applicationPorts"
        case ephemeralPorts = "ephemeralPorts"
        case isPrimary = "isPrimary"
        case vmInstanceCount = "vmInstanceCount"
        case reverseProxyEndpointPort = "reverseProxyEndpointPort"
        }

  public init(name: String, clientConnectionEndpointPort: Int32, httpGatewayEndpointPort: Int32, isPrimary: Bool, vmInstanceCount: Int32)  {
    self.name = name
    self.clientConnectionEndpointPort = clientConnectionEndpointPort
    self.httpGatewayEndpointPort = httpGatewayEndpointPort
    self.isPrimary = isPrimary
    self.vmInstanceCount = vmInstanceCount
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.name = try container.decode(String.self, forKey: .name)
    if container.contains(.placementProperties) {
        self.placementProperties = try container.decode([String:String]?.self, forKey: .placementProperties)
    }
    if container.contains(.capacities) {
        self.capacities = try container.decode([String:String]?.self, forKey: .capacities)
    }
    self.clientConnectionEndpointPort = try container.decode(Int32.self, forKey: .clientConnectionEndpointPort)
    self.httpGatewayEndpointPort = try container.decode(Int32.self, forKey: .httpGatewayEndpointPort)
    if container.contains(.durabilityLevel) {
        self.durabilityLevel = try container.decode(DurabilityLevelEnum?.self, forKey: .durabilityLevel)
    }
    if container.contains(.applicationPorts) {
        self.applicationPorts = try container.decode(EndpointRangeDescriptionData?.self, forKey: .applicationPorts)
    }
    if container.contains(.ephemeralPorts) {
        self.ephemeralPorts = try container.decode(EndpointRangeDescriptionData?.self, forKey: .ephemeralPorts)
    }
    self.isPrimary = try container.decode(Bool.self, forKey: .isPrimary)
    self.vmInstanceCount = try container.decode(Int32.self, forKey: .vmInstanceCount)
    if container.contains(.reverseProxyEndpointPort) {
        self.reverseProxyEndpointPort = try container.decode(Int32?.self, forKey: .reverseProxyEndpointPort)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.name, forKey: .name)
    if self.placementProperties != nil {try container.encode(self.placementProperties, forKey: .placementProperties)}
    if self.capacities != nil {try container.encode(self.capacities, forKey: .capacities)}
    try container.encode(self.clientConnectionEndpointPort, forKey: .clientConnectionEndpointPort)
    try container.encode(self.httpGatewayEndpointPort, forKey: .httpGatewayEndpointPort)
    if self.durabilityLevel != nil {try container.encode(self.durabilityLevel, forKey: .durabilityLevel)}
    if self.applicationPorts != nil {try container.encode(self.applicationPorts as! EndpointRangeDescriptionData?, forKey: .applicationPorts)}
    if self.ephemeralPorts != nil {try container.encode(self.ephemeralPorts as! EndpointRangeDescriptionData?, forKey: .ephemeralPorts)}
    try container.encode(self.isPrimary, forKey: .isPrimary)
    try container.encode(self.vmInstanceCount, forKey: .vmInstanceCount)
    if self.reverseProxyEndpointPort != nil {try container.encode(self.reverseProxyEndpointPort, forKey: .reverseProxyEndpointPort)}
  }
}

extension DataFactory {
  public static func createNodeTypeDescriptionProtocol(name: String, clientConnectionEndpointPort: Int32, httpGatewayEndpointPort: Int32, isPrimary: Bool, vmInstanceCount: Int32) -> NodeTypeDescriptionProtocol {
    return NodeTypeDescriptionData(name: name, clientConnectionEndpointPort: clientConnectionEndpointPort, httpGatewayEndpointPort: httpGatewayEndpointPort, isPrimary: isPrimary, vmInstanceCount: vmInstanceCount)
  }
}
