// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ServiceTypeHealthPolicyData : ServiceTypeHealthPolicyProtocol {
    public var maxPercentUnhealthyPartitionsPerService: Int32?
    public var maxPercentUnhealthyReplicasPerPartition: Int32?
    public var maxPercentUnhealthyServices: Int32?

        enum CodingKeys: String, CodingKey {case maxPercentUnhealthyPartitionsPerService = "MaxPercentUnhealthyPartitionsPerService"
        case maxPercentUnhealthyReplicasPerPartition = "MaxPercentUnhealthyReplicasPerPartition"
        case maxPercentUnhealthyServices = "MaxPercentUnhealthyServices"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.maxPercentUnhealthyPartitionsPerService) {
        self.maxPercentUnhealthyPartitionsPerService = try container.decode(Int32?.self, forKey: .maxPercentUnhealthyPartitionsPerService)
    }
    if container.contains(.maxPercentUnhealthyReplicasPerPartition) {
        self.maxPercentUnhealthyReplicasPerPartition = try container.decode(Int32?.self, forKey: .maxPercentUnhealthyReplicasPerPartition)
    }
    if container.contains(.maxPercentUnhealthyServices) {
        self.maxPercentUnhealthyServices = try container.decode(Int32?.self, forKey: .maxPercentUnhealthyServices)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.maxPercentUnhealthyPartitionsPerService != nil {try container.encode(self.maxPercentUnhealthyPartitionsPerService, forKey: .maxPercentUnhealthyPartitionsPerService)}
    if self.maxPercentUnhealthyReplicasPerPartition != nil {try container.encode(self.maxPercentUnhealthyReplicasPerPartition, forKey: .maxPercentUnhealthyReplicasPerPartition)}
    if self.maxPercentUnhealthyServices != nil {try container.encode(self.maxPercentUnhealthyServices, forKey: .maxPercentUnhealthyServices)}
  }
}

extension DataFactory {
  public static func createServiceTypeHealthPolicyProtocol() -> ServiceTypeHealthPolicyProtocol {
    return ServiceTypeHealthPolicyData()
  }
}
