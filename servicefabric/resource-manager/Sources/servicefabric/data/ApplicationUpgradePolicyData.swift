// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationUpgradePolicyData : ApplicationUpgradePolicyProtocol {
    public var upgradeReplicaSetCheckTimeout: Int64?
    public var forceRestart: Bool?
    public var rollingUpgradeMonitoringPolicy: RollingUpgradeMonitoringPolicyProtocol?
    public var applicationHealthPolicy: ApplicationHealthPolicyProtocol?

        enum CodingKeys: String, CodingKey {case upgradeReplicaSetCheckTimeout = "upgradeReplicaSetCheckTimeout"
        case forceRestart = "forceRestart"
        case rollingUpgradeMonitoringPolicy = "rollingUpgradeMonitoringPolicy"
        case applicationHealthPolicy = "applicationHealthPolicy"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.upgradeReplicaSetCheckTimeout) {
        self.upgradeReplicaSetCheckTimeout = try container.decode(Int64?.self, forKey: .upgradeReplicaSetCheckTimeout)
    }
    if container.contains(.forceRestart) {
        self.forceRestart = try container.decode(Bool?.self, forKey: .forceRestart)
    }
    if container.contains(.rollingUpgradeMonitoringPolicy) {
        self.rollingUpgradeMonitoringPolicy = try container.decode(RollingUpgradeMonitoringPolicyData?.self, forKey: .rollingUpgradeMonitoringPolicy)
    }
    if container.contains(.applicationHealthPolicy) {
        self.applicationHealthPolicy = try container.decode(ApplicationHealthPolicyData?.self, forKey: .applicationHealthPolicy)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.upgradeReplicaSetCheckTimeout != nil {try container.encode(self.upgradeReplicaSetCheckTimeout, forKey: .upgradeReplicaSetCheckTimeout)}
    if self.forceRestart != nil {try container.encode(self.forceRestart, forKey: .forceRestart)}
    if self.rollingUpgradeMonitoringPolicy != nil {try container.encode(self.rollingUpgradeMonitoringPolicy as! RollingUpgradeMonitoringPolicyData?, forKey: .rollingUpgradeMonitoringPolicy)}
    if self.applicationHealthPolicy != nil {try container.encode(self.applicationHealthPolicy as! ApplicationHealthPolicyData?, forKey: .applicationHealthPolicy)}
  }
}

extension DataFactory {
  public static func createApplicationUpgradePolicyProtocol() -> ApplicationUpgradePolicyProtocol {
    return ApplicationUpgradePolicyData()
  }
}
