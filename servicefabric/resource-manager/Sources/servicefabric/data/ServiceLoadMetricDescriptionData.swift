// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ServiceLoadMetricDescriptionData : ServiceLoadMetricDescriptionProtocol {
    public var name: String
    public var weight: WeightEnum?
    public var primaryDefaultLoad: Int32?
    public var secondaryDefaultLoad: Int32?
    public var defaultLoad: Int32?

        enum CodingKeys: String, CodingKey {case name = "Name"
        case weight = "Weight"
        case primaryDefaultLoad = "PrimaryDefaultLoad"
        case secondaryDefaultLoad = "SecondaryDefaultLoad"
        case defaultLoad = "DefaultLoad"
        }

  public init(name: String)  {
    self.name = name
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.name = try container.decode(String.self, forKey: .name)
    if container.contains(.weight) {
        self.weight = try container.decode(WeightEnum?.self, forKey: .weight)
    }
    if container.contains(.primaryDefaultLoad) {
        self.primaryDefaultLoad = try container.decode(Int32?.self, forKey: .primaryDefaultLoad)
    }
    if container.contains(.secondaryDefaultLoad) {
        self.secondaryDefaultLoad = try container.decode(Int32?.self, forKey: .secondaryDefaultLoad)
    }
    if container.contains(.defaultLoad) {
        self.defaultLoad = try container.decode(Int32?.self, forKey: .defaultLoad)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.name, forKey: .name)
    if self.weight != nil {try container.encode(self.weight, forKey: .weight)}
    if self.primaryDefaultLoad != nil {try container.encode(self.primaryDefaultLoad, forKey: .primaryDefaultLoad)}
    if self.secondaryDefaultLoad != nil {try container.encode(self.secondaryDefaultLoad, forKey: .secondaryDefaultLoad)}
    if self.defaultLoad != nil {try container.encode(self.defaultLoad, forKey: .defaultLoad)}
  }
}

extension DataFactory {
  public static func createServiceLoadMetricDescriptionProtocol(name: String) -> ServiceLoadMetricDescriptionProtocol {
    return ServiceLoadMetricDescriptionData(name: name)
  }
}
