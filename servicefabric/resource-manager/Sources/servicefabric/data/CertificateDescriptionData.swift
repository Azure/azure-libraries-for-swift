// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CertificateDescriptionData : CertificateDescriptionProtocol {
    public var thumbprint: String
    public var thumbprintSecondary: String?
    public var x509StoreName: X509StoreNameEnum?

        enum CodingKeys: String, CodingKey {case thumbprint = "thumbprint"
        case thumbprintSecondary = "thumbprintSecondary"
        case x509StoreName = "x509StoreName"
        }

  public init(thumbprint: String)  {
    self.thumbprint = thumbprint
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.thumbprint = try container.decode(String.self, forKey: .thumbprint)
    if container.contains(.thumbprintSecondary) {
        self.thumbprintSecondary = try container.decode(String?.self, forKey: .thumbprintSecondary)
    }
    if container.contains(.x509StoreName) {
        self.x509StoreName = try container.decode(X509StoreNameEnum?.self, forKey: .x509StoreName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.thumbprint, forKey: .thumbprint)
    if self.thumbprintSecondary != nil {try container.encode(self.thumbprintSecondary, forKey: .thumbprintSecondary)}
    if self.x509StoreName != nil {try container.encode(self.x509StoreName, forKey: .x509StoreName)}
  }
}

extension DataFactory {
  public static func createCertificateDescriptionProtocol(thumbprint: String) -> CertificateDescriptionProtocol {
    return CertificateDescriptionData(thumbprint: thumbprint)
  }
}
