// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VersionPropertiesData : VersionPropertiesProtocol {
    public var provisioningState: String?
    public var appPackageUrl: String
    public var defaultParameterList: [ApplicationParameterProtocol?]?

        enum CodingKeys: String, CodingKey {case provisioningState = "provisioningState"
        case appPackageUrl = "appPackageUrl"
        case defaultParameterList = "defaultParameterList"
        }

  public init(appPackageUrl: String)  {
    self.appPackageUrl = appPackageUrl
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    self.appPackageUrl = try container.decode(String.self, forKey: .appPackageUrl)
    if container.contains(.defaultParameterList) {
        self.defaultParameterList = try container.decode([ApplicationParameterData?]?.self, forKey: .defaultParameterList)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    try container.encode(self.appPackageUrl, forKey: .appPackageUrl)
    if self.defaultParameterList != nil {try container.encode(self.defaultParameterList as! [ApplicationParameterData?]?, forKey: .defaultParameterList)}
  }
}

extension DataFactory {
  public static func createVersionPropertiesProtocol(appPackageUrl: String) -> VersionPropertiesProtocol {
    return VersionPropertiesData(appPackageUrl: appPackageUrl)
  }
}
