// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RollingUpgradeMonitoringPolicyData : RollingUpgradeMonitoringPolicyProtocol {
    public var healthCheckWaitDuration: String?
    public var healthCheckStableDuration: String?
    public var healthCheckRetryTimeout: String?
    public var upgradeTimeout: String?
    public var upgradeDomainTimeout: String?

        enum CodingKeys: String, CodingKey {case healthCheckWaitDuration = "healthCheckWaitDuration"
        case healthCheckStableDuration = "healthCheckStableDuration"
        case healthCheckRetryTimeout = "healthCheckRetryTimeout"
        case upgradeTimeout = "upgradeTimeout"
        case upgradeDomainTimeout = "upgradeDomainTimeout"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.healthCheckWaitDuration) {
        self.healthCheckWaitDuration = try container.decode(String?.self, forKey: .healthCheckWaitDuration)
    }
    if container.contains(.healthCheckStableDuration) {
        self.healthCheckStableDuration = try container.decode(String?.self, forKey: .healthCheckStableDuration)
    }
    if container.contains(.healthCheckRetryTimeout) {
        self.healthCheckRetryTimeout = try container.decode(String?.self, forKey: .healthCheckRetryTimeout)
    }
    if container.contains(.upgradeTimeout) {
        self.upgradeTimeout = try container.decode(String?.self, forKey: .upgradeTimeout)
    }
    if container.contains(.upgradeDomainTimeout) {
        self.upgradeDomainTimeout = try container.decode(String?.self, forKey: .upgradeDomainTimeout)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.healthCheckWaitDuration != nil {try container.encode(self.healthCheckWaitDuration, forKey: .healthCheckWaitDuration)}
    if self.healthCheckStableDuration != nil {try container.encode(self.healthCheckStableDuration, forKey: .healthCheckStableDuration)}
    if self.healthCheckRetryTimeout != nil {try container.encode(self.healthCheckRetryTimeout, forKey: .healthCheckRetryTimeout)}
    if self.upgradeTimeout != nil {try container.encode(self.upgradeTimeout, forKey: .upgradeTimeout)}
    if self.upgradeDomainTimeout != nil {try container.encode(self.upgradeDomainTimeout, forKey: .upgradeDomainTimeout)}
  }
}

extension DataFactory {
  public static func createRollingUpgradeMonitoringPolicyProtocol() -> RollingUpgradeMonitoringPolicyProtocol {
    return RollingUpgradeMonitoringPolicyData()
  }
}
