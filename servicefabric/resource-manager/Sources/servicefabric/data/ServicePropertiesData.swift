// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ServicePropertiesData : ServicePropertiesProtocol, ServicePropertiesBaseProtocol {
    public var placementConstraints: String?
    public var correlationScheme: [ServiceCorrelationDescriptionProtocol?]?
    public var serviceLoadMetrics: [ServiceLoadMetricDescriptionProtocol?]?
    public var servicePlacementPolicies: [ServicePlacementPolicyDescriptionProtocol?]?
    public var defaultMoveCost: DefaultMoveCostEnum?
    public var provisioningState: String?
    public var serviceTypeName: String?
    public var partitionDescription: PartitionSchemeDescriptionProtocol?

        enum CodingKeys: String, CodingKey {case placementConstraints = "placementConstraints"
        case correlationScheme = "correlationScheme"
        case serviceLoadMetrics = "serviceLoadMetrics"
        case servicePlacementPolicies = "servicePlacementPolicies"
        case defaultMoveCost = "defaultMoveCost"
        case provisioningState = "provisioningState"
        case serviceTypeName = "serviceTypeName"
        case partitionDescription = "partitionDescription"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.placementConstraints) {
        self.placementConstraints = try container.decode(String?.self, forKey: .placementConstraints)
    }
    if container.contains(.correlationScheme) {
        self.correlationScheme = try container.decode([ServiceCorrelationDescriptionData?]?.self, forKey: .correlationScheme)
    }
    if container.contains(.serviceLoadMetrics) {
        self.serviceLoadMetrics = try container.decode([ServiceLoadMetricDescriptionData?]?.self, forKey: .serviceLoadMetrics)
    }
    if container.contains(.servicePlacementPolicies) {
        self.servicePlacementPolicies = try container.decode([ServicePlacementPolicyDescriptionData?]?.self, forKey: .servicePlacementPolicies)
    }
    if container.contains(.defaultMoveCost) {
        self.defaultMoveCost = try container.decode(DefaultMoveCostEnum?.self, forKey: .defaultMoveCost)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.serviceTypeName) {
        self.serviceTypeName = try container.decode(String?.self, forKey: .serviceTypeName)
    }
    if container.contains(.partitionDescription) {
        self.partitionDescription = try container.decode(PartitionSchemeDescriptionData?.self, forKey: .partitionDescription)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.placementConstraints != nil {try container.encode(self.placementConstraints, forKey: .placementConstraints)}
    if self.correlationScheme != nil {try container.encode(self.correlationScheme as! [ServiceCorrelationDescriptionData?]?, forKey: .correlationScheme)}
    if self.serviceLoadMetrics != nil {try container.encode(self.serviceLoadMetrics as! [ServiceLoadMetricDescriptionData?]?, forKey: .serviceLoadMetrics)}
    if self.servicePlacementPolicies != nil {try container.encode(self.servicePlacementPolicies as! [ServicePlacementPolicyDescriptionData?]?, forKey: .servicePlacementPolicies)}
    if self.defaultMoveCost != nil {try container.encode(self.defaultMoveCost, forKey: .defaultMoveCost)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.serviceTypeName != nil {try container.encode(self.serviceTypeName, forKey: .serviceTypeName)}
    if self.partitionDescription != nil {try container.encode(self.partitionDescription as! PartitionSchemeDescriptionData?, forKey: .partitionDescription)}
  }
}

extension DataFactory {
  public static func createServicePropertiesProtocol() -> ServicePropertiesProtocol {
    return ServicePropertiesData()
  }
}
