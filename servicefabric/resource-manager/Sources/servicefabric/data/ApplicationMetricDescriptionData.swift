// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationMetricDescriptionData : ApplicationMetricDescriptionProtocol {
    public var name: String?
    public var maximumCapacity: Int64?
    public var reservationCapacity: Int64?
    public var totalApplicationCapacity: Int64?

        enum CodingKeys: String, CodingKey {case name = "Name"
        case maximumCapacity = "MaximumCapacity"
        case reservationCapacity = "ReservationCapacity"
        case totalApplicationCapacity = "TotalApplicationCapacity"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.maximumCapacity) {
        self.maximumCapacity = try container.decode(Int64?.self, forKey: .maximumCapacity)
    }
    if container.contains(.reservationCapacity) {
        self.reservationCapacity = try container.decode(Int64?.self, forKey: .reservationCapacity)
    }
    if container.contains(.totalApplicationCapacity) {
        self.totalApplicationCapacity = try container.decode(Int64?.self, forKey: .totalApplicationCapacity)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.maximumCapacity != nil {try container.encode(self.maximumCapacity, forKey: .maximumCapacity)}
    if self.reservationCapacity != nil {try container.encode(self.reservationCapacity, forKey: .reservationCapacity)}
    if self.totalApplicationCapacity != nil {try container.encode(self.totalApplicationCapacity, forKey: .totalApplicationCapacity)}
  }
}

extension DataFactory {
  public static func createApplicationMetricDescriptionProtocol() -> ApplicationMetricDescriptionProtocol {
    return ApplicationMetricDescriptionData()
  }
}
