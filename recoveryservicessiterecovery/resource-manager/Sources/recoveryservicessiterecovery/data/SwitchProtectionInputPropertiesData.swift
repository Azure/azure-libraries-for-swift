// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SwitchProtectionInputPropertiesData : SwitchProtectionInputPropertiesProtocol {
    public var replicationProtectedItemName: String?
    public var providerSpecificDetails: SwitchProtectionProviderSpecificInputProtocol?

        enum CodingKeys: String, CodingKey {case replicationProtectedItemName = "replicationProtectedItemName"
        case providerSpecificDetails = "providerSpecificDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.replicationProtectedItemName) {
        self.replicationProtectedItemName = try container.decode(String?.self, forKey: .replicationProtectedItemName)
    }
    if container.contains(.providerSpecificDetails) {
        self.providerSpecificDetails = try container.decode(SwitchProtectionProviderSpecificInputData?.self, forKey: .providerSpecificDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.replicationProtectedItemName != nil {try container.encode(self.replicationProtectedItemName, forKey: .replicationProtectedItemName)}
    if self.providerSpecificDetails != nil {try container.encode(self.providerSpecificDetails as! SwitchProtectionProviderSpecificInputData?, forKey: .providerSpecificDetails)}
  }
}

extension DataFactory {
  public static func createSwitchProtectionInputPropertiesProtocol() -> SwitchProtectionInputPropertiesProtocol {
    return SwitchProtectionInputPropertiesData()
  }
}
