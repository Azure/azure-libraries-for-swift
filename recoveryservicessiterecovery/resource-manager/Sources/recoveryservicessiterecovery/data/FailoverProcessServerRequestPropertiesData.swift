// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FailoverProcessServerRequestPropertiesData : FailoverProcessServerRequestPropertiesProtocol {
    public var containerName: String?
    public var sourceProcessServerId: String?
    public var targetProcessServerId: String?
    public var vmsToMigrate: [String]?
    public var updateType: String?

        enum CodingKeys: String, CodingKey {case containerName = "containerName"
        case sourceProcessServerId = "sourceProcessServerId"
        case targetProcessServerId = "targetProcessServerId"
        case vmsToMigrate = "vmsToMigrate"
        case updateType = "updateType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.containerName) {
        self.containerName = try container.decode(String?.self, forKey: .containerName)
    }
    if container.contains(.sourceProcessServerId) {
        self.sourceProcessServerId = try container.decode(String?.self, forKey: .sourceProcessServerId)
    }
    if container.contains(.targetProcessServerId) {
        self.targetProcessServerId = try container.decode(String?.self, forKey: .targetProcessServerId)
    }
    if container.contains(.vmsToMigrate) {
        self.vmsToMigrate = try container.decode([String]?.self, forKey: .vmsToMigrate)
    }
    if container.contains(.updateType) {
        self.updateType = try container.decode(String?.self, forKey: .updateType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.containerName != nil {try container.encode(self.containerName, forKey: .containerName)}
    if self.sourceProcessServerId != nil {try container.encode(self.sourceProcessServerId, forKey: .sourceProcessServerId)}
    if self.targetProcessServerId != nil {try container.encode(self.targetProcessServerId, forKey: .targetProcessServerId)}
    if self.vmsToMigrate != nil {try container.encode(self.vmsToMigrate as! [String]?, forKey: .vmsToMigrate)}
    if self.updateType != nil {try container.encode(self.updateType, forKey: .updateType)}
  }
}

extension DataFactory {
  public static func createFailoverProcessServerRequestPropertiesProtocol() -> FailoverProcessServerRequestPropertiesProtocol {
    return FailoverProcessServerRequestPropertiesData()
  }
}
