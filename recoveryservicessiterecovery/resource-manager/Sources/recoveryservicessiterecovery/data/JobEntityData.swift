// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobEntityData : JobEntityProtocol {
    public var jobId: String?
    public var jobFriendlyName: String?
    public var targetObjectId: String?
    public var targetObjectName: String?
    public var targetInstanceType: String?
    public var jobScenarioName: String?

        enum CodingKeys: String, CodingKey {case jobId = "jobId"
        case jobFriendlyName = "jobFriendlyName"
        case targetObjectId = "targetObjectId"
        case targetObjectName = "targetObjectName"
        case targetInstanceType = "targetInstanceType"
        case jobScenarioName = "jobScenarioName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.jobId) {
        self.jobId = try container.decode(String?.self, forKey: .jobId)
    }
    if container.contains(.jobFriendlyName) {
        self.jobFriendlyName = try container.decode(String?.self, forKey: .jobFriendlyName)
    }
    if container.contains(.targetObjectId) {
        self.targetObjectId = try container.decode(String?.self, forKey: .targetObjectId)
    }
    if container.contains(.targetObjectName) {
        self.targetObjectName = try container.decode(String?.self, forKey: .targetObjectName)
    }
    if container.contains(.targetInstanceType) {
        self.targetInstanceType = try container.decode(String?.self, forKey: .targetInstanceType)
    }
    if container.contains(.jobScenarioName) {
        self.jobScenarioName = try container.decode(String?.self, forKey: .jobScenarioName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.jobId != nil {try container.encode(self.jobId, forKey: .jobId)}
    if self.jobFriendlyName != nil {try container.encode(self.jobFriendlyName, forKey: .jobFriendlyName)}
    if self.targetObjectId != nil {try container.encode(self.targetObjectId, forKey: .targetObjectId)}
    if self.targetObjectName != nil {try container.encode(self.targetObjectName, forKey: .targetObjectName)}
    if self.targetInstanceType != nil {try container.encode(self.targetInstanceType, forKey: .targetInstanceType)}
    if self.jobScenarioName != nil {try container.encode(self.jobScenarioName, forKey: .jobScenarioName)}
  }
}

extension DataFactory {
  public static func createJobEntityProtocol() -> JobEntityProtocol {
    return JobEntityData()
  }
}
