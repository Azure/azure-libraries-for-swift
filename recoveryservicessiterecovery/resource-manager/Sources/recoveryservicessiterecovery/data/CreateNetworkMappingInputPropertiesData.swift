// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CreateNetworkMappingInputPropertiesData : CreateNetworkMappingInputPropertiesProtocol {
    public var recoveryFabricName: String?
    public var recoveryNetworkId: String?
    public var fabricSpecificDetails: FabricSpecificCreateNetworkMappingInputProtocol?

        enum CodingKeys: String, CodingKey {case recoveryFabricName = "recoveryFabricName"
        case recoveryNetworkId = "recoveryNetworkId"
        case fabricSpecificDetails = "fabricSpecificDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.recoveryFabricName) {
        self.recoveryFabricName = try container.decode(String?.self, forKey: .recoveryFabricName)
    }
    if container.contains(.recoveryNetworkId) {
        self.recoveryNetworkId = try container.decode(String?.self, forKey: .recoveryNetworkId)
    }
    if container.contains(.fabricSpecificDetails) {
        self.fabricSpecificDetails = try container.decode(FabricSpecificCreateNetworkMappingInputData?.self, forKey: .fabricSpecificDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.recoveryFabricName != nil {try container.encode(self.recoveryFabricName, forKey: .recoveryFabricName)}
    if self.recoveryNetworkId != nil {try container.encode(self.recoveryNetworkId, forKey: .recoveryNetworkId)}
    if self.fabricSpecificDetails != nil {try container.encode(self.fabricSpecificDetails as! FabricSpecificCreateNetworkMappingInputData?, forKey: .fabricSpecificDetails)}
  }
}

extension DataFactory {
  public static func createCreateNetworkMappingInputPropertiesProtocol() -> CreateNetworkMappingInputPropertiesProtocol {
    return CreateNetworkMappingInputPropertiesData()
  }
}
