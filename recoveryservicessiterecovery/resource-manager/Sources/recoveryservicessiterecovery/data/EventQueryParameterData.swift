// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EventQueryParameterData : EventQueryParameterProtocol {
    public var eventCode: String?
    public var severity: String?
    public var eventType: String?
    public var fabricName: String?
    public var affectedObjectFriendlyName: String?
    public var startTime: Date?
    public var endTime: Date?

        enum CodingKeys: String, CodingKey {case eventCode = "EventCode"
        case severity = "Severity"
        case eventType = "EventType"
        case fabricName = "FabricName"
        case affectedObjectFriendlyName = "AffectedObjectFriendlyName"
        case startTime = "StartTime"
        case endTime = "EndTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.eventCode) {
        self.eventCode = try container.decode(String?.self, forKey: .eventCode)
    }
    if container.contains(.severity) {
        self.severity = try container.decode(String?.self, forKey: .severity)
    }
    if container.contains(.eventType) {
        self.eventType = try container.decode(String?.self, forKey: .eventType)
    }
    if container.contains(.fabricName) {
        self.fabricName = try container.decode(String?.self, forKey: .fabricName)
    }
    if container.contains(.affectedObjectFriendlyName) {
        self.affectedObjectFriendlyName = try container.decode(String?.self, forKey: .affectedObjectFriendlyName)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.eventCode != nil {try container.encode(self.eventCode, forKey: .eventCode)}
    if self.severity != nil {try container.encode(self.severity, forKey: .severity)}
    if self.eventType != nil {try container.encode(self.eventType, forKey: .eventType)}
    if self.fabricName != nil {try container.encode(self.fabricName, forKey: .fabricName)}
    if self.affectedObjectFriendlyName != nil {try container.encode(self.affectedObjectFriendlyName, forKey: .affectedObjectFriendlyName)}
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
  }
}

extension DataFactory {
  public static func createEventQueryParameterProtocol() -> EventQueryParameterProtocol {
    return EventQueryParameterData()
  }
}
