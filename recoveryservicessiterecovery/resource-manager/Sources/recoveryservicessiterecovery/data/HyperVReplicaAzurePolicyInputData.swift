// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct HyperVReplicaAzurePolicyInputData : HyperVReplicaAzurePolicyInputProtocol, PolicyProviderSpecificInputProtocol {
    public var recoveryPointHistoryDuration: Int32?
    public var applicationConsistentSnapshotFrequencyInHours: Int32?
    public var replicationInterval: Int32?
    public var onlineReplicationStartTime: String?
    public var storageAccounts: [String]?

        enum CodingKeys: String, CodingKey {case recoveryPointHistoryDuration = "recoveryPointHistoryDuration"
        case applicationConsistentSnapshotFrequencyInHours = "applicationConsistentSnapshotFrequencyInHours"
        case replicationInterval = "replicationInterval"
        case onlineReplicationStartTime = "onlineReplicationStartTime"
        case storageAccounts = "storageAccounts"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.recoveryPointHistoryDuration) {
        self.recoveryPointHistoryDuration = try container.decode(Int32?.self, forKey: .recoveryPointHistoryDuration)
    }
    if container.contains(.applicationConsistentSnapshotFrequencyInHours) {
        self.applicationConsistentSnapshotFrequencyInHours = try container.decode(Int32?.self, forKey: .applicationConsistentSnapshotFrequencyInHours)
    }
    if container.contains(.replicationInterval) {
        self.replicationInterval = try container.decode(Int32?.self, forKey: .replicationInterval)
    }
    if container.contains(.onlineReplicationStartTime) {
        self.onlineReplicationStartTime = try container.decode(String?.self, forKey: .onlineReplicationStartTime)
    }
    if container.contains(.storageAccounts) {
        self.storageAccounts = try container.decode([String]?.self, forKey: .storageAccounts)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.recoveryPointHistoryDuration != nil {try container.encode(self.recoveryPointHistoryDuration, forKey: .recoveryPointHistoryDuration)}
    if self.applicationConsistentSnapshotFrequencyInHours != nil {try container.encode(self.applicationConsistentSnapshotFrequencyInHours, forKey: .applicationConsistentSnapshotFrequencyInHours)}
    if self.replicationInterval != nil {try container.encode(self.replicationInterval, forKey: .replicationInterval)}
    if self.onlineReplicationStartTime != nil {try container.encode(self.onlineReplicationStartTime, forKey: .onlineReplicationStartTime)}
    if self.storageAccounts != nil {try container.encode(self.storageAccounts as! [String]?, forKey: .storageAccounts)}
  }
}

extension DataFactory {
  public static func createHyperVReplicaAzurePolicyInputProtocol() -> HyperVReplicaAzurePolicyInputProtocol {
    return HyperVReplicaAzurePolicyInputData()
  }
}
