// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct A2AUpdateReplicationProtectedItemInputData : A2AUpdateReplicationProtectedItemInputProtocol, UpdateReplicationProtectedItemProviderInputProtocol {
    public var recoveryCloudServiceId: String?
    public var recoveryResourceGroupId: String?
    public var managedDiskUpdateDetails: [A2AVmManagedDiskUpdateDetailsProtocol?]?
    public var recoveryBootDiagStorageAccountId: String?

        enum CodingKeys: String, CodingKey {case recoveryCloudServiceId = "recoveryCloudServiceId"
        case recoveryResourceGroupId = "recoveryResourceGroupId"
        case managedDiskUpdateDetails = "managedDiskUpdateDetails"
        case recoveryBootDiagStorageAccountId = "recoveryBootDiagStorageAccountId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.recoveryCloudServiceId) {
        self.recoveryCloudServiceId = try container.decode(String?.self, forKey: .recoveryCloudServiceId)
    }
    if container.contains(.recoveryResourceGroupId) {
        self.recoveryResourceGroupId = try container.decode(String?.self, forKey: .recoveryResourceGroupId)
    }
    if container.contains(.managedDiskUpdateDetails) {
        self.managedDiskUpdateDetails = try container.decode([A2AVmManagedDiskUpdateDetailsData?]?.self, forKey: .managedDiskUpdateDetails)
    }
    if container.contains(.recoveryBootDiagStorageAccountId) {
        self.recoveryBootDiagStorageAccountId = try container.decode(String?.self, forKey: .recoveryBootDiagStorageAccountId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.recoveryCloudServiceId != nil {try container.encode(self.recoveryCloudServiceId, forKey: .recoveryCloudServiceId)}
    if self.recoveryResourceGroupId != nil {try container.encode(self.recoveryResourceGroupId, forKey: .recoveryResourceGroupId)}
    if self.managedDiskUpdateDetails != nil {try container.encode(self.managedDiskUpdateDetails as! [A2AVmManagedDiskUpdateDetailsData?]?, forKey: .managedDiskUpdateDetails)}
    if self.recoveryBootDiagStorageAccountId != nil {try container.encode(self.recoveryBootDiagStorageAccountId, forKey: .recoveryBootDiagStorageAccountId)}
  }
}

extension DataFactory {
  public static func createA2AUpdateReplicationProtectedItemInputProtocol() -> A2AUpdateReplicationProtectedItemInputProtocol {
    return A2AUpdateReplicationProtectedItemInputData()
  }
}
