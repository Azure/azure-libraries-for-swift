// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InMageAzureV2ReprotectInputData : InMageAzureV2ReprotectInputProtocol, ReverseReplicationProviderSpecificInputProtocol {
    public var masterTargetId: String?
    public var processServerId: String?
    public var storageAccountId: String?
    public var runAsAccountId: String?
    public var policyId: String?
    public var logStorageAccountId: String?
    public var disksToInclude: [String]?

        enum CodingKeys: String, CodingKey {case masterTargetId = "masterTargetId"
        case processServerId = "processServerId"
        case storageAccountId = "storageAccountId"
        case runAsAccountId = "runAsAccountId"
        case policyId = "policyId"
        case logStorageAccountId = "logStorageAccountId"
        case disksToInclude = "disksToInclude"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.masterTargetId) {
        self.masterTargetId = try container.decode(String?.self, forKey: .masterTargetId)
    }
    if container.contains(.processServerId) {
        self.processServerId = try container.decode(String?.self, forKey: .processServerId)
    }
    if container.contains(.storageAccountId) {
        self.storageAccountId = try container.decode(String?.self, forKey: .storageAccountId)
    }
    if container.contains(.runAsAccountId) {
        self.runAsAccountId = try container.decode(String?.self, forKey: .runAsAccountId)
    }
    if container.contains(.policyId) {
        self.policyId = try container.decode(String?.self, forKey: .policyId)
    }
    if container.contains(.logStorageAccountId) {
        self.logStorageAccountId = try container.decode(String?.self, forKey: .logStorageAccountId)
    }
    if container.contains(.disksToInclude) {
        self.disksToInclude = try container.decode([String]?.self, forKey: .disksToInclude)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.masterTargetId != nil {try container.encode(self.masterTargetId, forKey: .masterTargetId)}
    if self.processServerId != nil {try container.encode(self.processServerId, forKey: .processServerId)}
    if self.storageAccountId != nil {try container.encode(self.storageAccountId, forKey: .storageAccountId)}
    if self.runAsAccountId != nil {try container.encode(self.runAsAccountId, forKey: .runAsAccountId)}
    if self.policyId != nil {try container.encode(self.policyId, forKey: .policyId)}
    if self.logStorageAccountId != nil {try container.encode(self.logStorageAccountId, forKey: .logStorageAccountId)}
    if self.disksToInclude != nil {try container.encode(self.disksToInclude as! [String]?, forKey: .disksToInclude)}
  }
}

extension DataFactory {
  public static func createInMageAzureV2ReprotectInputProtocol() -> InMageAzureV2ReprotectInputProtocol {
    return InMageAzureV2ReprotectInputData()
  }
}
