// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VMwareV2FabricSpecificDetailsData : VMwareV2FabricSpecificDetailsProtocol, FabricSpecificDetailsProtocol {
    public var srsServiceEndpoint: String?
    public var rcmServiceEndpoint: String?
    public var keyVaultUrl: String?
    public var keyVaultResourceArmId: String?

        enum CodingKeys: String, CodingKey {case srsServiceEndpoint = "srsServiceEndpoint"
        case rcmServiceEndpoint = "rcmServiceEndpoint"
        case keyVaultUrl = "keyVaultUrl"
        case keyVaultResourceArmId = "keyVaultResourceArmId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.srsServiceEndpoint) {
        self.srsServiceEndpoint = try container.decode(String?.self, forKey: .srsServiceEndpoint)
    }
    if container.contains(.rcmServiceEndpoint) {
        self.rcmServiceEndpoint = try container.decode(String?.self, forKey: .rcmServiceEndpoint)
    }
    if container.contains(.keyVaultUrl) {
        self.keyVaultUrl = try container.decode(String?.self, forKey: .keyVaultUrl)
    }
    if container.contains(.keyVaultResourceArmId) {
        self.keyVaultResourceArmId = try container.decode(String?.self, forKey: .keyVaultResourceArmId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.srsServiceEndpoint != nil {try container.encode(self.srsServiceEndpoint, forKey: .srsServiceEndpoint)}
    if self.rcmServiceEndpoint != nil {try container.encode(self.rcmServiceEndpoint, forKey: .rcmServiceEndpoint)}
    if self.keyVaultUrl != nil {try container.encode(self.keyVaultUrl, forKey: .keyVaultUrl)}
    if self.keyVaultResourceArmId != nil {try container.encode(self.keyVaultResourceArmId, forKey: .keyVaultResourceArmId)}
  }
}

extension DataFactory {
  public static func createVMwareV2FabricSpecificDetailsProtocol() -> VMwareV2FabricSpecificDetailsProtocol {
    return VMwareV2FabricSpecificDetailsData()
  }
}
