// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InputEndpointData : InputEndpointProtocol {
    public var endpointName: String?
    public var privatePort: Int32?
    public var publicPort: Int32?
    public var _protocol: String?

        enum CodingKeys: String, CodingKey {case endpointName = "endpointName"
        case privatePort = "privatePort"
        case publicPort = "publicPort"
        case _protocol = "protocol"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.endpointName) {
        self.endpointName = try container.decode(String?.self, forKey: .endpointName)
    }
    if container.contains(.privatePort) {
        self.privatePort = try container.decode(Int32?.self, forKey: .privatePort)
    }
    if container.contains(.publicPort) {
        self.publicPort = try container.decode(Int32?.self, forKey: .publicPort)
    }
    if container.contains(._protocol) {
        self._protocol = try container.decode(String?.self, forKey: ._protocol)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.endpointName != nil {try container.encode(self.endpointName, forKey: .endpointName)}
    if self.privatePort != nil {try container.encode(self.privatePort, forKey: .privatePort)}
    if self.publicPort != nil {try container.encode(self.publicPort, forKey: .publicPort)}
    if self._protocol != nil {try container.encode(self._protocol, forKey: ._protocol)}
  }
}

extension DataFactory {
  public static func createInputEndpointProtocol() -> InputEndpointProtocol {
    return InputEndpointData()
  }
}
