// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobQueryParameterData : JobQueryParameterProtocol {
    public var startTime: String?
    public var endTime: String?
    public var fabricId: String?
    public var affectedObjectTypes: [String]?
    public var jobStatus: [String]?

        enum CodingKeys: String, CodingKey {case startTime = "startTime"
        case endTime = "endTime"
        case fabricId = "fabricId"
        case affectedObjectTypes = "affectedObjectTypes"
        case jobStatus = "jobStatus"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.startTime) {
        self.startTime = try container.decode(String?.self, forKey: .startTime)
    }
    if container.contains(.endTime) {
        self.endTime = try container.decode(String?.self, forKey: .endTime)
    }
    if container.contains(.fabricId) {
        self.fabricId = try container.decode(String?.self, forKey: .fabricId)
    }
    if container.contains(.affectedObjectTypes) {
        self.affectedObjectTypes = try container.decode([String]?.self, forKey: .affectedObjectTypes)
    }
    if container.contains(.jobStatus) {
        self.jobStatus = try container.decode([String]?.self, forKey: .jobStatus)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.startTime != nil {try container.encode(self.startTime, forKey: .startTime)}
    if self.endTime != nil {try container.encode(self.endTime, forKey: .endTime)}
    if self.fabricId != nil {try container.encode(self.fabricId, forKey: .fabricId)}
    if self.affectedObjectTypes != nil {try container.encode(self.affectedObjectTypes as! [String]?, forKey: .affectedObjectTypes)}
    if self.jobStatus != nil {try container.encode(self.jobStatus as! [String]?, forKey: .jobStatus)}
  }
}

extension DataFactory {
  public static func createJobQueryParameterProtocol() -> JobQueryParameterProtocol {
    return JobQueryParameterData()
  }
}
