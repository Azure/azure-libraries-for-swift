// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ProtectionContainerPropertiesData : ProtectionContainerPropertiesProtocol {
    public var fabricFriendlyName: String?
    public var friendlyName: String?
    public var fabricType: String?
    public var protectedItemCount: Int32?
    public var pairingStatus: String?
    public var role: String?
    public var fabricSpecificDetails: ProtectionContainerFabricSpecificDetailsProtocol?

        enum CodingKeys: String, CodingKey {case fabricFriendlyName = "fabricFriendlyName"
        case friendlyName = "friendlyName"
        case fabricType = "fabricType"
        case protectedItemCount = "protectedItemCount"
        case pairingStatus = "pairingStatus"
        case role = "role"
        case fabricSpecificDetails = "fabricSpecificDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.fabricFriendlyName) {
        self.fabricFriendlyName = try container.decode(String?.self, forKey: .fabricFriendlyName)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.fabricType) {
        self.fabricType = try container.decode(String?.self, forKey: .fabricType)
    }
    if container.contains(.protectedItemCount) {
        self.protectedItemCount = try container.decode(Int32?.self, forKey: .protectedItemCount)
    }
    if container.contains(.pairingStatus) {
        self.pairingStatus = try container.decode(String?.self, forKey: .pairingStatus)
    }
    if container.contains(.role) {
        self.role = try container.decode(String?.self, forKey: .role)
    }
    if container.contains(.fabricSpecificDetails) {
        self.fabricSpecificDetails = try container.decode(ProtectionContainerFabricSpecificDetailsData?.self, forKey: .fabricSpecificDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.fabricFriendlyName != nil {try container.encode(self.fabricFriendlyName, forKey: .fabricFriendlyName)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.fabricType != nil {try container.encode(self.fabricType, forKey: .fabricType)}
    if self.protectedItemCount != nil {try container.encode(self.protectedItemCount, forKey: .protectedItemCount)}
    if self.pairingStatus != nil {try container.encode(self.pairingStatus, forKey: .pairingStatus)}
    if self.role != nil {try container.encode(self.role, forKey: .role)}
    if self.fabricSpecificDetails != nil {try container.encode(self.fabricSpecificDetails as! ProtectionContainerFabricSpecificDetailsData?, forKey: .fabricSpecificDetails)}
  }
}

extension DataFactory {
  public static func createProtectionContainerPropertiesProtocol() -> ProtectionContainerPropertiesProtocol {
    return ProtectionContainerPropertiesData()
  }
}
