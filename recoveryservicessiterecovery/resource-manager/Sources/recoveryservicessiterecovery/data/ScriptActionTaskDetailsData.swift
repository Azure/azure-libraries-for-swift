// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ScriptActionTaskDetailsData : ScriptActionTaskDetailsProtocol, TaskTypeDetailsProtocol {
    public var name: String?
    public var path: String?
    public var output: String?
    public var isPrimarySideScript: Bool?

        enum CodingKeys: String, CodingKey {case name = "name"
        case path = "path"
        case output = "output"
        case isPrimarySideScript = "isPrimarySideScript"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.path) {
        self.path = try container.decode(String?.self, forKey: .path)
    }
    if container.contains(.output) {
        self.output = try container.decode(String?.self, forKey: .output)
    }
    if container.contains(.isPrimarySideScript) {
        self.isPrimarySideScript = try container.decode(Bool?.self, forKey: .isPrimarySideScript)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.path != nil {try container.encode(self.path, forKey: .path)}
    if self.output != nil {try container.encode(self.output, forKey: .output)}
    if self.isPrimarySideScript != nil {try container.encode(self.isPrimarySideScript, forKey: .isPrimarySideScript)}
  }
}

extension DataFactory {
  public static func createScriptActionTaskDetailsProtocol() -> ScriptActionTaskDetailsProtocol {
    return ScriptActionTaskDetailsData()
  }
}
