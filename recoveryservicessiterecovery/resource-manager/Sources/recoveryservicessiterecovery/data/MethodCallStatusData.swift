// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MethodCallStatusData : MethodCallStatusProtocol {
    public var isVirtual: String?
    public var parameters: [String]?
    public var containsGenericParameters: String?

        enum CodingKeys: String, CodingKey {case isVirtual = "isVirtual"
        case parameters = "parameters"
        case containsGenericParameters = "containsGenericParameters"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.isVirtual) {
        self.isVirtual = try container.decode(String?.self, forKey: .isVirtual)
    }
    if container.contains(.parameters) {
        self.parameters = try container.decode([String]?.self, forKey: .parameters)
    }
    if container.contains(.containsGenericParameters) {
        self.containsGenericParameters = try container.decode(String?.self, forKey: .containsGenericParameters)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.isVirtual != nil {try container.encode(self.isVirtual, forKey: .isVirtual)}
    if self.parameters != nil {try container.encode(self.parameters as! [String]?, forKey: .parameters)}
    if self.containsGenericParameters != nil {try container.encode(self.containsGenericParameters, forKey: .containsGenericParameters)}
  }
}

extension DataFactory {
  public static func createMethodCallStatusProtocol() -> MethodCallStatusProtocol {
    return MethodCallStatusData()
  }
}
