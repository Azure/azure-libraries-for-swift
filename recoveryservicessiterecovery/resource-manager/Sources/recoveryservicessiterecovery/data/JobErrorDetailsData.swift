// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct JobErrorDetailsData : JobErrorDetailsProtocol {
    public var serviceErrorDetails: ServiceErrorProtocol?
    public var providerErrorDetails: ProviderErrorProtocol?
    public var errorLevel: String?
    public var creationTime: Date?
    public var taskId: String?

        enum CodingKeys: String, CodingKey {case serviceErrorDetails = "serviceErrorDetails"
        case providerErrorDetails = "providerErrorDetails"
        case errorLevel = "errorLevel"
        case creationTime = "creationTime"
        case taskId = "taskId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.serviceErrorDetails) {
        self.serviceErrorDetails = try container.decode(ServiceErrorData?.self, forKey: .serviceErrorDetails)
    }
    if container.contains(.providerErrorDetails) {
        self.providerErrorDetails = try container.decode(ProviderErrorData?.self, forKey: .providerErrorDetails)
    }
    if container.contains(.errorLevel) {
        self.errorLevel = try container.decode(String?.self, forKey: .errorLevel)
    }
    if container.contains(.creationTime) {
        self.creationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationTime)), format: .dateTime)
    }
    if container.contains(.taskId) {
        self.taskId = try container.decode(String?.self, forKey: .taskId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.serviceErrorDetails != nil {try container.encode(self.serviceErrorDetails as! ServiceErrorData?, forKey: .serviceErrorDetails)}
    if self.providerErrorDetails != nil {try container.encode(self.providerErrorDetails as! ProviderErrorData?, forKey: .providerErrorDetails)}
    if self.errorLevel != nil {try container.encode(self.errorLevel, forKey: .errorLevel)}
    if self.creationTime != nil {
        try container.encode(DateConverter.toString(date: self.creationTime!, format: .dateTime), forKey: .creationTime)
    }
    if self.taskId != nil {try container.encode(self.taskId, forKey: .taskId)}
  }
}

extension DataFactory {
  public static func createJobErrorDetailsProtocol() -> JobErrorDetailsProtocol {
    return JobErrorDetailsData()
  }
}
