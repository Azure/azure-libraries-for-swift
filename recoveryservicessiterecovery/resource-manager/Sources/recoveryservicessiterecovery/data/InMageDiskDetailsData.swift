// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InMageDiskDetailsData : InMageDiskDetailsProtocol {
    public var diskId: String?
    public var diskName: String?
    public var diskSizeInMB: String?
    public var diskType: String?
    public var diskConfiguration: String?
    public var volumeList: [DiskVolumeDetailsProtocol?]?

        enum CodingKeys: String, CodingKey {case diskId = "diskId"
        case diskName = "diskName"
        case diskSizeInMB = "diskSizeInMB"
        case diskType = "diskType"
        case diskConfiguration = "diskConfiguration"
        case volumeList = "volumeList"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.diskId) {
        self.diskId = try container.decode(String?.self, forKey: .diskId)
    }
    if container.contains(.diskName) {
        self.diskName = try container.decode(String?.self, forKey: .diskName)
    }
    if container.contains(.diskSizeInMB) {
        self.diskSizeInMB = try container.decode(String?.self, forKey: .diskSizeInMB)
    }
    if container.contains(.diskType) {
        self.diskType = try container.decode(String?.self, forKey: .diskType)
    }
    if container.contains(.diskConfiguration) {
        self.diskConfiguration = try container.decode(String?.self, forKey: .diskConfiguration)
    }
    if container.contains(.volumeList) {
        self.volumeList = try container.decode([DiskVolumeDetailsData?]?.self, forKey: .volumeList)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.diskId != nil {try container.encode(self.diskId, forKey: .diskId)}
    if self.diskName != nil {try container.encode(self.diskName, forKey: .diskName)}
    if self.diskSizeInMB != nil {try container.encode(self.diskSizeInMB, forKey: .diskSizeInMB)}
    if self.diskType != nil {try container.encode(self.diskType, forKey: .diskType)}
    if self.diskConfiguration != nil {try container.encode(self.diskConfiguration, forKey: .diskConfiguration)}
    if self.volumeList != nil {try container.encode(self.volumeList as! [DiskVolumeDetailsData?]?, forKey: .volumeList)}
  }
}

extension DataFactory {
  public static func createInMageDiskDetailsProtocol() -> InMageDiskDetailsProtocol {
    return InMageDiskDetailsData()
  }
}
