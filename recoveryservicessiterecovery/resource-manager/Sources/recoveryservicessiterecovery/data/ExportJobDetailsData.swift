// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ExportJobDetailsData : ExportJobDetailsProtocol, JobDetailsProtocol {
    public var affectedObjectDetails: [String:String]?
    public var blobUri: String?
    public var sasToken: String?

        enum CodingKeys: String, CodingKey {case affectedObjectDetails = "affectedObjectDetails"
        case blobUri = "blobUri"
        case sasToken = "sasToken"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.affectedObjectDetails) {
        self.affectedObjectDetails = try container.decode([String:String]?.self, forKey: .affectedObjectDetails)
    }
    if container.contains(.blobUri) {
        self.blobUri = try container.decode(String?.self, forKey: .blobUri)
    }
    if container.contains(.sasToken) {
        self.sasToken = try container.decode(String?.self, forKey: .sasToken)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.affectedObjectDetails != nil {try container.encode(self.affectedObjectDetails, forKey: .affectedObjectDetails)}
    if self.blobUri != nil {try container.encode(self.blobUri, forKey: .blobUri)}
    if self.sasToken != nil {try container.encode(self.sasToken, forKey: .sasToken)}
  }
}

extension DataFactory {
  public static func createExportJobDetailsProtocol() -> ExportJobDetailsProtocol {
    return ExportJobDetailsData()
  }
}
