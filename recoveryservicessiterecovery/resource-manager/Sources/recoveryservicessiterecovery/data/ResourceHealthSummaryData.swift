// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ResourceHealthSummaryData : ResourceHealthSummaryProtocol {
    public var resourceCount: Int32?
    public var issues: [HealthErrorSummaryProtocol?]?

        enum CodingKeys: String, CodingKey {case resourceCount = "resourceCount"
        case issues = "issues"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.resourceCount) {
        self.resourceCount = try container.decode(Int32?.self, forKey: .resourceCount)
    }
    if container.contains(.issues) {
        self.issues = try container.decode([HealthErrorSummaryData?]?.self, forKey: .issues)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.resourceCount != nil {try container.encode(self.resourceCount, forKey: .resourceCount)}
    if self.issues != nil {try container.encode(self.issues as! [HealthErrorSummaryData?]?, forKey: .issues)}
  }
}

extension DataFactory {
  public static func createResourceHealthSummaryProtocol() -> ResourceHealthSummaryProtocol {
    return ResourceHealthSummaryData()
  }
}
