// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecoveryPlanActionData : RecoveryPlanActionProtocol {
    public var actionName: String
    public var failoverTypes: [ReplicationProtectedItemOperationEnum]
    public var failoverDirections: [PossibleOperationsDirectionsEnum]
    public var customDetails: RecoveryPlanActionDetailsProtocol

        enum CodingKeys: String, CodingKey {case actionName = "actionName"
        case failoverTypes = "failoverTypes"
        case failoverDirections = "failoverDirections"
        case customDetails = "customDetails"
        }

  public init(actionName: String, failoverTypes: [ReplicationProtectedItemOperationEnum], failoverDirections: [PossibleOperationsDirectionsEnum], customDetails: RecoveryPlanActionDetailsProtocol)  {
    self.actionName = actionName
    self.failoverTypes = failoverTypes
    self.failoverDirections = failoverDirections
    self.customDetails = customDetails
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.actionName = try container.decode(String.self, forKey: .actionName)
    self.failoverTypes = try container.decode([ReplicationProtectedItemOperationEnum].self, forKey: .failoverTypes)
    self.failoverDirections = try container.decode([PossibleOperationsDirectionsEnum].self, forKey: .failoverDirections)
    self.customDetails = try container.decode(RecoveryPlanActionDetailsData.self, forKey: .customDetails)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.actionName, forKey: .actionName)
    try container.encode(self.failoverTypes as! [ReplicationProtectedItemOperationEnum], forKey: .failoverTypes)
    try container.encode(self.failoverDirections as! [PossibleOperationsDirectionsEnum], forKey: .failoverDirections)
    try container.encode(self.customDetails as! RecoveryPlanActionDetailsData, forKey: .customDetails)
  }
}

extension DataFactory {
  public static func createRecoveryPlanActionProtocol(actionName: String, failoverTypes: [ReplicationProtectedItemOperationEnum], failoverDirections: [PossibleOperationsDirectionsEnum], customDetails: RecoveryPlanActionDetailsProtocol) -> RecoveryPlanActionProtocol {
    return RecoveryPlanActionData(actionName: actionName, failoverTypes: failoverTypes, failoverDirections: failoverDirections, customDetails: customDetails)
  }
}
