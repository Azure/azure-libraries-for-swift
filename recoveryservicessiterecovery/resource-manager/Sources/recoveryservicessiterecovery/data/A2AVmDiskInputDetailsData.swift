// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct A2AVmDiskInputDetailsData : A2AVmDiskInputDetailsProtocol {
    public var diskUri: String?
    public var recoveryAzureStorageAccountId: String?
    public var primaryStagingAzureStorageAccountId: String?

        enum CodingKeys: String, CodingKey {case diskUri = "diskUri"
        case recoveryAzureStorageAccountId = "recoveryAzureStorageAccountId"
        case primaryStagingAzureStorageAccountId = "primaryStagingAzureStorageAccountId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.diskUri) {
        self.diskUri = try container.decode(String?.self, forKey: .diskUri)
    }
    if container.contains(.recoveryAzureStorageAccountId) {
        self.recoveryAzureStorageAccountId = try container.decode(String?.self, forKey: .recoveryAzureStorageAccountId)
    }
    if container.contains(.primaryStagingAzureStorageAccountId) {
        self.primaryStagingAzureStorageAccountId = try container.decode(String?.self, forKey: .primaryStagingAzureStorageAccountId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.diskUri != nil {try container.encode(self.diskUri, forKey: .diskUri)}
    if self.recoveryAzureStorageAccountId != nil {try container.encode(self.recoveryAzureStorageAccountId, forKey: .recoveryAzureStorageAccountId)}
    if self.primaryStagingAzureStorageAccountId != nil {try container.encode(self.primaryStagingAzureStorageAccountId, forKey: .primaryStagingAzureStorageAccountId)}
  }
}

extension DataFactory {
  public static func createA2AVmDiskInputDetailsProtocol() -> A2AVmDiskInputDetailsProtocol {
    return A2AVmDiskInputDetailsData()
  }
}
