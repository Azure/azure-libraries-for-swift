// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FailoverReplicationProtectedItemDetailsData : FailoverReplicationProtectedItemDetailsProtocol {
    public var name: String?
    public var friendlyName: String?
    public var testVmName: String?
    public var testVmFriendlyName: String?
    public var networkConnectionStatus: String?
    public var networkFriendlyName: String?
    public var subnet: String?
    public var recoveryPointId: String?
    public var recoveryPointTime: Date?

        enum CodingKeys: String, CodingKey {case name = "name"
        case friendlyName = "friendlyName"
        case testVmName = "testVmName"
        case testVmFriendlyName = "testVmFriendlyName"
        case networkConnectionStatus = "networkConnectionStatus"
        case networkFriendlyName = "networkFriendlyName"
        case subnet = "subnet"
        case recoveryPointId = "recoveryPointId"
        case recoveryPointTime = "recoveryPointTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.testVmName) {
        self.testVmName = try container.decode(String?.self, forKey: .testVmName)
    }
    if container.contains(.testVmFriendlyName) {
        self.testVmFriendlyName = try container.decode(String?.self, forKey: .testVmFriendlyName)
    }
    if container.contains(.networkConnectionStatus) {
        self.networkConnectionStatus = try container.decode(String?.self, forKey: .networkConnectionStatus)
    }
    if container.contains(.networkFriendlyName) {
        self.networkFriendlyName = try container.decode(String?.self, forKey: .networkFriendlyName)
    }
    if container.contains(.subnet) {
        self.subnet = try container.decode(String?.self, forKey: .subnet)
    }
    if container.contains(.recoveryPointId) {
        self.recoveryPointId = try container.decode(String?.self, forKey: .recoveryPointId)
    }
    if container.contains(.recoveryPointTime) {
        self.recoveryPointTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .recoveryPointTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.testVmName != nil {try container.encode(self.testVmName, forKey: .testVmName)}
    if self.testVmFriendlyName != nil {try container.encode(self.testVmFriendlyName, forKey: .testVmFriendlyName)}
    if self.networkConnectionStatus != nil {try container.encode(self.networkConnectionStatus, forKey: .networkConnectionStatus)}
    if self.networkFriendlyName != nil {try container.encode(self.networkFriendlyName, forKey: .networkFriendlyName)}
    if self.subnet != nil {try container.encode(self.subnet, forKey: .subnet)}
    if self.recoveryPointId != nil {try container.encode(self.recoveryPointId, forKey: .recoveryPointId)}
    if self.recoveryPointTime != nil {
        try container.encode(DateConverter.toString(date: self.recoveryPointTime!, format: .dateTime), forKey: .recoveryPointTime)
    }
  }
}

extension DataFactory {
  public static func createFailoverReplicationProtectedItemDetailsProtocol() -> FailoverReplicationProtectedItemDetailsProtocol {
    return FailoverReplicationProtectedItemDetailsData()
  }
}
