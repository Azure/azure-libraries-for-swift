// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecoveryPlanUnplannedFailoverInputPropertiesData : RecoveryPlanUnplannedFailoverInputPropertiesProtocol {
    public var failoverDirection: PossibleOperationsDirectionsEnum
    public var sourceSiteOperations: SourceSiteOperationsEnum
    public var providerSpecificDetails: [RecoveryPlanProviderSpecificFailoverInputProtocol?]?

        enum CodingKeys: String, CodingKey {case failoverDirection = "failoverDirection"
        case sourceSiteOperations = "sourceSiteOperations"
        case providerSpecificDetails = "providerSpecificDetails"
        }

  public init(failoverDirection: PossibleOperationsDirectionsEnum, sourceSiteOperations: SourceSiteOperationsEnum)  {
    self.failoverDirection = failoverDirection
    self.sourceSiteOperations = sourceSiteOperations
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.failoverDirection = try container.decode(PossibleOperationsDirectionsEnum.self, forKey: .failoverDirection)
    self.sourceSiteOperations = try container.decode(SourceSiteOperationsEnum.self, forKey: .sourceSiteOperations)
    if container.contains(.providerSpecificDetails) {
        self.providerSpecificDetails = try container.decode([RecoveryPlanProviderSpecificFailoverInputData?]?.self, forKey: .providerSpecificDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.failoverDirection, forKey: .failoverDirection)
    try container.encode(self.sourceSiteOperations, forKey: .sourceSiteOperations)
    if self.providerSpecificDetails != nil {try container.encode(self.providerSpecificDetails as! [RecoveryPlanProviderSpecificFailoverInputData?]?, forKey: .providerSpecificDetails)}
  }
}

extension DataFactory {
  public static func createRecoveryPlanUnplannedFailoverInputPropertiesProtocol(failoverDirection: PossibleOperationsDirectionsEnum, sourceSiteOperations: SourceSiteOperationsEnum) -> RecoveryPlanUnplannedFailoverInputPropertiesProtocol {
    return RecoveryPlanUnplannedFailoverInputPropertiesData(failoverDirection: failoverDirection, sourceSiteOperations: sourceSiteOperations)
  }
}
