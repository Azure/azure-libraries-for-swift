// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecoveryPlanShutdownGroupTaskDetailsData : RecoveryPlanShutdownGroupTaskDetailsProtocol, GroupTaskDetailsProtocol {
    public var childTasks: [ASRTaskProtocol?]?
    public var name: String?
    public var groupId: String?
    public var rpGroupType: String?

        enum CodingKeys: String, CodingKey {case childTasks = "childTasks"
        case name = "name"
        case groupId = "groupId"
        case rpGroupType = "rpGroupType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.childTasks) {
        self.childTasks = try container.decode([ASRTaskData?]?.self, forKey: .childTasks)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.groupId) {
        self.groupId = try container.decode(String?.self, forKey: .groupId)
    }
    if container.contains(.rpGroupType) {
        self.rpGroupType = try container.decode(String?.self, forKey: .rpGroupType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.childTasks != nil {try container.encode(self.childTasks as! [ASRTaskData?]?, forKey: .childTasks)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.groupId != nil {try container.encode(self.groupId, forKey: .groupId)}
    if self.rpGroupType != nil {try container.encode(self.rpGroupType, forKey: .rpGroupType)}
  }
}

extension DataFactory {
  public static func createRecoveryPlanShutdownGroupTaskDetailsProtocol() -> RecoveryPlanShutdownGroupTaskDetailsProtocol {
    return RecoveryPlanShutdownGroupTaskDetailsData()
  }
}
