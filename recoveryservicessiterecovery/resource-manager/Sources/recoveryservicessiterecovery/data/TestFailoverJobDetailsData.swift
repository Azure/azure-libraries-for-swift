// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct TestFailoverJobDetailsData : TestFailoverJobDetailsProtocol, JobDetailsProtocol {
    public var affectedObjectDetails: [String:String]?
    public var testFailoverStatus: String?
    public var comments: String?
    public var networkName: String?
    public var networkFriendlyName: String?
    public var networkType: String?
    public var protectedItemDetails: [FailoverReplicationProtectedItemDetailsProtocol?]?

        enum CodingKeys: String, CodingKey {case affectedObjectDetails = "affectedObjectDetails"
        case testFailoverStatus = "testFailoverStatus"
        case comments = "comments"
        case networkName = "networkName"
        case networkFriendlyName = "networkFriendlyName"
        case networkType = "networkType"
        case protectedItemDetails = "protectedItemDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.affectedObjectDetails) {
        self.affectedObjectDetails = try container.decode([String:String]?.self, forKey: .affectedObjectDetails)
    }
    if container.contains(.testFailoverStatus) {
        self.testFailoverStatus = try container.decode(String?.self, forKey: .testFailoverStatus)
    }
    if container.contains(.comments) {
        self.comments = try container.decode(String?.self, forKey: .comments)
    }
    if container.contains(.networkName) {
        self.networkName = try container.decode(String?.self, forKey: .networkName)
    }
    if container.contains(.networkFriendlyName) {
        self.networkFriendlyName = try container.decode(String?.self, forKey: .networkFriendlyName)
    }
    if container.contains(.networkType) {
        self.networkType = try container.decode(String?.self, forKey: .networkType)
    }
    if container.contains(.protectedItemDetails) {
        self.protectedItemDetails = try container.decode([FailoverReplicationProtectedItemDetailsData?]?.self, forKey: .protectedItemDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.affectedObjectDetails != nil {try container.encode(self.affectedObjectDetails, forKey: .affectedObjectDetails)}
    if self.testFailoverStatus != nil {try container.encode(self.testFailoverStatus, forKey: .testFailoverStatus)}
    if self.comments != nil {try container.encode(self.comments, forKey: .comments)}
    if self.networkName != nil {try container.encode(self.networkName, forKey: .networkName)}
    if self.networkFriendlyName != nil {try container.encode(self.networkFriendlyName, forKey: .networkFriendlyName)}
    if self.networkType != nil {try container.encode(self.networkType, forKey: .networkType)}
    if self.protectedItemDetails != nil {try container.encode(self.protectedItemDetails as! [FailoverReplicationProtectedItemDetailsData?]?, forKey: .protectedItemDetails)}
  }
}

extension DataFactory {
  public static func createTestFailoverJobDetailsProtocol() -> TestFailoverJobDetailsProtocol {
    return TestFailoverJobDetailsData()
  }
}
