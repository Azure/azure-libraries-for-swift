// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CreateRecoveryPlanInputPropertiesData : CreateRecoveryPlanInputPropertiesProtocol {
    public var primaryFabricId: String
    public var recoveryFabricId: String
    public var failoverDeploymentModel: FailoverDeploymentModelEnum?
    public var groups: [RecoveryPlanGroupProtocol]

        enum CodingKeys: String, CodingKey {case primaryFabricId = "primaryFabricId"
        case recoveryFabricId = "recoveryFabricId"
        case failoverDeploymentModel = "failoverDeploymentModel"
        case groups = "groups"
        }

  public init(primaryFabricId: String, recoveryFabricId: String, groups: [RecoveryPlanGroupProtocol])  {
    self.primaryFabricId = primaryFabricId
    self.recoveryFabricId = recoveryFabricId
    self.groups = groups
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.primaryFabricId = try container.decode(String.self, forKey: .primaryFabricId)
    self.recoveryFabricId = try container.decode(String.self, forKey: .recoveryFabricId)
    if container.contains(.failoverDeploymentModel) {
        self.failoverDeploymentModel = try container.decode(FailoverDeploymentModelEnum?.self, forKey: .failoverDeploymentModel)
    }
    self.groups = try container.decode([RecoveryPlanGroupData].self, forKey: .groups)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.primaryFabricId, forKey: .primaryFabricId)
    try container.encode(self.recoveryFabricId, forKey: .recoveryFabricId)
    if self.failoverDeploymentModel != nil {try container.encode(self.failoverDeploymentModel, forKey: .failoverDeploymentModel)}
    try container.encode(self.groups as! [RecoveryPlanGroupData], forKey: .groups)
  }
}

extension DataFactory {
  public static func createCreateRecoveryPlanInputPropertiesProtocol(primaryFabricId: String, recoveryFabricId: String, groups: [RecoveryPlanGroupProtocol]) -> CreateRecoveryPlanInputPropertiesProtocol {
    return CreateRecoveryPlanInputPropertiesData(primaryFabricId: primaryFabricId, recoveryFabricId: recoveryFabricId, groups: groups)
  }
}
