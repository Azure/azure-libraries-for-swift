// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EncryptionDetailsData : EncryptionDetailsProtocol {
    public var kekState: String?
    public var kekCertThumbprint: String?
    public var kekCertExpiryDate: Date?

        enum CodingKeys: String, CodingKey {case kekState = "kekState"
        case kekCertThumbprint = "kekCertThumbprint"
        case kekCertExpiryDate = "kekCertExpiryDate"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.kekState) {
        self.kekState = try container.decode(String?.self, forKey: .kekState)
    }
    if container.contains(.kekCertThumbprint) {
        self.kekCertThumbprint = try container.decode(String?.self, forKey: .kekCertThumbprint)
    }
    if container.contains(.kekCertExpiryDate) {
        self.kekCertExpiryDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .kekCertExpiryDate)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.kekState != nil {try container.encode(self.kekState, forKey: .kekState)}
    if self.kekCertThumbprint != nil {try container.encode(self.kekCertThumbprint, forKey: .kekCertThumbprint)}
    if self.kekCertExpiryDate != nil {
        try container.encode(DateConverter.toString(date: self.kekCertExpiryDate!, format: .dateTime), forKey: .kekCertExpiryDate)
    }
  }
}

extension DataFactory {
  public static func createEncryptionDetailsProtocol() -> EncryptionDetailsProtocol {
    return EncryptionDetailsData()
  }
}
