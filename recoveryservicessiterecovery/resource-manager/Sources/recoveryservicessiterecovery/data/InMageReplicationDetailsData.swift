// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InMageReplicationDetailsData : InMageReplicationDetailsProtocol, ReplicationProviderSpecificSettingsProtocol {
    public var activeSiteType: String?
    public var sourceVmCpuCount: Int32?
    public var sourceVmRamSizeInMB: Int32?
    public var osDetails: OSDiskDetailsProtocol?
    public var protectionStage: String?
    public var vmId: String?
    public var vmProtectionState: String?
    public var vmProtectionStateDescription: String?
    public var resyncDetails: InitialReplicationDetailsProtocol?
    public var retentionWindowStart: Date?
    public var retentionWindowEnd: Date?
    public var compressedDataRateInMB: Double?
    public var uncompressedDataRateInMB: Double?
    public var rpoInSeconds: Int64?
    public var protectedDisks: [InMageProtectedDiskDetailsProtocol?]?
    public var ipAddress: String?
    public var lastHeartbeat: Date?
    public var processServerId: String?
    public var masterTargetId: String?
    public var consistencyPoints: [String:Date]?
    public var diskResized: String?
    public var rebootAfterUpdateStatus: String?
    public var multiVmGroupId: String?
    public var multiVmGroupName: String?
    public var multiVmSyncStatus: String?
    public var agentDetails: InMageAgentDetailsProtocol?
    public var vCenterInfrastructureId: String?
    public var infrastructureVmId: String?
    public var vmNics: [VMNicDetailsProtocol?]?
    public var discoveryType: String?
    public var azureStorageAccountId: String?
    public var datastores: [String]?
    public var validationErrors: [HealthErrorProtocol?]?
    public var lastRpoCalculatedTime: Date?
    public var lastUpdateReceivedTime: Date?
    public var replicaId: String?
    public var osVersion: String?

        enum CodingKeys: String, CodingKey {case activeSiteType = "activeSiteType"
        case sourceVmCpuCount = "sourceVmCpuCount"
        case sourceVmRamSizeInMB = "sourceVmRamSizeInMB"
        case osDetails = "osDetails"
        case protectionStage = "protectionStage"
        case vmId = "vmId"
        case vmProtectionState = "vmProtectionState"
        case vmProtectionStateDescription = "vmProtectionStateDescription"
        case resyncDetails = "resyncDetails"
        case retentionWindowStart = "retentionWindowStart"
        case retentionWindowEnd = "retentionWindowEnd"
        case compressedDataRateInMB = "compressedDataRateInMB"
        case uncompressedDataRateInMB = "uncompressedDataRateInMB"
        case rpoInSeconds = "rpoInSeconds"
        case protectedDisks = "protectedDisks"
        case ipAddress = "ipAddress"
        case lastHeartbeat = "lastHeartbeat"
        case processServerId = "processServerId"
        case masterTargetId = "masterTargetId"
        case consistencyPoints = "consistencyPoints"
        case diskResized = "diskResized"
        case rebootAfterUpdateStatus = "rebootAfterUpdateStatus"
        case multiVmGroupId = "multiVmGroupId"
        case multiVmGroupName = "multiVmGroupName"
        case multiVmSyncStatus = "multiVmSyncStatus"
        case agentDetails = "agentDetails"
        case vCenterInfrastructureId = "vCenterInfrastructureId"
        case infrastructureVmId = "infrastructureVmId"
        case vmNics = "vmNics"
        case discoveryType = "discoveryType"
        case azureStorageAccountId = "azureStorageAccountId"
        case datastores = "datastores"
        case validationErrors = "validationErrors"
        case lastRpoCalculatedTime = "lastRpoCalculatedTime"
        case lastUpdateReceivedTime = "lastUpdateReceivedTime"
        case replicaId = "replicaId"
        case osVersion = "osVersion"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.activeSiteType) {
        self.activeSiteType = try container.decode(String?.self, forKey: .activeSiteType)
    }
    if container.contains(.sourceVmCpuCount) {
        self.sourceVmCpuCount = try container.decode(Int32?.self, forKey: .sourceVmCpuCount)
    }
    if container.contains(.sourceVmRamSizeInMB) {
        self.sourceVmRamSizeInMB = try container.decode(Int32?.self, forKey: .sourceVmRamSizeInMB)
    }
    if container.contains(.osDetails) {
        self.osDetails = try container.decode(OSDiskDetailsData?.self, forKey: .osDetails)
    }
    if container.contains(.protectionStage) {
        self.protectionStage = try container.decode(String?.self, forKey: .protectionStage)
    }
    if container.contains(.vmId) {
        self.vmId = try container.decode(String?.self, forKey: .vmId)
    }
    if container.contains(.vmProtectionState) {
        self.vmProtectionState = try container.decode(String?.self, forKey: .vmProtectionState)
    }
    if container.contains(.vmProtectionStateDescription) {
        self.vmProtectionStateDescription = try container.decode(String?.self, forKey: .vmProtectionStateDescription)
    }
    if container.contains(.resyncDetails) {
        self.resyncDetails = try container.decode(InitialReplicationDetailsData?.self, forKey: .resyncDetails)
    }
    if container.contains(.retentionWindowStart) {
        self.retentionWindowStart = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .retentionWindowStart)), format: .dateTime)
    }
    if container.contains(.retentionWindowEnd) {
        self.retentionWindowEnd = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .retentionWindowEnd)), format: .dateTime)
    }
    if container.contains(.compressedDataRateInMB) {
        self.compressedDataRateInMB = try container.decode(Double?.self, forKey: .compressedDataRateInMB)
    }
    if container.contains(.uncompressedDataRateInMB) {
        self.uncompressedDataRateInMB = try container.decode(Double?.self, forKey: .uncompressedDataRateInMB)
    }
    if container.contains(.rpoInSeconds) {
        self.rpoInSeconds = try container.decode(Int64?.self, forKey: .rpoInSeconds)
    }
    if container.contains(.protectedDisks) {
        self.protectedDisks = try container.decode([InMageProtectedDiskDetailsData?]?.self, forKey: .protectedDisks)
    }
    if container.contains(.ipAddress) {
        self.ipAddress = try container.decode(String?.self, forKey: .ipAddress)
    }
    if container.contains(.lastHeartbeat) {
        self.lastHeartbeat = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastHeartbeat)), format: .dateTime)
    }
    if container.contains(.processServerId) {
        self.processServerId = try container.decode(String?.self, forKey: .processServerId)
    }
    if container.contains(.masterTargetId) {
        self.masterTargetId = try container.decode(String?.self, forKey: .masterTargetId)
    }
    if container.contains(.consistencyPoints) {
        self.consistencyPoints = try container.decode([String:Date]?.self, forKey: .consistencyPoints)
    }
    if container.contains(.diskResized) {
        self.diskResized = try container.decode(String?.self, forKey: .diskResized)
    }
    if container.contains(.rebootAfterUpdateStatus) {
        self.rebootAfterUpdateStatus = try container.decode(String?.self, forKey: .rebootAfterUpdateStatus)
    }
    if container.contains(.multiVmGroupId) {
        self.multiVmGroupId = try container.decode(String?.self, forKey: .multiVmGroupId)
    }
    if container.contains(.multiVmGroupName) {
        self.multiVmGroupName = try container.decode(String?.self, forKey: .multiVmGroupName)
    }
    if container.contains(.multiVmSyncStatus) {
        self.multiVmSyncStatus = try container.decode(String?.self, forKey: .multiVmSyncStatus)
    }
    if container.contains(.agentDetails) {
        self.agentDetails = try container.decode(InMageAgentDetailsData?.self, forKey: .agentDetails)
    }
    if container.contains(.vCenterInfrastructureId) {
        self.vCenterInfrastructureId = try container.decode(String?.self, forKey: .vCenterInfrastructureId)
    }
    if container.contains(.infrastructureVmId) {
        self.infrastructureVmId = try container.decode(String?.self, forKey: .infrastructureVmId)
    }
    if container.contains(.vmNics) {
        self.vmNics = try container.decode([VMNicDetailsData?]?.self, forKey: .vmNics)
    }
    if container.contains(.discoveryType) {
        self.discoveryType = try container.decode(String?.self, forKey: .discoveryType)
    }
    if container.contains(.azureStorageAccountId) {
        self.azureStorageAccountId = try container.decode(String?.self, forKey: .azureStorageAccountId)
    }
    if container.contains(.datastores) {
        self.datastores = try container.decode([String]?.self, forKey: .datastores)
    }
    if container.contains(.validationErrors) {
        self.validationErrors = try container.decode([HealthErrorData?]?.self, forKey: .validationErrors)
    }
    if container.contains(.lastRpoCalculatedTime) {
        self.lastRpoCalculatedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastRpoCalculatedTime)), format: .dateTime)
    }
    if container.contains(.lastUpdateReceivedTime) {
        self.lastUpdateReceivedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastUpdateReceivedTime)), format: .dateTime)
    }
    if container.contains(.replicaId) {
        self.replicaId = try container.decode(String?.self, forKey: .replicaId)
    }
    if container.contains(.osVersion) {
        self.osVersion = try container.decode(String?.self, forKey: .osVersion)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.activeSiteType != nil {try container.encode(self.activeSiteType, forKey: .activeSiteType)}
    if self.sourceVmCpuCount != nil {try container.encode(self.sourceVmCpuCount, forKey: .sourceVmCpuCount)}
    if self.sourceVmRamSizeInMB != nil {try container.encode(self.sourceVmRamSizeInMB, forKey: .sourceVmRamSizeInMB)}
    if self.osDetails != nil {try container.encode(self.osDetails as! OSDiskDetailsData?, forKey: .osDetails)}
    if self.protectionStage != nil {try container.encode(self.protectionStage, forKey: .protectionStage)}
    if self.vmId != nil {try container.encode(self.vmId, forKey: .vmId)}
    if self.vmProtectionState != nil {try container.encode(self.vmProtectionState, forKey: .vmProtectionState)}
    if self.vmProtectionStateDescription != nil {try container.encode(self.vmProtectionStateDescription, forKey: .vmProtectionStateDescription)}
    if self.resyncDetails != nil {try container.encode(self.resyncDetails as! InitialReplicationDetailsData?, forKey: .resyncDetails)}
    if self.retentionWindowStart != nil {
        try container.encode(DateConverter.toString(date: self.retentionWindowStart!, format: .dateTime), forKey: .retentionWindowStart)
    }
    if self.retentionWindowEnd != nil {
        try container.encode(DateConverter.toString(date: self.retentionWindowEnd!, format: .dateTime), forKey: .retentionWindowEnd)
    }
    if self.compressedDataRateInMB != nil {try container.encode(self.compressedDataRateInMB, forKey: .compressedDataRateInMB)}
    if self.uncompressedDataRateInMB != nil {try container.encode(self.uncompressedDataRateInMB, forKey: .uncompressedDataRateInMB)}
    if self.rpoInSeconds != nil {try container.encode(self.rpoInSeconds, forKey: .rpoInSeconds)}
    if self.protectedDisks != nil {try container.encode(self.protectedDisks as! [InMageProtectedDiskDetailsData?]?, forKey: .protectedDisks)}
    if self.ipAddress != nil {try container.encode(self.ipAddress, forKey: .ipAddress)}
    if self.lastHeartbeat != nil {
        try container.encode(DateConverter.toString(date: self.lastHeartbeat!, format: .dateTime), forKey: .lastHeartbeat)
    }
    if self.processServerId != nil {try container.encode(self.processServerId, forKey: .processServerId)}
    if self.masterTargetId != nil {try container.encode(self.masterTargetId, forKey: .masterTargetId)}
    if self.consistencyPoints != nil {try container.encode(self.consistencyPoints, forKey: .consistencyPoints)}
    if self.diskResized != nil {try container.encode(self.diskResized, forKey: .diskResized)}
    if self.rebootAfterUpdateStatus != nil {try container.encode(self.rebootAfterUpdateStatus, forKey: .rebootAfterUpdateStatus)}
    if self.multiVmGroupId != nil {try container.encode(self.multiVmGroupId, forKey: .multiVmGroupId)}
    if self.multiVmGroupName != nil {try container.encode(self.multiVmGroupName, forKey: .multiVmGroupName)}
    if self.multiVmSyncStatus != nil {try container.encode(self.multiVmSyncStatus, forKey: .multiVmSyncStatus)}
    if self.agentDetails != nil {try container.encode(self.agentDetails as! InMageAgentDetailsData?, forKey: .agentDetails)}
    if self.vCenterInfrastructureId != nil {try container.encode(self.vCenterInfrastructureId, forKey: .vCenterInfrastructureId)}
    if self.infrastructureVmId != nil {try container.encode(self.infrastructureVmId, forKey: .infrastructureVmId)}
    if self.vmNics != nil {try container.encode(self.vmNics as! [VMNicDetailsData?]?, forKey: .vmNics)}
    if self.discoveryType != nil {try container.encode(self.discoveryType, forKey: .discoveryType)}
    if self.azureStorageAccountId != nil {try container.encode(self.azureStorageAccountId, forKey: .azureStorageAccountId)}
    if self.datastores != nil {try container.encode(self.datastores as! [String]?, forKey: .datastores)}
    if self.validationErrors != nil {try container.encode(self.validationErrors as! [HealthErrorData?]?, forKey: .validationErrors)}
    if self.lastRpoCalculatedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastRpoCalculatedTime!, format: .dateTime), forKey: .lastRpoCalculatedTime)
    }
    if self.lastUpdateReceivedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastUpdateReceivedTime!, format: .dateTime), forKey: .lastUpdateReceivedTime)
    }
    if self.replicaId != nil {try container.encode(self.replicaId, forKey: .replicaId)}
    if self.osVersion != nil {try container.encode(self.osVersion, forKey: .osVersion)}
  }
}

extension DataFactory {
  public static func createInMageReplicationDetailsProtocol() -> InMageReplicationDetailsProtocol {
    return InMageReplicationDetailsData()
  }
}
