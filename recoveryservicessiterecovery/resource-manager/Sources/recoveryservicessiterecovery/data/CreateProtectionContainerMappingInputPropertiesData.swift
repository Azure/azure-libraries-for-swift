// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CreateProtectionContainerMappingInputPropertiesData : CreateProtectionContainerMappingInputPropertiesProtocol {
    public var targetProtectionContainerId: String?
    public var policyId: String?
    public var providerSpecificInput: ReplicationProviderSpecificContainerMappingInputProtocol?

        enum CodingKeys: String, CodingKey {case targetProtectionContainerId = "targetProtectionContainerId"
        case policyId = "policyId"
        case providerSpecificInput = "providerSpecificInput"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.targetProtectionContainerId) {
        self.targetProtectionContainerId = try container.decode(String?.self, forKey: .targetProtectionContainerId)
    }
    if container.contains(.policyId) {
        self.policyId = try container.decode(String?.self, forKey: .policyId)
    }
    if container.contains(.providerSpecificInput) {
        self.providerSpecificInput = try container.decode(ReplicationProviderSpecificContainerMappingInputData?.self, forKey: .providerSpecificInput)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.targetProtectionContainerId != nil {try container.encode(self.targetProtectionContainerId, forKey: .targetProtectionContainerId)}
    if self.policyId != nil {try container.encode(self.policyId, forKey: .policyId)}
    if self.providerSpecificInput != nil {try container.encode(self.providerSpecificInput as! ReplicationProviderSpecificContainerMappingInputData?, forKey: .providerSpecificInput)}
  }
}

extension DataFactory {
  public static func createCreateProtectionContainerMappingInputPropertiesProtocol() -> CreateProtectionContainerMappingInputPropertiesProtocol {
    return CreateProtectionContainerMappingInputPropertiesData()
  }
}
