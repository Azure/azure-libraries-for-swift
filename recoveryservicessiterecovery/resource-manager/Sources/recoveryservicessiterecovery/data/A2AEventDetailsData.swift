// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct A2AEventDetailsData : A2AEventDetailsProtocol, EventProviderSpecificDetailsProtocol {
    public var protectedItemName: String?
    public var fabricObjectId: String?
    public var fabricName: String?
    public var fabricLocation: String?
    public var remoteFabricName: String?
    public var remoteFabricLocation: String?

        enum CodingKeys: String, CodingKey {case protectedItemName = "protectedItemName"
        case fabricObjectId = "fabricObjectId"
        case fabricName = "fabricName"
        case fabricLocation = "fabricLocation"
        case remoteFabricName = "remoteFabricName"
        case remoteFabricLocation = "remoteFabricLocation"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.protectedItemName) {
        self.protectedItemName = try container.decode(String?.self, forKey: .protectedItemName)
    }
    if container.contains(.fabricObjectId) {
        self.fabricObjectId = try container.decode(String?.self, forKey: .fabricObjectId)
    }
    if container.contains(.fabricName) {
        self.fabricName = try container.decode(String?.self, forKey: .fabricName)
    }
    if container.contains(.fabricLocation) {
        self.fabricLocation = try container.decode(String?.self, forKey: .fabricLocation)
    }
    if container.contains(.remoteFabricName) {
        self.remoteFabricName = try container.decode(String?.self, forKey: .remoteFabricName)
    }
    if container.contains(.remoteFabricLocation) {
        self.remoteFabricLocation = try container.decode(String?.self, forKey: .remoteFabricLocation)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.protectedItemName != nil {try container.encode(self.protectedItemName, forKey: .protectedItemName)}
    if self.fabricObjectId != nil {try container.encode(self.fabricObjectId, forKey: .fabricObjectId)}
    if self.fabricName != nil {try container.encode(self.fabricName, forKey: .fabricName)}
    if self.fabricLocation != nil {try container.encode(self.fabricLocation, forKey: .fabricLocation)}
    if self.remoteFabricName != nil {try container.encode(self.remoteFabricName, forKey: .remoteFabricName)}
    if self.remoteFabricLocation != nil {try container.encode(self.remoteFabricLocation, forKey: .remoteFabricLocation)}
  }
}

extension DataFactory {
  public static func createA2AEventDetailsProtocol() -> A2AEventDetailsProtocol {
    return A2AEventDetailsData()
  }
}
