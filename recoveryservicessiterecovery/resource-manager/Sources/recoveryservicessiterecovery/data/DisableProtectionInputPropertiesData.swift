// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DisableProtectionInputPropertiesData : DisableProtectionInputPropertiesProtocol {
    public var disableProtectionReason: DisableProtectionReasonEnum?
    public var replicationProviderInput: DisableProtectionProviderSpecificInputProtocol?

        enum CodingKeys: String, CodingKey {case disableProtectionReason = "disableProtectionReason"
        case replicationProviderInput = "replicationProviderInput"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.disableProtectionReason) {
        self.disableProtectionReason = try container.decode(DisableProtectionReasonEnum?.self, forKey: .disableProtectionReason)
    }
    if container.contains(.replicationProviderInput) {
        self.replicationProviderInput = try container.decode(DisableProtectionProviderSpecificInputData?.self, forKey: .replicationProviderInput)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.disableProtectionReason != nil {try container.encode(self.disableProtectionReason, forKey: .disableProtectionReason)}
    if self.replicationProviderInput != nil {try container.encode(self.replicationProviderInput as! DisableProtectionProviderSpecificInputData?, forKey: .replicationProviderInput)}
  }
}

extension DataFactory {
  public static func createDisableProtectionInputPropertiesProtocol() -> DisableProtectionInputPropertiesProtocol {
    return DisableProtectionInputPropertiesData()
  }
}
