// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InMageVolumeExclusionOptionsData : InMageVolumeExclusionOptionsProtocol {
    public var volumeLabel: String?
    public var onlyExcludeIfSingleVolume: String?

        enum CodingKeys: String, CodingKey {case volumeLabel = "volumeLabel"
        case onlyExcludeIfSingleVolume = "onlyExcludeIfSingleVolume"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.volumeLabel) {
        self.volumeLabel = try container.decode(String?.self, forKey: .volumeLabel)
    }
    if container.contains(.onlyExcludeIfSingleVolume) {
        self.onlyExcludeIfSingleVolume = try container.decode(String?.self, forKey: .onlyExcludeIfSingleVolume)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.volumeLabel != nil {try container.encode(self.volumeLabel, forKey: .volumeLabel)}
    if self.onlyExcludeIfSingleVolume != nil {try container.encode(self.onlyExcludeIfSingleVolume, forKey: .onlyExcludeIfSingleVolume)}
  }
}

extension DataFactory {
  public static func createInMageVolumeExclusionOptionsProtocol() -> InMageVolumeExclusionOptionsProtocol {
    return InMageVolumeExclusionOptionsData()
  }
}
