// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct IdentityInformationData : IdentityInformationProtocol {
    public var identityProviderType: IdentityProviderTypeEnum?
    public var tenantId: String?
    public var applicationId: String?
    public var objectId: String?
    public var audience: String?
    public var aadAuthority: String?
    public var certificateThumbprint: String?

        enum CodingKeys: String, CodingKey {case identityProviderType = "identityProviderType"
        case tenantId = "tenantId"
        case applicationId = "applicationId"
        case objectId = "objectId"
        case audience = "audience"
        case aadAuthority = "aadAuthority"
        case certificateThumbprint = "certificateThumbprint"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.identityProviderType) {
        self.identityProviderType = try container.decode(IdentityProviderTypeEnum?.self, forKey: .identityProviderType)
    }
    if container.contains(.tenantId) {
        self.tenantId = try container.decode(String?.self, forKey: .tenantId)
    }
    if container.contains(.applicationId) {
        self.applicationId = try container.decode(String?.self, forKey: .applicationId)
    }
    if container.contains(.objectId) {
        self.objectId = try container.decode(String?.self, forKey: .objectId)
    }
    if container.contains(.audience) {
        self.audience = try container.decode(String?.self, forKey: .audience)
    }
    if container.contains(.aadAuthority) {
        self.aadAuthority = try container.decode(String?.self, forKey: .aadAuthority)
    }
    if container.contains(.certificateThumbprint) {
        self.certificateThumbprint = try container.decode(String?.self, forKey: .certificateThumbprint)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.identityProviderType != nil {try container.encode(self.identityProviderType, forKey: .identityProviderType)}
    if self.tenantId != nil {try container.encode(self.tenantId, forKey: .tenantId)}
    if self.applicationId != nil {try container.encode(self.applicationId, forKey: .applicationId)}
    if self.objectId != nil {try container.encode(self.objectId, forKey: .objectId)}
    if self.audience != nil {try container.encode(self.audience, forKey: .audience)}
    if self.aadAuthority != nil {try container.encode(self.aadAuthority, forKey: .aadAuthority)}
    if self.certificateThumbprint != nil {try container.encode(self.certificateThumbprint, forKey: .certificateThumbprint)}
  }
}

extension DataFactory {
  public static func createIdentityInformationProtocol() -> IdentityInformationProtocol {
    return IdentityInformationData()
  }
}
