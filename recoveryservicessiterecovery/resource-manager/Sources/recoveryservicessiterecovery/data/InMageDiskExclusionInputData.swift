// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InMageDiskExclusionInputData : InMageDiskExclusionInputProtocol {
    public var volumeOptions: [InMageVolumeExclusionOptionsProtocol?]?
    public var diskSignatureOptions: [InMageDiskSignatureExclusionOptionsProtocol?]?

        enum CodingKeys: String, CodingKey {case volumeOptions = "volumeOptions"
        case diskSignatureOptions = "diskSignatureOptions"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.volumeOptions) {
        self.volumeOptions = try container.decode([InMageVolumeExclusionOptionsData?]?.self, forKey: .volumeOptions)
    }
    if container.contains(.diskSignatureOptions) {
        self.diskSignatureOptions = try container.decode([InMageDiskSignatureExclusionOptionsData?]?.self, forKey: .diskSignatureOptions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.volumeOptions != nil {try container.encode(self.volumeOptions as! [InMageVolumeExclusionOptionsData?]?, forKey: .volumeOptions)}
    if self.diskSignatureOptions != nil {try container.encode(self.diskSignatureOptions as! [InMageDiskSignatureExclusionOptionsData?]?, forKey: .diskSignatureOptions)}
  }
}

extension DataFactory {
  public static func createInMageDiskExclusionInputProtocol() -> InMageDiskExclusionInputProtocol {
    return InMageDiskExclusionInputData()
  }
}
