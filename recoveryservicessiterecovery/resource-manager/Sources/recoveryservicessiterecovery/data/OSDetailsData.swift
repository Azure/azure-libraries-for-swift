// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct OSDetailsData : OSDetailsProtocol {
    public var osType: String?
    public var productType: String?
    public var osEdition: String?
    public var oSVersion: String?
    public var oSMajorVersion: String?
    public var oSMinorVersion: String?

        enum CodingKeys: String, CodingKey {case osType = "osType"
        case productType = "productType"
        case osEdition = "osEdition"
        case oSVersion = "oSVersion"
        case oSMajorVersion = "oSMajorVersion"
        case oSMinorVersion = "oSMinorVersion"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.productType) {
        self.productType = try container.decode(String?.self, forKey: .productType)
    }
    if container.contains(.osEdition) {
        self.osEdition = try container.decode(String?.self, forKey: .osEdition)
    }
    if container.contains(.oSVersion) {
        self.oSVersion = try container.decode(String?.self, forKey: .oSVersion)
    }
    if container.contains(.oSMajorVersion) {
        self.oSMajorVersion = try container.decode(String?.self, forKey: .oSMajorVersion)
    }
    if container.contains(.oSMinorVersion) {
        self.oSMinorVersion = try container.decode(String?.self, forKey: .oSMinorVersion)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.productType != nil {try container.encode(self.productType, forKey: .productType)}
    if self.osEdition != nil {try container.encode(self.osEdition, forKey: .osEdition)}
    if self.oSVersion != nil {try container.encode(self.oSVersion, forKey: .oSVersion)}
    if self.oSMajorVersion != nil {try container.encode(self.oSMajorVersion, forKey: .oSMajorVersion)}
    if self.oSMinorVersion != nil {try container.encode(self.oSMinorVersion, forKey: .oSMinorVersion)}
  }
}

extension DataFactory {
  public static func createOSDetailsProtocol() -> OSDetailsProtocol {
    return OSDetailsData()
  }
}
