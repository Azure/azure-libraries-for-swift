// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InMageAzureV2EventDetailsData : InMageAzureV2EventDetailsProtocol, EventProviderSpecificDetailsProtocol {
    public var eventType: String?
    public var category: String?
    public var component: String?
    public var correctiveAction: String?
    public var details: String?
    public var summary: String?
    public var siteName: String?

        enum CodingKeys: String, CodingKey {case eventType = "eventType"
        case category = "category"
        case component = "component"
        case correctiveAction = "correctiveAction"
        case details = "details"
        case summary = "summary"
        case siteName = "siteName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.eventType) {
        self.eventType = try container.decode(String?.self, forKey: .eventType)
    }
    if container.contains(.category) {
        self.category = try container.decode(String?.self, forKey: .category)
    }
    if container.contains(.component) {
        self.component = try container.decode(String?.self, forKey: .component)
    }
    if container.contains(.correctiveAction) {
        self.correctiveAction = try container.decode(String?.self, forKey: .correctiveAction)
    }
    if container.contains(.details) {
        self.details = try container.decode(String?.self, forKey: .details)
    }
    if container.contains(.summary) {
        self.summary = try container.decode(String?.self, forKey: .summary)
    }
    if container.contains(.siteName) {
        self.siteName = try container.decode(String?.self, forKey: .siteName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.eventType != nil {try container.encode(self.eventType, forKey: .eventType)}
    if self.category != nil {try container.encode(self.category, forKey: .category)}
    if self.component != nil {try container.encode(self.component, forKey: .component)}
    if self.correctiveAction != nil {try container.encode(self.correctiveAction, forKey: .correctiveAction)}
    if self.details != nil {try container.encode(self.details, forKey: .details)}
    if self.summary != nil {try container.encode(self.summary, forKey: .summary)}
    if self.siteName != nil {try container.encode(self.siteName, forKey: .siteName)}
  }
}

extension DataFactory {
  public static func createInMageAzureV2EventDetailsProtocol() -> InMageAzureV2EventDetailsProtocol {
    return InMageAzureV2EventDetailsData()
  }
}
