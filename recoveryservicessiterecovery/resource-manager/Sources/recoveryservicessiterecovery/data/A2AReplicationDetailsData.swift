// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct A2AReplicationDetailsData : A2AReplicationDetailsProtocol, ReplicationProviderSpecificSettingsProtocol {
    public var fabricObjectId: String?
    public var multiVmGroupId: String?
    public var multiVmGroupName: String?
    public var multiVmGroupCreateOption: MultiVmGroupCreateOptionEnum?
    public var managementId: String?
    public var protectedDisks: [A2AProtectedDiskDetailsProtocol?]?
    public var protectedManagedDisks: [A2AProtectedManagedDiskDetailsProtocol?]?
    public var recoveryBootDiagStorageAccountId: String?
    public var primaryFabricLocation: String?
    public var recoveryFabricLocation: String?
    public var osType: String?
    public var recoveryAzureVMSize: String?
    public var recoveryAzureVMName: String?
    public var recoveryAzureResourceGroupId: String?
    public var recoveryCloudService: String?
    public var recoveryAvailabilitySet: String?
    public var selectedRecoveryAzureNetworkId: String?
    public var vmNics: [VMNicDetailsProtocol?]?
    public var vmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetailsProtocol?
    public var monitoringPercentageCompletion: Int32?
    public var monitoringJobType: String?
    public var lastHeartbeat: Date?
    public var agentVersion: String?
    public var isReplicationAgentUpdateRequired: Bool?
    public var recoveryFabricObjectId: String?
    public var vmProtectionState: String?
    public var vmProtectionStateDescription: String?
    public var lifecycleId: String?
    public var testFailoverRecoveryFabricObjectId: String?
    public var rpoInSeconds: Int64?
    public var lastRpoCalculatedTime: Date?

        enum CodingKeys: String, CodingKey {case fabricObjectId = "fabricObjectId"
        case multiVmGroupId = "multiVmGroupId"
        case multiVmGroupName = "multiVmGroupName"
        case multiVmGroupCreateOption = "multiVmGroupCreateOption"
        case managementId = "managementId"
        case protectedDisks = "protectedDisks"
        case protectedManagedDisks = "protectedManagedDisks"
        case recoveryBootDiagStorageAccountId = "recoveryBootDiagStorageAccountId"
        case primaryFabricLocation = "primaryFabricLocation"
        case recoveryFabricLocation = "recoveryFabricLocation"
        case osType = "osType"
        case recoveryAzureVMSize = "recoveryAzureVMSize"
        case recoveryAzureVMName = "recoveryAzureVMName"
        case recoveryAzureResourceGroupId = "recoveryAzureResourceGroupId"
        case recoveryCloudService = "recoveryCloudService"
        case recoveryAvailabilitySet = "recoveryAvailabilitySet"
        case selectedRecoveryAzureNetworkId = "selectedRecoveryAzureNetworkId"
        case vmNics = "vmNics"
        case vmSyncedConfigDetails = "vmSyncedConfigDetails"
        case monitoringPercentageCompletion = "monitoringPercentageCompletion"
        case monitoringJobType = "monitoringJobType"
        case lastHeartbeat = "lastHeartbeat"
        case agentVersion = "agentVersion"
        case isReplicationAgentUpdateRequired = "isReplicationAgentUpdateRequired"
        case recoveryFabricObjectId = "recoveryFabricObjectId"
        case vmProtectionState = "vmProtectionState"
        case vmProtectionStateDescription = "vmProtectionStateDescription"
        case lifecycleId = "lifecycleId"
        case testFailoverRecoveryFabricObjectId = "testFailoverRecoveryFabricObjectId"
        case rpoInSeconds = "rpoInSeconds"
        case lastRpoCalculatedTime = "lastRpoCalculatedTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.fabricObjectId) {
        self.fabricObjectId = try container.decode(String?.self, forKey: .fabricObjectId)
    }
    if container.contains(.multiVmGroupId) {
        self.multiVmGroupId = try container.decode(String?.self, forKey: .multiVmGroupId)
    }
    if container.contains(.multiVmGroupName) {
        self.multiVmGroupName = try container.decode(String?.self, forKey: .multiVmGroupName)
    }
    if container.contains(.multiVmGroupCreateOption) {
        self.multiVmGroupCreateOption = try container.decode(MultiVmGroupCreateOptionEnum?.self, forKey: .multiVmGroupCreateOption)
    }
    if container.contains(.managementId) {
        self.managementId = try container.decode(String?.self, forKey: .managementId)
    }
    if container.contains(.protectedDisks) {
        self.protectedDisks = try container.decode([A2AProtectedDiskDetailsData?]?.self, forKey: .protectedDisks)
    }
    if container.contains(.protectedManagedDisks) {
        self.protectedManagedDisks = try container.decode([A2AProtectedManagedDiskDetailsData?]?.self, forKey: .protectedManagedDisks)
    }
    if container.contains(.recoveryBootDiagStorageAccountId) {
        self.recoveryBootDiagStorageAccountId = try container.decode(String?.self, forKey: .recoveryBootDiagStorageAccountId)
    }
    if container.contains(.primaryFabricLocation) {
        self.primaryFabricLocation = try container.decode(String?.self, forKey: .primaryFabricLocation)
    }
    if container.contains(.recoveryFabricLocation) {
        self.recoveryFabricLocation = try container.decode(String?.self, forKey: .recoveryFabricLocation)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.recoveryAzureVMSize) {
        self.recoveryAzureVMSize = try container.decode(String?.self, forKey: .recoveryAzureVMSize)
    }
    if container.contains(.recoveryAzureVMName) {
        self.recoveryAzureVMName = try container.decode(String?.self, forKey: .recoveryAzureVMName)
    }
    if container.contains(.recoveryAzureResourceGroupId) {
        self.recoveryAzureResourceGroupId = try container.decode(String?.self, forKey: .recoveryAzureResourceGroupId)
    }
    if container.contains(.recoveryCloudService) {
        self.recoveryCloudService = try container.decode(String?.self, forKey: .recoveryCloudService)
    }
    if container.contains(.recoveryAvailabilitySet) {
        self.recoveryAvailabilitySet = try container.decode(String?.self, forKey: .recoveryAvailabilitySet)
    }
    if container.contains(.selectedRecoveryAzureNetworkId) {
        self.selectedRecoveryAzureNetworkId = try container.decode(String?.self, forKey: .selectedRecoveryAzureNetworkId)
    }
    if container.contains(.vmNics) {
        self.vmNics = try container.decode([VMNicDetailsData?]?.self, forKey: .vmNics)
    }
    if container.contains(.vmSyncedConfigDetails) {
        self.vmSyncedConfigDetails = try container.decode(AzureToAzureVmSyncedConfigDetailsData?.self, forKey: .vmSyncedConfigDetails)
    }
    if container.contains(.monitoringPercentageCompletion) {
        self.monitoringPercentageCompletion = try container.decode(Int32?.self, forKey: .monitoringPercentageCompletion)
    }
    if container.contains(.monitoringJobType) {
        self.monitoringJobType = try container.decode(String?.self, forKey: .monitoringJobType)
    }
    if container.contains(.lastHeartbeat) {
        self.lastHeartbeat = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastHeartbeat)), format: .dateTime)
    }
    if container.contains(.agentVersion) {
        self.agentVersion = try container.decode(String?.self, forKey: .agentVersion)
    }
    if container.contains(.isReplicationAgentUpdateRequired) {
        self.isReplicationAgentUpdateRequired = try container.decode(Bool?.self, forKey: .isReplicationAgentUpdateRequired)
    }
    if container.contains(.recoveryFabricObjectId) {
        self.recoveryFabricObjectId = try container.decode(String?.self, forKey: .recoveryFabricObjectId)
    }
    if container.contains(.vmProtectionState) {
        self.vmProtectionState = try container.decode(String?.self, forKey: .vmProtectionState)
    }
    if container.contains(.vmProtectionStateDescription) {
        self.vmProtectionStateDescription = try container.decode(String?.self, forKey: .vmProtectionStateDescription)
    }
    if container.contains(.lifecycleId) {
        self.lifecycleId = try container.decode(String?.self, forKey: .lifecycleId)
    }
    if container.contains(.testFailoverRecoveryFabricObjectId) {
        self.testFailoverRecoveryFabricObjectId = try container.decode(String?.self, forKey: .testFailoverRecoveryFabricObjectId)
    }
    if container.contains(.rpoInSeconds) {
        self.rpoInSeconds = try container.decode(Int64?.self, forKey: .rpoInSeconds)
    }
    if container.contains(.lastRpoCalculatedTime) {
        self.lastRpoCalculatedTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastRpoCalculatedTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.fabricObjectId != nil {try container.encode(self.fabricObjectId, forKey: .fabricObjectId)}
    if self.multiVmGroupId != nil {try container.encode(self.multiVmGroupId, forKey: .multiVmGroupId)}
    if self.multiVmGroupName != nil {try container.encode(self.multiVmGroupName, forKey: .multiVmGroupName)}
    if self.multiVmGroupCreateOption != nil {try container.encode(self.multiVmGroupCreateOption, forKey: .multiVmGroupCreateOption)}
    if self.managementId != nil {try container.encode(self.managementId, forKey: .managementId)}
    if self.protectedDisks != nil {try container.encode(self.protectedDisks as! [A2AProtectedDiskDetailsData?]?, forKey: .protectedDisks)}
    if self.protectedManagedDisks != nil {try container.encode(self.protectedManagedDisks as! [A2AProtectedManagedDiskDetailsData?]?, forKey: .protectedManagedDisks)}
    if self.recoveryBootDiagStorageAccountId != nil {try container.encode(self.recoveryBootDiagStorageAccountId, forKey: .recoveryBootDiagStorageAccountId)}
    if self.primaryFabricLocation != nil {try container.encode(self.primaryFabricLocation, forKey: .primaryFabricLocation)}
    if self.recoveryFabricLocation != nil {try container.encode(self.recoveryFabricLocation, forKey: .recoveryFabricLocation)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.recoveryAzureVMSize != nil {try container.encode(self.recoveryAzureVMSize, forKey: .recoveryAzureVMSize)}
    if self.recoveryAzureVMName != nil {try container.encode(self.recoveryAzureVMName, forKey: .recoveryAzureVMName)}
    if self.recoveryAzureResourceGroupId != nil {try container.encode(self.recoveryAzureResourceGroupId, forKey: .recoveryAzureResourceGroupId)}
    if self.recoveryCloudService != nil {try container.encode(self.recoveryCloudService, forKey: .recoveryCloudService)}
    if self.recoveryAvailabilitySet != nil {try container.encode(self.recoveryAvailabilitySet, forKey: .recoveryAvailabilitySet)}
    if self.selectedRecoveryAzureNetworkId != nil {try container.encode(self.selectedRecoveryAzureNetworkId, forKey: .selectedRecoveryAzureNetworkId)}
    if self.vmNics != nil {try container.encode(self.vmNics as! [VMNicDetailsData?]?, forKey: .vmNics)}
    if self.vmSyncedConfigDetails != nil {try container.encode(self.vmSyncedConfigDetails as! AzureToAzureVmSyncedConfigDetailsData?, forKey: .vmSyncedConfigDetails)}
    if self.monitoringPercentageCompletion != nil {try container.encode(self.monitoringPercentageCompletion, forKey: .monitoringPercentageCompletion)}
    if self.monitoringJobType != nil {try container.encode(self.monitoringJobType, forKey: .monitoringJobType)}
    if self.lastHeartbeat != nil {
        try container.encode(DateConverter.toString(date: self.lastHeartbeat!, format: .dateTime), forKey: .lastHeartbeat)
    }
    if self.agentVersion != nil {try container.encode(self.agentVersion, forKey: .agentVersion)}
    if self.isReplicationAgentUpdateRequired != nil {try container.encode(self.isReplicationAgentUpdateRequired, forKey: .isReplicationAgentUpdateRequired)}
    if self.recoveryFabricObjectId != nil {try container.encode(self.recoveryFabricObjectId, forKey: .recoveryFabricObjectId)}
    if self.vmProtectionState != nil {try container.encode(self.vmProtectionState, forKey: .vmProtectionState)}
    if self.vmProtectionStateDescription != nil {try container.encode(self.vmProtectionStateDescription, forKey: .vmProtectionStateDescription)}
    if self.lifecycleId != nil {try container.encode(self.lifecycleId, forKey: .lifecycleId)}
    if self.testFailoverRecoveryFabricObjectId != nil {try container.encode(self.testFailoverRecoveryFabricObjectId, forKey: .testFailoverRecoveryFabricObjectId)}
    if self.rpoInSeconds != nil {try container.encode(self.rpoInSeconds, forKey: .rpoInSeconds)}
    if self.lastRpoCalculatedTime != nil {
        try container.encode(DateConverter.toString(date: self.lastRpoCalculatedTime!, format: .dateTime), forKey: .lastRpoCalculatedTime)
    }
  }
}

extension DataFactory {
  public static func createA2AReplicationDetailsProtocol() -> A2AReplicationDetailsProtocol {
    return A2AReplicationDetailsData()
  }
}
