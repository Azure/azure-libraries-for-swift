// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct HyperVReplicaAzureReprotectInputData : HyperVReplicaAzureReprotectInputProtocol, ReverseReplicationProviderSpecificInputProtocol {
    public var hvHostVmId: String?
    public var vmName: String?
    public var osType: String?
    public var vHDId: String?
    public var storageAccountId: String?
    public var logStorageAccountId: String?

        enum CodingKeys: String, CodingKey {case hvHostVmId = "hvHostVmId"
        case vmName = "vmName"
        case osType = "osType"
        case vHDId = "vHDId"
        case storageAccountId = "storageAccountId"
        case logStorageAccountId = "logStorageAccountId"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.hvHostVmId) {
        self.hvHostVmId = try container.decode(String?.self, forKey: .hvHostVmId)
    }
    if container.contains(.vmName) {
        self.vmName = try container.decode(String?.self, forKey: .vmName)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.vHDId) {
        self.vHDId = try container.decode(String?.self, forKey: .vHDId)
    }
    if container.contains(.storageAccountId) {
        self.storageAccountId = try container.decode(String?.self, forKey: .storageAccountId)
    }
    if container.contains(.logStorageAccountId) {
        self.logStorageAccountId = try container.decode(String?.self, forKey: .logStorageAccountId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.hvHostVmId != nil {try container.encode(self.hvHostVmId, forKey: .hvHostVmId)}
    if self.vmName != nil {try container.encode(self.vmName, forKey: .vmName)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.vHDId != nil {try container.encode(self.vHDId, forKey: .vHDId)}
    if self.storageAccountId != nil {try container.encode(self.storageAccountId, forKey: .storageAccountId)}
    if self.logStorageAccountId != nil {try container.encode(self.logStorageAccountId, forKey: .logStorageAccountId)}
  }
}

extension DataFactory {
  public static func createHyperVReplicaAzureReprotectInputProtocol() -> HyperVReplicaAzureReprotectInputProtocol {
    return HyperVReplicaAzureReprotectInputData()
  }
}
