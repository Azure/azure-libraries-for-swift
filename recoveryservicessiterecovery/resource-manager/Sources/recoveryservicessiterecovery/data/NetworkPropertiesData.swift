// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct NetworkPropertiesData : NetworkPropertiesProtocol {
    public var fabricType: String?
    public var subnets: [SubnetProtocol?]?
    public var friendlyName: String?
    public var networkType: String?

        enum CodingKeys: String, CodingKey {case fabricType = "fabricType"
        case subnets = "subnets"
        case friendlyName = "friendlyName"
        case networkType = "networkType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.fabricType) {
        self.fabricType = try container.decode(String?.self, forKey: .fabricType)
    }
    if container.contains(.subnets) {
        self.subnets = try container.decode([SubnetData?]?.self, forKey: .subnets)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.networkType) {
        self.networkType = try container.decode(String?.self, forKey: .networkType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.fabricType != nil {try container.encode(self.fabricType, forKey: .fabricType)}
    if self.subnets != nil {try container.encode(self.subnets as! [SubnetData?]?, forKey: .subnets)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.networkType != nil {try container.encode(self.networkType, forKey: .networkType)}
  }
}

extension DataFactory {
  public static func createNetworkPropertiesProtocol() -> NetworkPropertiesProtocol {
    return NetworkPropertiesData()
  }
}
