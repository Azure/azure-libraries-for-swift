// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct A2AProtectedManagedDiskDetailsData : A2AProtectedManagedDiskDetailsProtocol {
    public var diskId: String?
    public var recoveryAzureResourceGroupId: String?
    public var recoveryDiskId: String?
    public var diskName: String?
    public var diskCapacityInBytes: Int64?
    public var primaryStagingAzureStorageAccountId: String?
    public var diskType: String?
    public var resyncRequired: Bool?
    public var monitoringPercentageCompletion: Int32?
    public var monitoringJobType: String?
    public var dataPendingInStagingStorageAccountInMB: Double?
    public var dataPendingAtSourceAgentInMB: Double?

        enum CodingKeys: String, CodingKey {case diskId = "diskId"
        case recoveryAzureResourceGroupId = "recoveryAzureResourceGroupId"
        case recoveryDiskId = "recoveryDiskId"
        case diskName = "diskName"
        case diskCapacityInBytes = "diskCapacityInBytes"
        case primaryStagingAzureStorageAccountId = "primaryStagingAzureStorageAccountId"
        case diskType = "diskType"
        case resyncRequired = "resyncRequired"
        case monitoringPercentageCompletion = "monitoringPercentageCompletion"
        case monitoringJobType = "monitoringJobType"
        case dataPendingInStagingStorageAccountInMB = "dataPendingInStagingStorageAccountInMB"
        case dataPendingAtSourceAgentInMB = "dataPendingAtSourceAgentInMB"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.diskId) {
        self.diskId = try container.decode(String?.self, forKey: .diskId)
    }
    if container.contains(.recoveryAzureResourceGroupId) {
        self.recoveryAzureResourceGroupId = try container.decode(String?.self, forKey: .recoveryAzureResourceGroupId)
    }
    if container.contains(.recoveryDiskId) {
        self.recoveryDiskId = try container.decode(String?.self, forKey: .recoveryDiskId)
    }
    if container.contains(.diskName) {
        self.diskName = try container.decode(String?.self, forKey: .diskName)
    }
    if container.contains(.diskCapacityInBytes) {
        self.diskCapacityInBytes = try container.decode(Int64?.self, forKey: .diskCapacityInBytes)
    }
    if container.contains(.primaryStagingAzureStorageAccountId) {
        self.primaryStagingAzureStorageAccountId = try container.decode(String?.self, forKey: .primaryStagingAzureStorageAccountId)
    }
    if container.contains(.diskType) {
        self.diskType = try container.decode(String?.self, forKey: .diskType)
    }
    if container.contains(.resyncRequired) {
        self.resyncRequired = try container.decode(Bool?.self, forKey: .resyncRequired)
    }
    if container.contains(.monitoringPercentageCompletion) {
        self.monitoringPercentageCompletion = try container.decode(Int32?.self, forKey: .monitoringPercentageCompletion)
    }
    if container.contains(.monitoringJobType) {
        self.monitoringJobType = try container.decode(String?.self, forKey: .monitoringJobType)
    }
    if container.contains(.dataPendingInStagingStorageAccountInMB) {
        self.dataPendingInStagingStorageAccountInMB = try container.decode(Double?.self, forKey: .dataPendingInStagingStorageAccountInMB)
    }
    if container.contains(.dataPendingAtSourceAgentInMB) {
        self.dataPendingAtSourceAgentInMB = try container.decode(Double?.self, forKey: .dataPendingAtSourceAgentInMB)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.diskId != nil {try container.encode(self.diskId, forKey: .diskId)}
    if self.recoveryAzureResourceGroupId != nil {try container.encode(self.recoveryAzureResourceGroupId, forKey: .recoveryAzureResourceGroupId)}
    if self.recoveryDiskId != nil {try container.encode(self.recoveryDiskId, forKey: .recoveryDiskId)}
    if self.diskName != nil {try container.encode(self.diskName, forKey: .diskName)}
    if self.diskCapacityInBytes != nil {try container.encode(self.diskCapacityInBytes, forKey: .diskCapacityInBytes)}
    if self.primaryStagingAzureStorageAccountId != nil {try container.encode(self.primaryStagingAzureStorageAccountId, forKey: .primaryStagingAzureStorageAccountId)}
    if self.diskType != nil {try container.encode(self.diskType, forKey: .diskType)}
    if self.resyncRequired != nil {try container.encode(self.resyncRequired, forKey: .resyncRequired)}
    if self.monitoringPercentageCompletion != nil {try container.encode(self.monitoringPercentageCompletion, forKey: .monitoringPercentageCompletion)}
    if self.monitoringJobType != nil {try container.encode(self.monitoringJobType, forKey: .monitoringJobType)}
    if self.dataPendingInStagingStorageAccountInMB != nil {try container.encode(self.dataPendingInStagingStorageAccountInMB, forKey: .dataPendingInStagingStorageAccountInMB)}
    if self.dataPendingAtSourceAgentInMB != nil {try container.encode(self.dataPendingAtSourceAgentInMB, forKey: .dataPendingAtSourceAgentInMB)}
  }
}

extension DataFactory {
  public static func createA2AProtectedManagedDiskDetailsProtocol() -> A2AProtectedManagedDiskDetailsProtocol {
    return A2AProtectedManagedDiskDetailsData()
  }
}
