// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VMNicDetailsData : VMNicDetailsProtocol {
    public var nicId: String?
    public var replicaNicId: String?
    public var sourceNicArmId: String?
    public var vMSubnetName: String?
    public var vMNetworkName: String?
    public var recoveryVMNetworkId: String?
    public var recoveryVMSubnetName: String?
    public var ipAddressType: String?
    public var primaryNicStaticIPAddress: String?
    public var replicaNicStaticIPAddress: String?
    public var selectionType: String?
    public var recoveryNicIpAddressType: String?

        enum CodingKeys: String, CodingKey {case nicId = "nicId"
        case replicaNicId = "replicaNicId"
        case sourceNicArmId = "sourceNicArmId"
        case vMSubnetName = "vMSubnetName"
        case vMNetworkName = "vMNetworkName"
        case recoveryVMNetworkId = "recoveryVMNetworkId"
        case recoveryVMSubnetName = "recoveryVMSubnetName"
        case ipAddressType = "ipAddressType"
        case primaryNicStaticIPAddress = "primaryNicStaticIPAddress"
        case replicaNicStaticIPAddress = "replicaNicStaticIPAddress"
        case selectionType = "selectionType"
        case recoveryNicIpAddressType = "recoveryNicIpAddressType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.nicId) {
        self.nicId = try container.decode(String?.self, forKey: .nicId)
    }
    if container.contains(.replicaNicId) {
        self.replicaNicId = try container.decode(String?.self, forKey: .replicaNicId)
    }
    if container.contains(.sourceNicArmId) {
        self.sourceNicArmId = try container.decode(String?.self, forKey: .sourceNicArmId)
    }
    if container.contains(.vMSubnetName) {
        self.vMSubnetName = try container.decode(String?.self, forKey: .vMSubnetName)
    }
    if container.contains(.vMNetworkName) {
        self.vMNetworkName = try container.decode(String?.self, forKey: .vMNetworkName)
    }
    if container.contains(.recoveryVMNetworkId) {
        self.recoveryVMNetworkId = try container.decode(String?.self, forKey: .recoveryVMNetworkId)
    }
    if container.contains(.recoveryVMSubnetName) {
        self.recoveryVMSubnetName = try container.decode(String?.self, forKey: .recoveryVMSubnetName)
    }
    if container.contains(.ipAddressType) {
        self.ipAddressType = try container.decode(String?.self, forKey: .ipAddressType)
    }
    if container.contains(.primaryNicStaticIPAddress) {
        self.primaryNicStaticIPAddress = try container.decode(String?.self, forKey: .primaryNicStaticIPAddress)
    }
    if container.contains(.replicaNicStaticIPAddress) {
        self.replicaNicStaticIPAddress = try container.decode(String?.self, forKey: .replicaNicStaticIPAddress)
    }
    if container.contains(.selectionType) {
        self.selectionType = try container.decode(String?.self, forKey: .selectionType)
    }
    if container.contains(.recoveryNicIpAddressType) {
        self.recoveryNicIpAddressType = try container.decode(String?.self, forKey: .recoveryNicIpAddressType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.nicId != nil {try container.encode(self.nicId, forKey: .nicId)}
    if self.replicaNicId != nil {try container.encode(self.replicaNicId, forKey: .replicaNicId)}
    if self.sourceNicArmId != nil {try container.encode(self.sourceNicArmId, forKey: .sourceNicArmId)}
    if self.vMSubnetName != nil {try container.encode(self.vMSubnetName, forKey: .vMSubnetName)}
    if self.vMNetworkName != nil {try container.encode(self.vMNetworkName, forKey: .vMNetworkName)}
    if self.recoveryVMNetworkId != nil {try container.encode(self.recoveryVMNetworkId, forKey: .recoveryVMNetworkId)}
    if self.recoveryVMSubnetName != nil {try container.encode(self.recoveryVMSubnetName, forKey: .recoveryVMSubnetName)}
    if self.ipAddressType != nil {try container.encode(self.ipAddressType, forKey: .ipAddressType)}
    if self.primaryNicStaticIPAddress != nil {try container.encode(self.primaryNicStaticIPAddress, forKey: .primaryNicStaticIPAddress)}
    if self.replicaNicStaticIPAddress != nil {try container.encode(self.replicaNicStaticIPAddress, forKey: .replicaNicStaticIPAddress)}
    if self.selectionType != nil {try container.encode(self.selectionType, forKey: .selectionType)}
    if self.recoveryNicIpAddressType != nil {try container.encode(self.recoveryNicIpAddressType, forKey: .recoveryNicIpAddressType)}
  }
}

extension DataFactory {
  public static func createVMNicDetailsProtocol() -> VMNicDetailsProtocol {
    return VMNicDetailsData()
  }
}
