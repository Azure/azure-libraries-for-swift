// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct A2AVmManagedDiskInputDetailsData : A2AVmManagedDiskInputDetailsProtocol {
    public var diskId: String?
    public var primaryStagingAzureStorageAccountId: String?
    public var recoveryResourceGroupId: String?
    public var recoveryReplicaDiskAccountType: String?
    public var recoveryTargetDiskAccountType: String?

        enum CodingKeys: String, CodingKey {case diskId = "diskId"
        case primaryStagingAzureStorageAccountId = "primaryStagingAzureStorageAccountId"
        case recoveryResourceGroupId = "recoveryResourceGroupId"
        case recoveryReplicaDiskAccountType = "recoveryReplicaDiskAccountType"
        case recoveryTargetDiskAccountType = "recoveryTargetDiskAccountType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.diskId) {
        self.diskId = try container.decode(String?.self, forKey: .diskId)
    }
    if container.contains(.primaryStagingAzureStorageAccountId) {
        self.primaryStagingAzureStorageAccountId = try container.decode(String?.self, forKey: .primaryStagingAzureStorageAccountId)
    }
    if container.contains(.recoveryResourceGroupId) {
        self.recoveryResourceGroupId = try container.decode(String?.self, forKey: .recoveryResourceGroupId)
    }
    if container.contains(.recoveryReplicaDiskAccountType) {
        self.recoveryReplicaDiskAccountType = try container.decode(String?.self, forKey: .recoveryReplicaDiskAccountType)
    }
    if container.contains(.recoveryTargetDiskAccountType) {
        self.recoveryTargetDiskAccountType = try container.decode(String?.self, forKey: .recoveryTargetDiskAccountType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.diskId != nil {try container.encode(self.diskId, forKey: .diskId)}
    if self.primaryStagingAzureStorageAccountId != nil {try container.encode(self.primaryStagingAzureStorageAccountId, forKey: .primaryStagingAzureStorageAccountId)}
    if self.recoveryResourceGroupId != nil {try container.encode(self.recoveryResourceGroupId, forKey: .recoveryResourceGroupId)}
    if self.recoveryReplicaDiskAccountType != nil {try container.encode(self.recoveryReplicaDiskAccountType, forKey: .recoveryReplicaDiskAccountType)}
    if self.recoveryTargetDiskAccountType != nil {try container.encode(self.recoveryTargetDiskAccountType, forKey: .recoveryTargetDiskAccountType)}
  }
}

extension DataFactory {
  public static func createA2AVmManagedDiskInputDetailsProtocol() -> A2AVmManagedDiskInputDetailsProtocol {
    return A2AVmManagedDiskInputDetailsData()
  }
}
