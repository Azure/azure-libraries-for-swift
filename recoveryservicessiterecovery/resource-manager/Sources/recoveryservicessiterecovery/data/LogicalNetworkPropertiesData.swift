// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LogicalNetworkPropertiesData : LogicalNetworkPropertiesProtocol {
    public var friendlyName: String?
    public var networkVirtualizationStatus: String?
    public var logicalNetworkUsage: String?
    public var logicalNetworkDefinitionsStatus: String?

        enum CodingKeys: String, CodingKey {case friendlyName = "friendlyName"
        case networkVirtualizationStatus = "networkVirtualizationStatus"
        case logicalNetworkUsage = "logicalNetworkUsage"
        case logicalNetworkDefinitionsStatus = "logicalNetworkDefinitionsStatus"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.networkVirtualizationStatus) {
        self.networkVirtualizationStatus = try container.decode(String?.self, forKey: .networkVirtualizationStatus)
    }
    if container.contains(.logicalNetworkUsage) {
        self.logicalNetworkUsage = try container.decode(String?.self, forKey: .logicalNetworkUsage)
    }
    if container.contains(.logicalNetworkDefinitionsStatus) {
        self.logicalNetworkDefinitionsStatus = try container.decode(String?.self, forKey: .logicalNetworkDefinitionsStatus)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.networkVirtualizationStatus != nil {try container.encode(self.networkVirtualizationStatus, forKey: .networkVirtualizationStatus)}
    if self.logicalNetworkUsage != nil {try container.encode(self.logicalNetworkUsage, forKey: .logicalNetworkUsage)}
    if self.logicalNetworkDefinitionsStatus != nil {try container.encode(self.logicalNetworkDefinitionsStatus, forKey: .logicalNetworkDefinitionsStatus)}
  }
}

extension DataFactory {
  public static func createLogicalNetworkPropertiesProtocol() -> LogicalNetworkPropertiesProtocol {
    return LogicalNetworkPropertiesData()
  }
}
