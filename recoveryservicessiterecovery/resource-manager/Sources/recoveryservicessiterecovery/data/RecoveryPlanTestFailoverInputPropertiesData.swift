// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecoveryPlanTestFailoverInputPropertiesData : RecoveryPlanTestFailoverInputPropertiesProtocol {
    public var failoverDirection: PossibleOperationsDirectionsEnum
    public var networkType: String
    public var networkId: String?
    public var skipTestFailoverCleanup: String?
    public var providerSpecificDetails: [RecoveryPlanProviderSpecificFailoverInputProtocol?]?

        enum CodingKeys: String, CodingKey {case failoverDirection = "failoverDirection"
        case networkType = "networkType"
        case networkId = "networkId"
        case skipTestFailoverCleanup = "skipTestFailoverCleanup"
        case providerSpecificDetails = "providerSpecificDetails"
        }

  public init(failoverDirection: PossibleOperationsDirectionsEnum, networkType: String)  {
    self.failoverDirection = failoverDirection
    self.networkType = networkType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.failoverDirection = try container.decode(PossibleOperationsDirectionsEnum.self, forKey: .failoverDirection)
    self.networkType = try container.decode(String.self, forKey: .networkType)
    if container.contains(.networkId) {
        self.networkId = try container.decode(String?.self, forKey: .networkId)
    }
    if container.contains(.skipTestFailoverCleanup) {
        self.skipTestFailoverCleanup = try container.decode(String?.self, forKey: .skipTestFailoverCleanup)
    }
    if container.contains(.providerSpecificDetails) {
        self.providerSpecificDetails = try container.decode([RecoveryPlanProviderSpecificFailoverInputData?]?.self, forKey: .providerSpecificDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.failoverDirection, forKey: .failoverDirection)
    try container.encode(self.networkType, forKey: .networkType)
    if self.networkId != nil {try container.encode(self.networkId, forKey: .networkId)}
    if self.skipTestFailoverCleanup != nil {try container.encode(self.skipTestFailoverCleanup, forKey: .skipTestFailoverCleanup)}
    if self.providerSpecificDetails != nil {try container.encode(self.providerSpecificDetails as! [RecoveryPlanProviderSpecificFailoverInputData?]?, forKey: .providerSpecificDetails)}
  }
}

extension DataFactory {
  public static func createRecoveryPlanTestFailoverInputPropertiesProtocol(failoverDirection: PossibleOperationsDirectionsEnum, networkType: String) -> RecoveryPlanTestFailoverInputPropertiesProtocol {
    return RecoveryPlanTestFailoverInputPropertiesData(failoverDirection: failoverDirection, networkType: networkType)
  }
}
