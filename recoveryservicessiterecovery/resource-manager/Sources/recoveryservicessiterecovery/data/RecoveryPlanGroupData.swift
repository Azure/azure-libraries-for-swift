// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecoveryPlanGroupData : RecoveryPlanGroupProtocol {
    public var groupType: RecoveryPlanGroupTypeEnum
    public var replicationProtectedItems: [RecoveryPlanProtectedItemProtocol?]?
    public var startGroupActions: [RecoveryPlanActionProtocol?]?
    public var endGroupActions: [RecoveryPlanActionProtocol?]?

        enum CodingKeys: String, CodingKey {case groupType = "groupType"
        case replicationProtectedItems = "replicationProtectedItems"
        case startGroupActions = "startGroupActions"
        case endGroupActions = "endGroupActions"
        }

  public init(groupType: RecoveryPlanGroupTypeEnum)  {
    self.groupType = groupType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.groupType = try container.decode(RecoveryPlanGroupTypeEnum.self, forKey: .groupType)
    if container.contains(.replicationProtectedItems) {
        self.replicationProtectedItems = try container.decode([RecoveryPlanProtectedItemData?]?.self, forKey: .replicationProtectedItems)
    }
    if container.contains(.startGroupActions) {
        self.startGroupActions = try container.decode([RecoveryPlanActionData?]?.self, forKey: .startGroupActions)
    }
    if container.contains(.endGroupActions) {
        self.endGroupActions = try container.decode([RecoveryPlanActionData?]?.self, forKey: .endGroupActions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.groupType, forKey: .groupType)
    if self.replicationProtectedItems != nil {try container.encode(self.replicationProtectedItems as! [RecoveryPlanProtectedItemData?]?, forKey: .replicationProtectedItems)}
    if self.startGroupActions != nil {try container.encode(self.startGroupActions as! [RecoveryPlanActionData?]?, forKey: .startGroupActions)}
    if self.endGroupActions != nil {try container.encode(self.endGroupActions as! [RecoveryPlanActionData?]?, forKey: .endGroupActions)}
  }
}

extension DataFactory {
  public static func createRecoveryPlanGroupProtocol(groupType: RecoveryPlanGroupTypeEnum) -> RecoveryPlanGroupProtocol {
    return RecoveryPlanGroupData(groupType: groupType)
  }
}
