// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ASRTaskData : ASRTaskProtocol {
    public var taskId: String?
    public var name: String?
    public var startTime: Date?
    public var endTime: Date?
    public var allowedActions: [String]?
    public var friendlyName: String?
    public var state: String?
    public var stateDescription: String?
    public var taskType: String?
    public var customDetails: TaskTypeDetailsProtocol?
    public var groupTaskCustomDetails: GroupTaskDetailsProtocol?
    public var errors: [JobErrorDetailsProtocol?]?

        enum CodingKeys: String, CodingKey {case taskId = "taskId"
        case name = "name"
        case startTime = "startTime"
        case endTime = "endTime"
        case allowedActions = "allowedActions"
        case friendlyName = "friendlyName"
        case state = "state"
        case stateDescription = "stateDescription"
        case taskType = "taskType"
        case customDetails = "customDetails"
        case groupTaskCustomDetails = "groupTaskCustomDetails"
        case errors = "errors"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.taskId) {
        self.taskId = try container.decode(String?.self, forKey: .taskId)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.allowedActions) {
        self.allowedActions = try container.decode([String]?.self, forKey: .allowedActions)
    }
    if container.contains(.friendlyName) {
        self.friendlyName = try container.decode(String?.self, forKey: .friendlyName)
    }
    if container.contains(.state) {
        self.state = try container.decode(String?.self, forKey: .state)
    }
    if container.contains(.stateDescription) {
        self.stateDescription = try container.decode(String?.self, forKey: .stateDescription)
    }
    if container.contains(.taskType) {
        self.taskType = try container.decode(String?.self, forKey: .taskType)
    }
    if container.contains(.customDetails) {
        self.customDetails = try container.decode(TaskTypeDetailsData?.self, forKey: .customDetails)
    }
    if container.contains(.groupTaskCustomDetails) {
        self.groupTaskCustomDetails = try container.decode(GroupTaskDetailsData?.self, forKey: .groupTaskCustomDetails)
    }
    if container.contains(.errors) {
        self.errors = try container.decode([JobErrorDetailsData?]?.self, forKey: .errors)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.taskId != nil {try container.encode(self.taskId, forKey: .taskId)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.allowedActions != nil {try container.encode(self.allowedActions as! [String]?, forKey: .allowedActions)}
    if self.friendlyName != nil {try container.encode(self.friendlyName, forKey: .friendlyName)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.stateDescription != nil {try container.encode(self.stateDescription, forKey: .stateDescription)}
    if self.taskType != nil {try container.encode(self.taskType, forKey: .taskType)}
    if self.customDetails != nil {try container.encode(self.customDetails as! TaskTypeDetailsData?, forKey: .customDetails)}
    if self.groupTaskCustomDetails != nil {try container.encode(self.groupTaskCustomDetails as! GroupTaskDetailsData?, forKey: .groupTaskCustomDetails)}
    if self.errors != nil {try container.encode(self.errors as! [JobErrorDetailsData?]?, forKey: .errors)}
  }
}

extension DataFactory {
  public static func createASRTaskProtocol() -> ASRTaskProtocol {
    return ASRTaskData()
  }
}
