// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct InMageEnableProtectionInputData : InMageEnableProtectionInputProtocol, EnableProtectionProviderSpecificInputProtocol {
    public var vmFriendlyName: String?
    public var masterTargetId: String
    public var processServerId: String
    public var retentionDrive: String
    public var runAsAccountId: String?
    public var multiVmGroupId: String
    public var multiVmGroupName: String
    public var datastoreName: String?
    public var diskExclusionInput: InMageDiskExclusionInputProtocol?
    public var disksToInclude: [String]?

        enum CodingKeys: String, CodingKey {case vmFriendlyName = "vmFriendlyName"
        case masterTargetId = "masterTargetId"
        case processServerId = "processServerId"
        case retentionDrive = "retentionDrive"
        case runAsAccountId = "runAsAccountId"
        case multiVmGroupId = "multiVmGroupId"
        case multiVmGroupName = "multiVmGroupName"
        case datastoreName = "datastoreName"
        case diskExclusionInput = "diskExclusionInput"
        case disksToInclude = "disksToInclude"
        }

  public init(masterTargetId: String, processServerId: String, retentionDrive: String, multiVmGroupId: String, multiVmGroupName: String)  {
    self.masterTargetId = masterTargetId
    self.processServerId = processServerId
    self.retentionDrive = retentionDrive
    self.multiVmGroupId = multiVmGroupId
    self.multiVmGroupName = multiVmGroupName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.vmFriendlyName) {
        self.vmFriendlyName = try container.decode(String?.self, forKey: .vmFriendlyName)
    }
    self.masterTargetId = try container.decode(String.self, forKey: .masterTargetId)
    self.processServerId = try container.decode(String.self, forKey: .processServerId)
    self.retentionDrive = try container.decode(String.self, forKey: .retentionDrive)
    if container.contains(.runAsAccountId) {
        self.runAsAccountId = try container.decode(String?.self, forKey: .runAsAccountId)
    }
    self.multiVmGroupId = try container.decode(String.self, forKey: .multiVmGroupId)
    self.multiVmGroupName = try container.decode(String.self, forKey: .multiVmGroupName)
    if container.contains(.datastoreName) {
        self.datastoreName = try container.decode(String?.self, forKey: .datastoreName)
    }
    if container.contains(.diskExclusionInput) {
        self.diskExclusionInput = try container.decode(InMageDiskExclusionInputData?.self, forKey: .diskExclusionInput)
    }
    if container.contains(.disksToInclude) {
        self.disksToInclude = try container.decode([String]?.self, forKey: .disksToInclude)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.vmFriendlyName != nil {try container.encode(self.vmFriendlyName, forKey: .vmFriendlyName)}
    try container.encode(self.masterTargetId, forKey: .masterTargetId)
    try container.encode(self.processServerId, forKey: .processServerId)
    try container.encode(self.retentionDrive, forKey: .retentionDrive)
    if self.runAsAccountId != nil {try container.encode(self.runAsAccountId, forKey: .runAsAccountId)}
    try container.encode(self.multiVmGroupId, forKey: .multiVmGroupId)
    try container.encode(self.multiVmGroupName, forKey: .multiVmGroupName)
    if self.datastoreName != nil {try container.encode(self.datastoreName, forKey: .datastoreName)}
    if self.diskExclusionInput != nil {try container.encode(self.diskExclusionInput as! InMageDiskExclusionInputData?, forKey: .diskExclusionInput)}
    if self.disksToInclude != nil {try container.encode(self.disksToInclude as! [String]?, forKey: .disksToInclude)}
  }
}

extension DataFactory {
  public static func createInMageEnableProtectionInputProtocol(masterTargetId: String, processServerId: String, retentionDrive: String, multiVmGroupId: String, multiVmGroupName: String) -> InMageEnableProtectionInputProtocol {
    return InMageEnableProtectionInputData(masterTargetId: masterTargetId, processServerId: processServerId, retentionDrive: retentionDrive, multiVmGroupId: multiVmGroupId, multiVmGroupName: multiVmGroupName)
  }
}
