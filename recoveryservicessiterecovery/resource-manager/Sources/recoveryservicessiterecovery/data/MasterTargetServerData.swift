// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct MasterTargetServerData : MasterTargetServerProtocol {
    public var id: String?
    public var ipAddress: String?
    public var name: String?
    public var osType: String?
    public var agentVersion: String?
    public var lastHeartbeat: Date?
    public var versionStatus: String?
    public var retentionVolumes: [RetentionVolumeProtocol?]?
    public var dataStores: [DataStoreProtocol?]?
    public var validationErrors: [HealthErrorProtocol?]?
    public var healthErrors: [HealthErrorProtocol?]?
    public var diskCount: Int32?
    public var osVersion: String?
    public var agentExpiryDate: Date?
    public var marsAgentVersion: String?
    public var marsAgentExpiryDate: Date?
    public var agentVersionDetails: VersionDetailsProtocol?
    public var marsAgentVersionDetails: VersionDetailsProtocol?

        enum CodingKeys: String, CodingKey {case id = "id"
        case ipAddress = "ipAddress"
        case name = "name"
        case osType = "osType"
        case agentVersion = "agentVersion"
        case lastHeartbeat = "lastHeartbeat"
        case versionStatus = "versionStatus"
        case retentionVolumes = "retentionVolumes"
        case dataStores = "dataStores"
        case validationErrors = "validationErrors"
        case healthErrors = "healthErrors"
        case diskCount = "diskCount"
        case osVersion = "osVersion"
        case agentExpiryDate = "agentExpiryDate"
        case marsAgentVersion = "marsAgentVersion"
        case marsAgentExpiryDate = "marsAgentExpiryDate"
        case agentVersionDetails = "agentVersionDetails"
        case marsAgentVersionDetails = "marsAgentVersionDetails"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.ipAddress) {
        self.ipAddress = try container.decode(String?.self, forKey: .ipAddress)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.agentVersion) {
        self.agentVersion = try container.decode(String?.self, forKey: .agentVersion)
    }
    if container.contains(.lastHeartbeat) {
        self.lastHeartbeat = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastHeartbeat)), format: .dateTime)
    }
    if container.contains(.versionStatus) {
        self.versionStatus = try container.decode(String?.self, forKey: .versionStatus)
    }
    if container.contains(.retentionVolumes) {
        self.retentionVolumes = try container.decode([RetentionVolumeData?]?.self, forKey: .retentionVolumes)
    }
    if container.contains(.dataStores) {
        self.dataStores = try container.decode([DataStoreData?]?.self, forKey: .dataStores)
    }
    if container.contains(.validationErrors) {
        self.validationErrors = try container.decode([HealthErrorData?]?.self, forKey: .validationErrors)
    }
    if container.contains(.healthErrors) {
        self.healthErrors = try container.decode([HealthErrorData?]?.self, forKey: .healthErrors)
    }
    if container.contains(.diskCount) {
        self.diskCount = try container.decode(Int32?.self, forKey: .diskCount)
    }
    if container.contains(.osVersion) {
        self.osVersion = try container.decode(String?.self, forKey: .osVersion)
    }
    if container.contains(.agentExpiryDate) {
        self.agentExpiryDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .agentExpiryDate)), format: .dateTime)
    }
    if container.contains(.marsAgentVersion) {
        self.marsAgentVersion = try container.decode(String?.self, forKey: .marsAgentVersion)
    }
    if container.contains(.marsAgentExpiryDate) {
        self.marsAgentExpiryDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .marsAgentExpiryDate)), format: .dateTime)
    }
    if container.contains(.agentVersionDetails) {
        self.agentVersionDetails = try container.decode(VersionDetailsData?.self, forKey: .agentVersionDetails)
    }
    if container.contains(.marsAgentVersionDetails) {
        self.marsAgentVersionDetails = try container.decode(VersionDetailsData?.self, forKey: .marsAgentVersionDetails)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.ipAddress != nil {try container.encode(self.ipAddress, forKey: .ipAddress)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.agentVersion != nil {try container.encode(self.agentVersion, forKey: .agentVersion)}
    if self.lastHeartbeat != nil {
        try container.encode(DateConverter.toString(date: self.lastHeartbeat!, format: .dateTime), forKey: .lastHeartbeat)
    }
    if self.versionStatus != nil {try container.encode(self.versionStatus, forKey: .versionStatus)}
    if self.retentionVolumes != nil {try container.encode(self.retentionVolumes as! [RetentionVolumeData?]?, forKey: .retentionVolumes)}
    if self.dataStores != nil {try container.encode(self.dataStores as! [DataStoreData?]?, forKey: .dataStores)}
    if self.validationErrors != nil {try container.encode(self.validationErrors as! [HealthErrorData?]?, forKey: .validationErrors)}
    if self.healthErrors != nil {try container.encode(self.healthErrors as! [HealthErrorData?]?, forKey: .healthErrors)}
    if self.diskCount != nil {try container.encode(self.diskCount, forKey: .diskCount)}
    if self.osVersion != nil {try container.encode(self.osVersion, forKey: .osVersion)}
    if self.agentExpiryDate != nil {
        try container.encode(DateConverter.toString(date: self.agentExpiryDate!, format: .dateTime), forKey: .agentExpiryDate)
    }
    if self.marsAgentVersion != nil {try container.encode(self.marsAgentVersion, forKey: .marsAgentVersion)}
    if self.marsAgentExpiryDate != nil {
        try container.encode(DateConverter.toString(date: self.marsAgentExpiryDate!, format: .dateTime), forKey: .marsAgentExpiryDate)
    }
    if self.agentVersionDetails != nil {try container.encode(self.agentVersionDetails as! VersionDetailsData?, forKey: .agentVersionDetails)}
    if self.marsAgentVersionDetails != nil {try container.encode(self.marsAgentVersionDetails as! VersionDetailsData?, forKey: .marsAgentVersionDetails)}
  }
}

extension DataFactory {
  public static func createMasterTargetServerProtocol() -> MasterTargetServerProtocol {
    return MasterTargetServerData()
  }
}
