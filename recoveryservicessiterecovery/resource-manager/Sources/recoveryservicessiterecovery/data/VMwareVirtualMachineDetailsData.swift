// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VMwareVirtualMachineDetailsData : VMwareVirtualMachineDetailsProtocol, ConfigurationSettingsProtocol {
    public var agentGeneratedId: String?
    public var agentInstalled: String?
    public var osType: String?
    public var agentVersion: String?
    public var ipAddress: String?
    public var poweredOn: String?
    public var vCenterInfrastructureId: String?
    public var discoveryType: String?
    public var diskDetails: [InMageDiskDetailsProtocol?]?
    public var validationErrors: [HealthErrorProtocol?]?

        enum CodingKeys: String, CodingKey {case agentGeneratedId = "agentGeneratedId"
        case agentInstalled = "agentInstalled"
        case osType = "osType"
        case agentVersion = "agentVersion"
        case ipAddress = "ipAddress"
        case poweredOn = "poweredOn"
        case vCenterInfrastructureId = "vCenterInfrastructureId"
        case discoveryType = "discoveryType"
        case diskDetails = "diskDetails"
        case validationErrors = "validationErrors"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.agentGeneratedId) {
        self.agentGeneratedId = try container.decode(String?.self, forKey: .agentGeneratedId)
    }
    if container.contains(.agentInstalled) {
        self.agentInstalled = try container.decode(String?.self, forKey: .agentInstalled)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.agentVersion) {
        self.agentVersion = try container.decode(String?.self, forKey: .agentVersion)
    }
    if container.contains(.ipAddress) {
        self.ipAddress = try container.decode(String?.self, forKey: .ipAddress)
    }
    if container.contains(.poweredOn) {
        self.poweredOn = try container.decode(String?.self, forKey: .poweredOn)
    }
    if container.contains(.vCenterInfrastructureId) {
        self.vCenterInfrastructureId = try container.decode(String?.self, forKey: .vCenterInfrastructureId)
    }
    if container.contains(.discoveryType) {
        self.discoveryType = try container.decode(String?.self, forKey: .discoveryType)
    }
    if container.contains(.diskDetails) {
        self.diskDetails = try container.decode([InMageDiskDetailsData?]?.self, forKey: .diskDetails)
    }
    if container.contains(.validationErrors) {
        self.validationErrors = try container.decode([HealthErrorData?]?.self, forKey: .validationErrors)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.agentGeneratedId != nil {try container.encode(self.agentGeneratedId, forKey: .agentGeneratedId)}
    if self.agentInstalled != nil {try container.encode(self.agentInstalled, forKey: .agentInstalled)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.agentVersion != nil {try container.encode(self.agentVersion, forKey: .agentVersion)}
    if self.ipAddress != nil {try container.encode(self.ipAddress, forKey: .ipAddress)}
    if self.poweredOn != nil {try container.encode(self.poweredOn, forKey: .poweredOn)}
    if self.vCenterInfrastructureId != nil {try container.encode(self.vCenterInfrastructureId, forKey: .vCenterInfrastructureId)}
    if self.discoveryType != nil {try container.encode(self.discoveryType, forKey: .discoveryType)}
    if self.diskDetails != nil {try container.encode(self.diskDetails as! [InMageDiskDetailsData?]?, forKey: .diskDetails)}
    if self.validationErrors != nil {try container.encode(self.validationErrors as! [HealthErrorData?]?, forKey: .validationErrors)}
  }
}

extension DataFactory {
  public static func createVMwareVirtualMachineDetailsProtocol() -> VMwareVirtualMachineDetailsProtocol {
    return VMwareVirtualMachineDetailsData()
  }
}
