// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct OSDiskDetailsData : OSDiskDetailsProtocol {
    public var osVhdId: String?
    public var osType: String?
    public var vhdName: String?

        enum CodingKeys: String, CodingKey {case osVhdId = "osVhdId"
        case osType = "osType"
        case vhdName = "vhdName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.osVhdId) {
        self.osVhdId = try container.decode(String?.self, forKey: .osVhdId)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(String?.self, forKey: .osType)
    }
    if container.contains(.vhdName) {
        self.vhdName = try container.decode(String?.self, forKey: .vhdName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.osVhdId != nil {try container.encode(self.osVhdId, forKey: .osVhdId)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.vhdName != nil {try container.encode(self.vhdName, forKey: .vhdName)}
  }
}

extension DataFactory {
  public static func createOSDiskDetailsProtocol() -> OSDiskDetailsProtocol {
    return OSDiskDetailsData()
  }
}
