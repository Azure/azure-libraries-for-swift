// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RecoveryPlanA2AFailoverInputData : RecoveryPlanA2AFailoverInputProtocol, RecoveryPlanProviderSpecificFailoverInputProtocol {
    public var recoveryPointType: A2ARpRecoveryPointTypeEnum
    public var cloudServiceCreationOption: String?

        enum CodingKeys: String, CodingKey {case recoveryPointType = "recoveryPointType"
        case cloudServiceCreationOption = "cloudServiceCreationOption"
        }

  public init(recoveryPointType: A2ARpRecoveryPointTypeEnum)  {
    self.recoveryPointType = recoveryPointType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.recoveryPointType = try container.decode(A2ARpRecoveryPointTypeEnum.self, forKey: .recoveryPointType)
    if container.contains(.cloudServiceCreationOption) {
        self.cloudServiceCreationOption = try container.decode(String?.self, forKey: .cloudServiceCreationOption)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.recoveryPointType, forKey: .recoveryPointType)
    if self.cloudServiceCreationOption != nil {try container.encode(self.cloudServiceCreationOption, forKey: .cloudServiceCreationOption)}
  }
}

extension DataFactory {
  public static func createRecoveryPlanA2AFailoverInputProtocol(recoveryPointType: A2ARpRecoveryPointTypeEnum) -> RecoveryPlanA2AFailoverInputProtocol {
    return RecoveryPlanA2AFailoverInputData(recoveryPointType: recoveryPointType)
  }
}
