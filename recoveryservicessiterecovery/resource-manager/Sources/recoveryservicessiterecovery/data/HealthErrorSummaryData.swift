// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct HealthErrorSummaryData : HealthErrorSummaryProtocol {
    public var summaryCode: String?
    public var category: HealthErrorCategoryEnum?
    public var severity: SeverityEnum?
    public var summaryMessage: String?
    public var affectedResourceType: String?
    public var affectedResourceSubtype: String?
    public var affectedResourceCorrelationIds: [String]?

        enum CodingKeys: String, CodingKey {case summaryCode = "summaryCode"
        case category = "category"
        case severity = "severity"
        case summaryMessage = "summaryMessage"
        case affectedResourceType = "affectedResourceType"
        case affectedResourceSubtype = "affectedResourceSubtype"
        case affectedResourceCorrelationIds = "affectedResourceCorrelationIds"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.summaryCode) {
        self.summaryCode = try container.decode(String?.self, forKey: .summaryCode)
    }
    if container.contains(.category) {
        self.category = try container.decode(HealthErrorCategoryEnum?.self, forKey: .category)
    }
    if container.contains(.severity) {
        self.severity = try container.decode(SeverityEnum?.self, forKey: .severity)
    }
    if container.contains(.summaryMessage) {
        self.summaryMessage = try container.decode(String?.self, forKey: .summaryMessage)
    }
    if container.contains(.affectedResourceType) {
        self.affectedResourceType = try container.decode(String?.self, forKey: .affectedResourceType)
    }
    if container.contains(.affectedResourceSubtype) {
        self.affectedResourceSubtype = try container.decode(String?.self, forKey: .affectedResourceSubtype)
    }
    if container.contains(.affectedResourceCorrelationIds) {
        self.affectedResourceCorrelationIds = try container.decode([String]?.self, forKey: .affectedResourceCorrelationIds)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.summaryCode != nil {try container.encode(self.summaryCode, forKey: .summaryCode)}
    if self.category != nil {try container.encode(self.category, forKey: .category)}
    if self.severity != nil {try container.encode(self.severity, forKey: .severity)}
    if self.summaryMessage != nil {try container.encode(self.summaryMessage, forKey: .summaryMessage)}
    if self.affectedResourceType != nil {try container.encode(self.affectedResourceType, forKey: .affectedResourceType)}
    if self.affectedResourceSubtype != nil {try container.encode(self.affectedResourceSubtype, forKey: .affectedResourceSubtype)}
    if self.affectedResourceCorrelationIds != nil {try container.encode(self.affectedResourceCorrelationIds as! [String]?, forKey: .affectedResourceCorrelationIds)}
  }
}

extension DataFactory {
  public static func createHealthErrorSummaryProtocol() -> HealthErrorSummaryProtocol {
    return HealthErrorSummaryData()
  }
}
