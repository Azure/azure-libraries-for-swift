// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RetentionVolumeData : RetentionVolumeProtocol {
    public var volumeName: String?
    public var capacityInBytes: Int64?
    public var freeSpaceInBytes: Int64?
    public var thresholdPercentage: Int32?

        enum CodingKeys: String, CodingKey {case volumeName = "volumeName"
        case capacityInBytes = "capacityInBytes"
        case freeSpaceInBytes = "freeSpaceInBytes"
        case thresholdPercentage = "thresholdPercentage"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.volumeName) {
        self.volumeName = try container.decode(String?.self, forKey: .volumeName)
    }
    if container.contains(.capacityInBytes) {
        self.capacityInBytes = try container.decode(Int64?.self, forKey: .capacityInBytes)
    }
    if container.contains(.freeSpaceInBytes) {
        self.freeSpaceInBytes = try container.decode(Int64?.self, forKey: .freeSpaceInBytes)
    }
    if container.contains(.thresholdPercentage) {
        self.thresholdPercentage = try container.decode(Int32?.self, forKey: .thresholdPercentage)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.volumeName != nil {try container.encode(self.volumeName, forKey: .volumeName)}
    if self.capacityInBytes != nil {try container.encode(self.capacityInBytes, forKey: .capacityInBytes)}
    if self.freeSpaceInBytes != nil {try container.encode(self.freeSpaceInBytes, forKey: .freeSpaceInBytes)}
    if self.thresholdPercentage != nil {try container.encode(self.thresholdPercentage, forKey: .thresholdPercentage)}
  }
}

extension DataFactory {
  public static func createRetentionVolumeProtocol() -> RetentionVolumeProtocol {
    return RetentionVolumeData()
  }
}
