// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// ReplicationProtectedItems is the client for the ReplicationProtectedItems methods of the
// SiteRecoveryManagementClient service.
import Foundation
import azureSwiftRuntime
extension Commands {
public struct ReplicationProtectedItems {
    public static func ApplyRecoveryPoint(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, applyRecoveryPointInput: ApplyRecoveryPointInputProtocol) -> ReplicationProtectedItemsApplyRecoveryPoint {
        return ApplyRecoveryPointCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, applyRecoveryPointInput: applyRecoveryPointInput)
    }
    public static func Create(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, input: EnableProtectionInputProtocol) -> ReplicationProtectedItemsCreate {
        return CreateCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, input: input)
    }
    public static func Delete(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, disableProtectionInput: DisableProtectionInputProtocol) -> ReplicationProtectedItemsDelete {
        return DeleteCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, disableProtectionInput: disableProtectionInput)
    }
    public static func FailoverCommit(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String) -> ReplicationProtectedItemsFailoverCommit {
        return FailoverCommitCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName)
    }
    public static func Get(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String) -> ReplicationProtectedItemsGet {
        return GetCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName)
    }
    public static func List(resourceName: String, resourceGroupName: String, subscriptionId: String) -> ReplicationProtectedItemsList {
        return ListCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId)
    }
    public static func ListByReplicationProtectionContainers(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String) -> ReplicationProtectedItemsListByReplicationProtectionContainers {
        return ListByReplicationProtectionContainersCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName)
    }
    public static func PlannedFailover(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, failoverInput: PlannedFailoverInputProtocol) -> ReplicationProtectedItemsPlannedFailover {
        return PlannedFailoverCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, failoverInput: failoverInput)
    }
    public static func Purge(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String) -> ReplicationProtectedItemsPurge {
        return PurgeCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName)
    }
    public static func RepairReplication(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String) -> ReplicationProtectedItemsRepairReplication {
        return RepairReplicationCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName)
    }
    public static func Reprotect(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, rrInput: ReverseReplicationInputProtocol) -> ReplicationProtectedItemsReprotect {
        return ReprotectCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, rrInput: rrInput)
    }
    public static func TestFailover(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, failoverInput: TestFailoverInputProtocol) -> ReplicationProtectedItemsTestFailover {
        return TestFailoverCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, failoverInput: failoverInput)
    }
    public static func TestFailoverCleanup(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, cleanupInput: TestFailoverCleanupInputProtocol) -> ReplicationProtectedItemsTestFailoverCleanup {
        return TestFailoverCleanupCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, cleanupInput: cleanupInput)
    }
    public static func UnplannedFailover(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, failoverInput: UnplannedFailoverInputProtocol) -> ReplicationProtectedItemsUnplannedFailover {
        return UnplannedFailoverCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, failoverInput: failoverInput)
    }
    public static func Update(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicatedProtectedItemName: String, updateProtectionInput: UpdateReplicationProtectedItemInputProtocol) -> ReplicationProtectedItemsUpdate {
        return UpdateCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicatedProtectedItemName: replicatedProtectedItemName, updateProtectionInput: updateProtectionInput)
    }
    public static func UpdateMobilityService(resourceName: String, resourceGroupName: String, subscriptionId: String, fabricName: String, protectionContainerName: String, replicationProtectedItemName: String, updateMobilityServiceRequest: UpdateMobilityServiceRequestProtocol) -> ReplicationProtectedItemsUpdateMobilityService {
        return UpdateMobilityServiceCommand(resourceName: resourceName, resourceGroupName: resourceGroupName, subscriptionId: subscriptionId, fabricName: fabricName, protectionContainerName: protectionContainerName, replicationProtectedItemName: replicationProtectedItemName, updateMobilityServiceRequest: updateMobilityServiceRequest)
    }
}
}
