// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CertificatePropertiesData : CertificatePropertiesProtocol, CertificateBasePropertiesProtocol {
    public var thumbprintAlgorithm: String?
    public var thumbprint: String?
    public var format: CertificateFormatEnum?
    public var provisioningState: CertificateProvisioningStateEnum?
    public var provisioningStateTransitionTime: Date?
    public var previousProvisioningState: CertificateProvisioningStateEnum?
    public var previousProvisioningStateTransitionTime: Date?
    public var publicData: String?
    public var deleteCertificateError: DeleteCertificateErrorProtocol?

        enum CodingKeys: String, CodingKey {case thumbprintAlgorithm = "thumbprintAlgorithm"
        case thumbprint = "thumbprint"
        case format = "format"
        case provisioningState = "provisioningState"
        case provisioningStateTransitionTime = "provisioningStateTransitionTime"
        case previousProvisioningState = "previousProvisioningState"
        case previousProvisioningStateTransitionTime = "previousProvisioningStateTransitionTime"
        case publicData = "publicData"
        case deleteCertificateError = "deleteCertificateError"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.thumbprintAlgorithm) {
        self.thumbprintAlgorithm = try container.decode(String?.self, forKey: .thumbprintAlgorithm)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.format) {
        self.format = try container.decode(CertificateFormatEnum?.self, forKey: .format)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(CertificateProvisioningStateEnum?.self, forKey: .provisioningState)
    }
    if container.contains(.provisioningStateTransitionTime) {
        self.provisioningStateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .provisioningStateTransitionTime)), format: .dateTime)
    }
    if container.contains(.previousProvisioningState) {
        self.previousProvisioningState = try container.decode(CertificateProvisioningStateEnum?.self, forKey: .previousProvisioningState)
    }
    if container.contains(.previousProvisioningStateTransitionTime) {
        self.previousProvisioningStateTransitionTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .previousProvisioningStateTransitionTime)), format: .dateTime)
    }
    if container.contains(.publicData) {
        self.publicData = try container.decode(String?.self, forKey: .publicData)
    }
    if container.contains(.deleteCertificateError) {
        self.deleteCertificateError = try container.decode(DeleteCertificateErrorData?.self, forKey: .deleteCertificateError)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.thumbprintAlgorithm != nil {try container.encode(self.thumbprintAlgorithm, forKey: .thumbprintAlgorithm)}
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.format != nil {try container.encode(self.format, forKey: .format)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.provisioningStateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.provisioningStateTransitionTime!, format: .dateTime), forKey: .provisioningStateTransitionTime)
    }
    if self.previousProvisioningState != nil {try container.encode(self.previousProvisioningState, forKey: .previousProvisioningState)}
    if self.previousProvisioningStateTransitionTime != nil {
        try container.encode(DateConverter.toString(date: self.previousProvisioningStateTransitionTime!, format: .dateTime), forKey: .previousProvisioningStateTransitionTime)
    }
    if self.publicData != nil {try container.encode(self.publicData, forKey: .publicData)}
    if self.deleteCertificateError != nil {try container.encode(self.deleteCertificateError as! DeleteCertificateErrorData?, forKey: .deleteCertificateError)}
  }
}

extension DataFactory {
  public static func createCertificatePropertiesProtocol() -> CertificatePropertiesProtocol {
    return CertificatePropertiesData()
  }
}
