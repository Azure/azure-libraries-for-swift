// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct LinuxUserConfigurationData : LinuxUserConfigurationProtocol {
    public var uid: Int32?
    public var gid: Int32?
    public var sshPrivateKey: String?

        enum CodingKeys: String, CodingKey {case uid = "uid"
        case gid = "gid"
        case sshPrivateKey = "sshPrivateKey"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.uid) {
        self.uid = try container.decode(Int32?.self, forKey: .uid)
    }
    if container.contains(.gid) {
        self.gid = try container.decode(Int32?.self, forKey: .gid)
    }
    if container.contains(.sshPrivateKey) {
        self.sshPrivateKey = try container.decode(String?.self, forKey: .sshPrivateKey)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.uid != nil {try container.encode(self.uid, forKey: .uid)}
    if self.gid != nil {try container.encode(self.gid, forKey: .gid)}
    if self.sshPrivateKey != nil {try container.encode(self.sshPrivateKey, forKey: .sshPrivateKey)}
  }
}

extension DataFactory {
  public static func createLinuxUserConfigurationProtocol() -> LinuxUserConfigurationProtocol {
    return LinuxUserConfigurationData()
  }
}
