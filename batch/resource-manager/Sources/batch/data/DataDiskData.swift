// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DataDiskData : DataDiskProtocol {
    public var lun: Int32
    public var caching: CachingTypeEnum?
    public var diskSizeGB: Int32
    public var storageAccountType: StorageAccountTypeEnum?

        enum CodingKeys: String, CodingKey {case lun = "lun"
        case caching = "caching"
        case diskSizeGB = "diskSizeGB"
        case storageAccountType = "storageAccountType"
        }

  public init(lun: Int32, diskSizeGB: Int32)  {
    self.lun = lun
    self.diskSizeGB = diskSizeGB
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.lun = try container.decode(Int32.self, forKey: .lun)
    if container.contains(.caching) {
        self.caching = try container.decode(CachingTypeEnum?.self, forKey: .caching)
    }
    self.diskSizeGB = try container.decode(Int32.self, forKey: .diskSizeGB)
    if container.contains(.storageAccountType) {
        self.storageAccountType = try container.decode(StorageAccountTypeEnum?.self, forKey: .storageAccountType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.lun, forKey: .lun)
    if self.caching != nil {try container.encode(self.caching, forKey: .caching)}
    try container.encode(self.diskSizeGB, forKey: .diskSizeGB)
    if self.storageAccountType != nil {try container.encode(self.storageAccountType, forKey: .storageAccountType)}
  }
}

extension DataFactory {
  public static func createDataDiskProtocol(lun: Int32, diskSizeGB: Int32) -> DataDiskProtocol {
    return DataDiskData(lun: lun, diskSizeGB: diskSizeGB)
  }
}
