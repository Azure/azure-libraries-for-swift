// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ApplicationPackageData : ApplicationPackageProtocol {
    public var id: String?
    public var version: String?
    public var state: PackageStateEnum?
    public var format: String?
    public var storageUrl: String?
    public var storageUrlExpiry: Date?
    public var lastActivationTime: Date?

        enum CodingKeys: String, CodingKey {case id = "id"
        case version = "version"
        case state = "state"
        case format = "format"
        case storageUrl = "storageUrl"
        case storageUrlExpiry = "storageUrlExpiry"
        case lastActivationTime = "lastActivationTime"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.id) {
        self.id = try container.decode(String?.self, forKey: .id)
    }
    if container.contains(.version) {
        self.version = try container.decode(String?.self, forKey: .version)
    }
    if container.contains(.state) {
        self.state = try container.decode(PackageStateEnum?.self, forKey: .state)
    }
    if container.contains(.format) {
        self.format = try container.decode(String?.self, forKey: .format)
    }
    if container.contains(.storageUrl) {
        self.storageUrl = try container.decode(String?.self, forKey: .storageUrl)
    }
    if container.contains(.storageUrlExpiry) {
        self.storageUrlExpiry = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .storageUrlExpiry)), format: .dateTime)
    }
    if container.contains(.lastActivationTime) {
        self.lastActivationTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastActivationTime)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.version != nil {try container.encode(self.version, forKey: .version)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.format != nil {try container.encode(self.format, forKey: .format)}
    if self.storageUrl != nil {try container.encode(self.storageUrl, forKey: .storageUrl)}
    if self.storageUrlExpiry != nil {
        try container.encode(DateConverter.toString(date: self.storageUrlExpiry!, format: .dateTime), forKey: .storageUrlExpiry)
    }
    if self.lastActivationTime != nil {
        try container.encode(DateConverter.toString(date: self.lastActivationTime!, format: .dateTime), forKey: .lastActivationTime)
    }
  }
}

extension DataFactory {
  public static func createApplicationPackageProtocol() -> ApplicationPackageProtocol {
    return ApplicationPackageData()
  }
}
