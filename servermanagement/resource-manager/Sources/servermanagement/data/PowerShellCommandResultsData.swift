// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PowerShellCommandResultsData : PowerShellCommandResultsProtocol {
    public var results: [PowerShellCommandResultProtocol?]?
    public var pssession: String?
    public var command: String?
    public var completed: Bool?

        enum CodingKeys: String, CodingKey {case results = "results"
        case pssession = "pssession"
        case command = "command"
        case completed = "completed"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.results) {
        self.results = try container.decode([PowerShellCommandResultData?]?.self, forKey: .results)
    }
    if container.contains(.pssession) {
        self.pssession = try container.decode(String?.self, forKey: .pssession)
    }
    if container.contains(.command) {
        self.command = try container.decode(String?.self, forKey: .command)
    }
    if container.contains(.completed) {
        self.completed = try container.decode(Bool?.self, forKey: .completed)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.results != nil {try container.encode(self.results as! [PowerShellCommandResultData?]?, forKey: .results)}
    if self.pssession != nil {try container.encode(self.pssession, forKey: .pssession)}
    if self.command != nil {try container.encode(self.command, forKey: .command)}
    if self.completed != nil {try container.encode(self.completed, forKey: .completed)}
  }
}

extension DataFactory {
  public static func createPowerShellCommandResultsProtocol() -> PowerShellCommandResultsProtocol {
    return PowerShellCommandResultsData()
  }
}
