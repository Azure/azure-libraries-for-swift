// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PowerShellCommandResultData : PowerShellCommandResultProtocol {
    public var messageType: Int32?
    public var foregroundColor: String?
    public var backgroundColor: String?
    public var value: String?
    public var prompt: String?
    public var exitCode: Int32?
    public var id: Int32?
    public var caption: String?
    public var message: String?
    public var descriptions: [PromptFieldDescriptionProtocol?]?

        enum CodingKeys: String, CodingKey {case messageType = "messageType"
        case foregroundColor = "foregroundColor"
        case backgroundColor = "backgroundColor"
        case value = "value"
        case prompt = "prompt"
        case exitCode = "exitCode"
        case id = "id"
        case caption = "caption"
        case message = "message"
        case descriptions = "descriptions"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.messageType) {
        self.messageType = try container.decode(Int32?.self, forKey: .messageType)
    }
    if container.contains(.foregroundColor) {
        self.foregroundColor = try container.decode(String?.self, forKey: .foregroundColor)
    }
    if container.contains(.backgroundColor) {
        self.backgroundColor = try container.decode(String?.self, forKey: .backgroundColor)
    }
    if container.contains(.value) {
        self.value = try container.decode(String?.self, forKey: .value)
    }
    if container.contains(.prompt) {
        self.prompt = try container.decode(String?.self, forKey: .prompt)
    }
    if container.contains(.exitCode) {
        self.exitCode = try container.decode(Int32?.self, forKey: .exitCode)
    }
    if container.contains(.id) {
        self.id = try container.decode(Int32?.self, forKey: .id)
    }
    if container.contains(.caption) {
        self.caption = try container.decode(String?.self, forKey: .caption)
    }
    if container.contains(.message) {
        self.message = try container.decode(String?.self, forKey: .message)
    }
    if container.contains(.descriptions) {
        self.descriptions = try container.decode([PromptFieldDescriptionData?]?.self, forKey: .descriptions)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.messageType != nil {try container.encode(self.messageType, forKey: .messageType)}
    if self.foregroundColor != nil {try container.encode(self.foregroundColor, forKey: .foregroundColor)}
    if self.backgroundColor != nil {try container.encode(self.backgroundColor, forKey: .backgroundColor)}
    if self.value != nil {try container.encode(self.value, forKey: .value)}
    if self.prompt != nil {try container.encode(self.prompt, forKey: .prompt)}
    if self.exitCode != nil {try container.encode(self.exitCode, forKey: .exitCode)}
    if self.id != nil {try container.encode(self.id, forKey: .id)}
    if self.caption != nil {try container.encode(self.caption, forKey: .caption)}
    if self.message != nil {try container.encode(self.message, forKey: .message)}
    if self.descriptions != nil {try container.encode(self.descriptions as! [PromptFieldDescriptionData?]?, forKey: .descriptions)}
  }
}

extension DataFactory {
  public static func createPowerShellCommandResultProtocol() -> PowerShellCommandResultProtocol {
    return PowerShellCommandResultData()
  }
}
