// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PowerShellSessionResourcePropertiesData : PowerShellSessionResourcePropertiesProtocol {
    public var sessionId: String?
    public var state: String?
    public var runspaceAvailability: String?
    public var disconnectedOn: Date?
    public var expiresOn: Date?
    public var version: VersionProtocol?
    public var name: String?

        enum CodingKeys: String, CodingKey {case sessionId = "sessionId"
        case state = "state"
        case runspaceAvailability = "runspaceAvailability"
        case disconnectedOn = "disconnectedOn"
        case expiresOn = "expiresOn"
        case version = "version"
        case name = "name"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.sessionId) {
        self.sessionId = try container.decode(String?.self, forKey: .sessionId)
    }
    if container.contains(.state) {
        self.state = try container.decode(String?.self, forKey: .state)
    }
    if container.contains(.runspaceAvailability) {
        self.runspaceAvailability = try container.decode(String?.self, forKey: .runspaceAvailability)
    }
    if container.contains(.disconnectedOn) {
        self.disconnectedOn = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .disconnectedOn)), format: .dateTime)
    }
    if container.contains(.expiresOn) {
        self.expiresOn = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .expiresOn)), format: .dateTime)
    }
    if container.contains(.version) {
        self.version = try container.decode(VersionData?.self, forKey: .version)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.sessionId != nil {try container.encode(self.sessionId, forKey: .sessionId)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.runspaceAvailability != nil {try container.encode(self.runspaceAvailability, forKey: .runspaceAvailability)}
    if self.disconnectedOn != nil {
        try container.encode(DateConverter.toString(date: self.disconnectedOn!, format: .dateTime), forKey: .disconnectedOn)
    }
    if self.expiresOn != nil {
        try container.encode(DateConverter.toString(date: self.expiresOn!, format: .dateTime), forKey: .expiresOn)
    }
    if self.version != nil {try container.encode(self.version as! VersionData?, forKey: .version)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
  }
}

extension DataFactory {
  public static func createPowerShellSessionResourcePropertiesProtocol() -> PowerShellSessionResourcePropertiesProtocol {
    return PowerShellSessionResourcePropertiesData()
  }
}
