// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct GatewayResourcePropertiesData : GatewayResourcePropertiesProtocol {
    public var created: Date?
    public var updated: Date?
    public var upgradeMode: UpgradeModeEnum?
    public var desiredVersion: String?
    public var instances: [GatewayStatusProtocol?]?
    public var activeMessageCount: Int32?
    public var latestPublishedMsiVersion: String?
    public var publishedTimeUtc: Date?
    public var installerDownload: String?
    public var minimumVersion: String?

        enum CodingKeys: String, CodingKey {case created = "created"
        case updated = "updated"
        case upgradeMode = "upgradeMode"
        case desiredVersion = "desiredVersion"
        case instances = "instances"
        case activeMessageCount = "activeMessageCount"
        case latestPublishedMsiVersion = "latestPublishedMsiVersion"
        case publishedTimeUtc = "publishedTimeUtc"
        case installerDownload = "installerDownload"
        case minimumVersion = "minimumVersion"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.created) {
        self.created = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .created)), format: .dateTime)
    }
    if container.contains(.updated) {
        self.updated = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .updated)), format: .dateTime)
    }
    if container.contains(.upgradeMode) {
        self.upgradeMode = try container.decode(UpgradeModeEnum?.self, forKey: .upgradeMode)
    }
    if container.contains(.desiredVersion) {
        self.desiredVersion = try container.decode(String?.self, forKey: .desiredVersion)
    }
    if container.contains(.instances) {
        self.instances = try container.decode([GatewayStatusData?]?.self, forKey: .instances)
    }
    if container.contains(.activeMessageCount) {
        self.activeMessageCount = try container.decode(Int32?.self, forKey: .activeMessageCount)
    }
    if container.contains(.latestPublishedMsiVersion) {
        self.latestPublishedMsiVersion = try container.decode(String?.self, forKey: .latestPublishedMsiVersion)
    }
    if container.contains(.publishedTimeUtc) {
        self.publishedTimeUtc = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .publishedTimeUtc)), format: .dateTime)
    }
    if container.contains(.installerDownload) {
        self.installerDownload = try container.decode(String?.self, forKey: .installerDownload)
    }
    if container.contains(.minimumVersion) {
        self.minimumVersion = try container.decode(String?.self, forKey: .minimumVersion)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.created != nil {
        try container.encode(DateConverter.toString(date: self.created!, format: .dateTime), forKey: .created)
    }
    if self.updated != nil {
        try container.encode(DateConverter.toString(date: self.updated!, format: .dateTime), forKey: .updated)
    }
    if self.upgradeMode != nil {try container.encode(self.upgradeMode, forKey: .upgradeMode)}
    if self.desiredVersion != nil {try container.encode(self.desiredVersion, forKey: .desiredVersion)}
    if self.instances != nil {try container.encode(self.instances as! [GatewayStatusData?]?, forKey: .instances)}
    if self.activeMessageCount != nil {try container.encode(self.activeMessageCount, forKey: .activeMessageCount)}
    if self.latestPublishedMsiVersion != nil {try container.encode(self.latestPublishedMsiVersion, forKey: .latestPublishedMsiVersion)}
    if self.publishedTimeUtc != nil {
        try container.encode(DateConverter.toString(date: self.publishedTimeUtc!, format: .dateTime), forKey: .publishedTimeUtc)
    }
    if self.installerDownload != nil {try container.encode(self.installerDownload, forKey: .installerDownload)}
    if self.minimumVersion != nil {try container.encode(self.minimumVersion, forKey: .minimumVersion)}
  }
}

extension DataFactory {
  public static func createGatewayResourcePropertiesProtocol() -> GatewayResourcePropertiesProtocol {
    return GatewayResourcePropertiesData()
  }
}
