// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct VersionData : VersionProtocol {
    public var major: Int32?
    public var minor: Int32?
    public var build: Int32?
    public var revision: Int32?
    public var majorRevision: Int32?
    public var minorRevision: Int32?

        enum CodingKeys: String, CodingKey {case major = "major"
        case minor = "minor"
        case build = "build"
        case revision = "revision"
        case majorRevision = "majorRevision"
        case minorRevision = "minorRevision"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.major) {
        self.major = try container.decode(Int32?.self, forKey: .major)
    }
    if container.contains(.minor) {
        self.minor = try container.decode(Int32?.self, forKey: .minor)
    }
    if container.contains(.build) {
        self.build = try container.decode(Int32?.self, forKey: .build)
    }
    if container.contains(.revision) {
        self.revision = try container.decode(Int32?.self, forKey: .revision)
    }
    if container.contains(.majorRevision) {
        self.majorRevision = try container.decode(Int32?.self, forKey: .majorRevision)
    }
    if container.contains(.minorRevision) {
        self.minorRevision = try container.decode(Int32?.self, forKey: .minorRevision)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.major != nil {try container.encode(self.major, forKey: .major)}
    if self.minor != nil {try container.encode(self.minor, forKey: .minor)}
    if self.build != nil {try container.encode(self.build, forKey: .build)}
    if self.revision != nil {try container.encode(self.revision, forKey: .revision)}
    if self.majorRevision != nil {try container.encode(self.majorRevision, forKey: .majorRevision)}
    if self.minorRevision != nil {try container.encode(self.minorRevision, forKey: .minorRevision)}
  }
}

extension DataFactory {
  public static func createVersionProtocol() -> VersionProtocol {
    return VersionData()
  }
}
