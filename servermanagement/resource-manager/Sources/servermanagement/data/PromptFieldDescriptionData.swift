// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct PromptFieldDescriptionData : PromptFieldDescriptionProtocol {
    public var name: String?
    public var label: String?
    public var helpMessage: String?
    public var promptFieldTypeIsList: Bool?
    public var promptFieldType: PromptFieldTypeEnum?

        enum CodingKeys: String, CodingKey {case name = "name"
        case label = "label"
        case helpMessage = "helpMessage"
        case promptFieldTypeIsList = "promptFieldTypeIsList"
        case promptFieldType = "promptFieldType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.label) {
        self.label = try container.decode(String?.self, forKey: .label)
    }
    if container.contains(.helpMessage) {
        self.helpMessage = try container.decode(String?.self, forKey: .helpMessage)
    }
    if container.contains(.promptFieldTypeIsList) {
        self.promptFieldTypeIsList = try container.decode(Bool?.self, forKey: .promptFieldTypeIsList)
    }
    if container.contains(.promptFieldType) {
        self.promptFieldType = try container.decode(PromptFieldTypeEnum?.self, forKey: .promptFieldType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.label != nil {try container.encode(self.label, forKey: .label)}
    if self.helpMessage != nil {try container.encode(self.helpMessage, forKey: .helpMessage)}
    if self.promptFieldTypeIsList != nil {try container.encode(self.promptFieldTypeIsList, forKey: .promptFieldTypeIsList)}
    if self.promptFieldType != nil {try container.encode(self.promptFieldType, forKey: .promptFieldType)}
  }
}

extension DataFactory {
  public static func createPromptFieldDescriptionProtocol() -> PromptFieldDescriptionProtocol {
    return PromptFieldDescriptionData()
  }
}
