// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EncryptionConfigData : EncryptionConfigProtocol {
    public var type: EncryptionConfigTypeEnum
    public var keyVaultMetaInfo: KeyVaultMetaInfoProtocol?

        enum CodingKeys: String, CodingKey {case type = "type"
        case keyVaultMetaInfo = "keyVaultMetaInfo"
        }

  public init(type: EncryptionConfigTypeEnum)  {
    self.type = type
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.type = try container.decode(EncryptionConfigTypeEnum.self, forKey: .type)
    if container.contains(.keyVaultMetaInfo) {
        self.keyVaultMetaInfo = try container.decode(KeyVaultMetaInfoData?.self, forKey: .keyVaultMetaInfo)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.type, forKey: .type)
    if self.keyVaultMetaInfo != nil {try container.encode(self.keyVaultMetaInfo as! KeyVaultMetaInfoData?, forKey: .keyVaultMetaInfo)}
  }
}

extension DataFactory {
  public static func createEncryptionConfigProtocol(type: EncryptionConfigTypeEnum) -> EncryptionConfigProtocol {
    return EncryptionConfigData(type: type)
  }
}
