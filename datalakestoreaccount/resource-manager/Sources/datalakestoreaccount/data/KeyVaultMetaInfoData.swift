// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct KeyVaultMetaInfoData : KeyVaultMetaInfoProtocol {
    public var keyVaultResourceId: String
    public var encryptionKeyName: String
    public var encryptionKeyVersion: String

        enum CodingKeys: String, CodingKey {case keyVaultResourceId = "keyVaultResourceId"
        case encryptionKeyName = "encryptionKeyName"
        case encryptionKeyVersion = "encryptionKeyVersion"
        }

  public init(keyVaultResourceId: String, encryptionKeyName: String, encryptionKeyVersion: String)  {
    self.keyVaultResourceId = keyVaultResourceId
    self.encryptionKeyName = encryptionKeyName
    self.encryptionKeyVersion = encryptionKeyVersion
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.keyVaultResourceId = try container.decode(String.self, forKey: .keyVaultResourceId)
    self.encryptionKeyName = try container.decode(String.self, forKey: .encryptionKeyName)
    self.encryptionKeyVersion = try container.decode(String.self, forKey: .encryptionKeyVersion)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.keyVaultResourceId, forKey: .keyVaultResourceId)
    try container.encode(self.encryptionKeyName, forKey: .encryptionKeyName)
    try container.encode(self.encryptionKeyVersion, forKey: .encryptionKeyVersion)
  }
}

extension DataFactory {
  public static func createKeyVaultMetaInfoProtocol(keyVaultResourceId: String, encryptionKeyName: String, encryptionKeyVersion: String) -> KeyVaultMetaInfoProtocol {
    return KeyVaultMetaInfoData(keyVaultResourceId: keyVaultResourceId, encryptionKeyName: encryptionKeyName, encryptionKeyVersion: encryptionKeyVersion)
  }
}
