// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerStateData : ContainerStateProtocol {
    public var state: String?
    public var startTime: Date?
    public var exitCode: Int32?
    public var finishTime: Date?
    public var detailStatus: String?

        enum CodingKeys: String, CodingKey {case state = "state"
        case startTime = "startTime"
        case exitCode = "exitCode"
        case finishTime = "finishTime"
        case detailStatus = "detailStatus"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.state) {
        self.state = try container.decode(String?.self, forKey: .state)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.exitCode) {
        self.exitCode = try container.decode(Int32?.self, forKey: .exitCode)
    }
    if container.contains(.finishTime) {
        self.finishTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .finishTime)), format: .dateTime)
    }
    if container.contains(.detailStatus) {
        self.detailStatus = try container.decode(String?.self, forKey: .detailStatus)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.exitCode != nil {try container.encode(self.exitCode, forKey: .exitCode)}
    if self.finishTime != nil {
        try container.encode(DateConverter.toString(date: self.finishTime!, format: .dateTime), forKey: .finishTime)
    }
    if self.detailStatus != nil {try container.encode(self.detailStatus, forKey: .detailStatus)}
  }
}

extension DataFactory {
  public static func createContainerStateProtocol() -> ContainerStateProtocol {
    return ContainerStateData()
  }
}
