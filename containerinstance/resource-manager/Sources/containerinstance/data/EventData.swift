// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EventData : EventProtocol {
    public var count: Int32?
    public var firstTimestamp: Date?
    public var lastTimestamp: Date?
    public var name: String?
    public var message: String?
    public var type: String?

        enum CodingKeys: String, CodingKey {case count = "count"
        case firstTimestamp = "firstTimestamp"
        case lastTimestamp = "lastTimestamp"
        case name = "name"
        case message = "message"
        case type = "type"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.count) {
        self.count = try container.decode(Int32?.self, forKey: .count)
    }
    if container.contains(.firstTimestamp) {
        self.firstTimestamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .firstTimestamp)), format: .dateTime)
    }
    if container.contains(.lastTimestamp) {
        self.lastTimestamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastTimestamp)), format: .dateTime)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.message) {
        self.message = try container.decode(String?.self, forKey: .message)
    }
    if container.contains(.type) {
        self.type = try container.decode(String?.self, forKey: .type)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.count != nil {try container.encode(self.count, forKey: .count)}
    if self.firstTimestamp != nil {
        try container.encode(DateConverter.toString(date: self.firstTimestamp!, format: .dateTime), forKey: .firstTimestamp)
    }
    if self.lastTimestamp != nil {
        try container.encode(DateConverter.toString(date: self.lastTimestamp!, format: .dateTime), forKey: .lastTimestamp)
    }
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.message != nil {try container.encode(self.message, forKey: .message)}
    if self.type != nil {try container.encode(self.type, forKey: .type)}
  }
}

extension DataFactory {
  public static func createEventProtocol() -> EventProtocol {
    return EventData()
  }
}
