// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerGroupPropertiesData : ContainerGroupPropertiesProtocol {
    public var provisioningState: String?
    public var containers: [ContainerProtocol?]?
    public var imageRegistryCredentials: [ImageRegistryCredentialProtocol?]?
    public var restartPolicy: ContainerGroupRestartPolicyEnum?
    public var ipAddress: IpAddressProtocol?
    public var osType: OperatingSystemTypesEnum?
    public var volumes: [VolumeProtocol?]?
    public var instanceView: ContainerGroupPropertiesInstanceViewProtocol?

        enum CodingKeys: String, CodingKey {case provisioningState = "provisioningState"
        case containers = "containers"
        case imageRegistryCredentials = "imageRegistryCredentials"
        case restartPolicy = "restartPolicy"
        case ipAddress = "ipAddress"
        case osType = "osType"
        case volumes = "volumes"
        case instanceView = "instanceView"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.containers) {
        self.containers = try container.decode([ContainerData?]?.self, forKey: .containers)
    }
    if container.contains(.imageRegistryCredentials) {
        self.imageRegistryCredentials = try container.decode([ImageRegistryCredentialData?]?.self, forKey: .imageRegistryCredentials)
    }
    if container.contains(.restartPolicy) {
        self.restartPolicy = try container.decode(ContainerGroupRestartPolicyEnum?.self, forKey: .restartPolicy)
    }
    if container.contains(.ipAddress) {
        self.ipAddress = try container.decode(IpAddressData?.self, forKey: .ipAddress)
    }
    if container.contains(.osType) {
        self.osType = try container.decode(OperatingSystemTypesEnum?.self, forKey: .osType)
    }
    if container.contains(.volumes) {
        self.volumes = try container.decode([VolumeData?]?.self, forKey: .volumes)
    }
    if container.contains(.instanceView) {
        self.instanceView = try container.decode(ContainerGroupPropertiesInstanceViewData?.self, forKey: .instanceView)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.containers != nil {try container.encode(self.containers as! [ContainerData?]?, forKey: .containers)}
    if self.imageRegistryCredentials != nil {try container.encode(self.imageRegistryCredentials as! [ImageRegistryCredentialData?]?, forKey: .imageRegistryCredentials)}
    if self.restartPolicy != nil {try container.encode(self.restartPolicy, forKey: .restartPolicy)}
    if self.ipAddress != nil {try container.encode(self.ipAddress as! IpAddressData?, forKey: .ipAddress)}
    if self.osType != nil {try container.encode(self.osType, forKey: .osType)}
    if self.volumes != nil {try container.encode(self.volumes as! [VolumeData?]?, forKey: .volumes)}
    if self.instanceView != nil {try container.encode(self.instanceView as! ContainerGroupPropertiesInstanceViewData?, forKey: .instanceView)}
  }
}

extension DataFactory {
  public static func createContainerGroupPropertiesProtocol() -> ContainerGroupPropertiesProtocol {
    return ContainerGroupPropertiesData()
  }
}
