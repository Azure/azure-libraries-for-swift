// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerPropertiesInstanceViewData : ContainerPropertiesInstanceViewProtocol {
    public var restartCount: Int32?
    public var currentState: ContainerStateProtocol?
    public var previousState: ContainerStateProtocol?
    public var events: [EventProtocol?]?

        enum CodingKeys: String, CodingKey {case restartCount = "restartCount"
        case currentState = "currentState"
        case previousState = "previousState"
        case events = "events"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.restartCount) {
        self.restartCount = try container.decode(Int32?.self, forKey: .restartCount)
    }
    if container.contains(.currentState) {
        self.currentState = try container.decode(ContainerStateData?.self, forKey: .currentState)
    }
    if container.contains(.previousState) {
        self.previousState = try container.decode(ContainerStateData?.self, forKey: .previousState)
    }
    if container.contains(.events) {
        self.events = try container.decode([EventData?]?.self, forKey: .events)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.restartCount != nil {try container.encode(self.restartCount, forKey: .restartCount)}
    if self.currentState != nil {try container.encode(self.currentState as! ContainerStateData?, forKey: .currentState)}
    if self.previousState != nil {try container.encode(self.previousState as! ContainerStateData?, forKey: .previousState)}
    if self.events != nil {try container.encode(self.events as! [EventData?]?, forKey: .events)}
  }
}

extension DataFactory {
  public static func createContainerPropertiesInstanceViewProtocol() -> ContainerPropertiesInstanceViewProtocol {
    return ContainerPropertiesInstanceViewData()
  }
}
