// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct IpAddressData : IpAddressProtocol {
    public var ports: [PortProtocol]
    public var type: String
    public var ip: String?
    public var dnsNameLabel: String?
    public var fqdn: String?

        enum CodingKeys: String, CodingKey {case ports = "ports"
        case type = "type"
        case ip = "ip"
        case dnsNameLabel = "dnsNameLabel"
        case fqdn = "fqdn"
        }

  public init(ports: [PortProtocol], type: String)  {
    self.ports = ports
    self.type = type
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.ports = try container.decode([PortData].self, forKey: .ports)
    self.type = try container.decode(String.self, forKey: .type)
    if container.contains(.ip) {
        self.ip = try container.decode(String?.self, forKey: .ip)
    }
    if container.contains(.dnsNameLabel) {
        self.dnsNameLabel = try container.decode(String?.self, forKey: .dnsNameLabel)
    }
    if container.contains(.fqdn) {
        self.fqdn = try container.decode(String?.self, forKey: .fqdn)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.ports as! [PortData], forKey: .ports)
    try container.encode(self.type, forKey: .type)
    if self.ip != nil {try container.encode(self.ip, forKey: .ip)}
    if self.dnsNameLabel != nil {try container.encode(self.dnsNameLabel, forKey: .dnsNameLabel)}
    if self.fqdn != nil {try container.encode(self.fqdn, forKey: .fqdn)}
  }
}

extension DataFactory {
  public static func createIpAddressProtocol(ports: [PortProtocol], type: String) -> IpAddressProtocol {
    return IpAddressData(ports: ports, type: type)
  }
}
