// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ResourceRequirementsData : ResourceRequirementsProtocol {
    public var requests: ResourceRequestsProtocol
    public var limits: ResourceLimitsProtocol?

        enum CodingKeys: String, CodingKey {case requests = "requests"
        case limits = "limits"
        }

  public init(requests: ResourceRequestsProtocol)  {
    self.requests = requests
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.requests = try container.decode(ResourceRequestsData.self, forKey: .requests)
    if container.contains(.limits) {
        self.limits = try container.decode(ResourceLimitsData?.self, forKey: .limits)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.requests as! ResourceRequestsData, forKey: .requests)
    if self.limits != nil {try container.encode(self.limits as! ResourceLimitsData?, forKey: .limits)}
  }
}

extension DataFactory {
  public static func createResourceRequirementsProtocol(requests: ResourceRequestsProtocol) -> ResourceRequirementsProtocol {
    return ResourceRequirementsData(requests: requests)
  }
}
