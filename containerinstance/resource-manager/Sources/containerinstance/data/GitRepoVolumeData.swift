// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct GitRepoVolumeData : GitRepoVolumeProtocol {
    public var directory: String?
    public var repository: String
    public var revision: String?

        enum CodingKeys: String, CodingKey {case directory = "directory"
        case repository = "repository"
        case revision = "revision"
        }

  public init(repository: String)  {
    self.repository = repository
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.directory) {
        self.directory = try container.decode(String?.self, forKey: .directory)
    }
    self.repository = try container.decode(String.self, forKey: .repository)
    if container.contains(.revision) {
        self.revision = try container.decode(String?.self, forKey: .revision)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.directory != nil {try container.encode(self.directory, forKey: .directory)}
    try container.encode(self.repository, forKey: .repository)
    if self.revision != nil {try container.encode(self.revision, forKey: .revision)}
  }
}

extension DataFactory {
  public static func createGitRepoVolumeProtocol(repository: String) -> GitRepoVolumeProtocol {
    return GitRepoVolumeData(repository: repository)
  }
}
