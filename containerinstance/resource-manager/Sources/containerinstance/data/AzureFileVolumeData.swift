// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AzureFileVolumeData : AzureFileVolumeProtocol {
    public var shareName: String
    public var readOnly: Bool?
    public var storageAccountName: String
    public var storageAccountKey: String?

        enum CodingKeys: String, CodingKey {case shareName = "shareName"
        case readOnly = "readOnly"
        case storageAccountName = "storageAccountName"
        case storageAccountKey = "storageAccountKey"
        }

  public init(shareName: String, storageAccountName: String)  {
    self.shareName = shareName
    self.storageAccountName = storageAccountName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.shareName = try container.decode(String.self, forKey: .shareName)
    if container.contains(.readOnly) {
        self.readOnly = try container.decode(Bool?.self, forKey: .readOnly)
    }
    self.storageAccountName = try container.decode(String.self, forKey: .storageAccountName)
    if container.contains(.storageAccountKey) {
        self.storageAccountKey = try container.decode(String?.self, forKey: .storageAccountKey)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.shareName, forKey: .shareName)
    if self.readOnly != nil {try container.encode(self.readOnly, forKey: .readOnly)}
    try container.encode(self.storageAccountName, forKey: .storageAccountName)
    if self.storageAccountKey != nil {try container.encode(self.storageAccountKey, forKey: .storageAccountKey)}
  }
}

extension DataFactory {
  public static func createAzureFileVolumeProtocol(shareName: String, storageAccountName: String) -> AzureFileVolumeProtocol {
    return AzureFileVolumeData(shareName: shareName, storageAccountName: storageAccountName)
  }
}
