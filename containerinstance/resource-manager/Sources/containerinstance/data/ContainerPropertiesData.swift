// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ContainerPropertiesData : ContainerPropertiesProtocol {
    public var image: String
    public var command: [String]?
    public var ports: [ContainerPortProtocol?]?
    public var environmentVariables: [EnvironmentVariableProtocol?]?
    public var instanceView: ContainerPropertiesInstanceViewProtocol?
    public var resources: ResourceRequirementsProtocol
    public var volumeMounts: [VolumeMountProtocol?]?

        enum CodingKeys: String, CodingKey {case image = "image"
        case command = "command"
        case ports = "ports"
        case environmentVariables = "environmentVariables"
        case instanceView = "instanceView"
        case resources = "resources"
        case volumeMounts = "volumeMounts"
        }

  public init(image: String, resources: ResourceRequirementsProtocol)  {
    self.image = image
    self.resources = resources
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.image = try container.decode(String.self, forKey: .image)
    if container.contains(.command) {
        self.command = try container.decode([String]?.self, forKey: .command)
    }
    if container.contains(.ports) {
        self.ports = try container.decode([ContainerPortData?]?.self, forKey: .ports)
    }
    if container.contains(.environmentVariables) {
        self.environmentVariables = try container.decode([EnvironmentVariableData?]?.self, forKey: .environmentVariables)
    }
    if container.contains(.instanceView) {
        self.instanceView = try container.decode(ContainerPropertiesInstanceViewData?.self, forKey: .instanceView)
    }
    self.resources = try container.decode(ResourceRequirementsData.self, forKey: .resources)
    if container.contains(.volumeMounts) {
        self.volumeMounts = try container.decode([VolumeMountData?]?.self, forKey: .volumeMounts)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.image, forKey: .image)
    if self.command != nil {try container.encode(self.command as! [String]?, forKey: .command)}
    if self.ports != nil {try container.encode(self.ports as! [ContainerPortData?]?, forKey: .ports)}
    if self.environmentVariables != nil {try container.encode(self.environmentVariables as! [EnvironmentVariableData?]?, forKey: .environmentVariables)}
    if self.instanceView != nil {try container.encode(self.instanceView as! ContainerPropertiesInstanceViewData?, forKey: .instanceView)}
    try container.encode(self.resources as! ResourceRequirementsData, forKey: .resources)
    if self.volumeMounts != nil {try container.encode(self.volumeMounts as! [VolumeMountData?]?, forKey: .volumeMounts)}
  }
}

extension DataFactory {
  public static func createContainerPropertiesProtocol(image: String, resources: ResourceRequirementsProtocol) -> ContainerPropertiesProtocol {
    return ContainerPropertiesData(image: image, resources: resources)
  }
}
