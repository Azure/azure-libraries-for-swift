// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RequiredResourceAccessData : RequiredResourceAccessProtocol {
    public var additionalProperties: [String:[String: String?]]?
    public var resourceAccess: [ResourceAccessProtocol]
    public var resourceAppId: String?

        enum CodingKeys: String, CodingKey {case additionalProperties = ""
        case resourceAccess = "resourceAccess"
        case resourceAppId = "resourceAppId"
        }

  public init(resourceAccess: [ResourceAccessProtocol])  {
    self.resourceAccess = resourceAccess
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.additionalProperties) {
        self.additionalProperties = try container.decode([String:[String: String?]]?.self, forKey: .additionalProperties)
    }
    self.resourceAccess = try container.decode([ResourceAccessData].self, forKey: .resourceAccess)
    if container.contains(.resourceAppId) {
        self.resourceAppId = try container.decode(String?.self, forKey: .resourceAppId)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.additionalProperties != nil {try container.encode(self.additionalProperties, forKey: .additionalProperties)}
    try container.encode(self.resourceAccess as! [ResourceAccessData], forKey: .resourceAccess)
    if self.resourceAppId != nil {try container.encode(self.resourceAppId, forKey: .resourceAppId)}
  }
}

extension DataFactory {
  public static func createRequiredResourceAccessProtocol(resourceAccess: [ResourceAccessProtocol]) -> RequiredResourceAccessProtocol {
    return RequiredResourceAccessData(resourceAccess: resourceAccess)
  }
}
