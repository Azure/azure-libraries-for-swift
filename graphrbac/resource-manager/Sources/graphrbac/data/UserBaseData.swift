// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct UserBaseData : UserBaseProtocol {
    public var additionalProperties: [String:[String: String?]]?
    public var immutableId: String?
    public var usageLocation: String?
    public var givenName: String?
    public var surname: String?
    public var userType: UserTypeEnum?

        enum CodingKeys: String, CodingKey {case additionalProperties = ""
        case immutableId = "immutableId"
        case usageLocation = "usageLocation"
        case givenName = "givenName"
        case surname = "surname"
        case userType = "userType"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.additionalProperties) {
        self.additionalProperties = try container.decode([String:[String: String?]]?.self, forKey: .additionalProperties)
    }
    if container.contains(.immutableId) {
        self.immutableId = try container.decode(String?.self, forKey: .immutableId)
    }
    if container.contains(.usageLocation) {
        self.usageLocation = try container.decode(String?.self, forKey: .usageLocation)
    }
    if container.contains(.givenName) {
        self.givenName = try container.decode(String?.self, forKey: .givenName)
    }
    if container.contains(.surname) {
        self.surname = try container.decode(String?.self, forKey: .surname)
    }
    if container.contains(.userType) {
        self.userType = try container.decode(UserTypeEnum?.self, forKey: .userType)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.additionalProperties != nil {try container.encode(self.additionalProperties, forKey: .additionalProperties)}
    if self.immutableId != nil {try container.encode(self.immutableId, forKey: .immutableId)}
    if self.usageLocation != nil {try container.encode(self.usageLocation, forKey: .usageLocation)}
    if self.givenName != nil {try container.encode(self.givenName, forKey: .givenName)}
    if self.surname != nil {try container.encode(self.surname, forKey: .surname)}
    if self.userType != nil {try container.encode(self.userType, forKey: .userType)}
  }
}

extension DataFactory {
  public static func createUserBaseProtocol() -> UserBaseProtocol {
    return UserBaseData()
  }
}
