// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CheckGroupMembershipParametersData : CheckGroupMembershipParametersProtocol {
    public var additionalProperties: [String:[String: String?]]?
    public var groupId: String
    public var memberId: String

        enum CodingKeys: String, CodingKey {case additionalProperties = ""
        case groupId = "groupId"
        case memberId = "memberId"
        }

  public init(groupId: String, memberId: String)  {
    self.groupId = groupId
    self.memberId = memberId
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.additionalProperties) {
        self.additionalProperties = try container.decode([String:[String: String?]]?.self, forKey: .additionalProperties)
    }
    self.groupId = try container.decode(String.self, forKey: .groupId)
    self.memberId = try container.decode(String.self, forKey: .memberId)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.additionalProperties != nil {try container.encode(self.additionalProperties, forKey: .additionalProperties)}
    try container.encode(self.groupId, forKey: .groupId)
    try container.encode(self.memberId, forKey: .memberId)
  }
}

extension DataFactory {
  public static func createCheckGroupMembershipParametersProtocol(groupId: String, memberId: String) -> CheckGroupMembershipParametersProtocol {
    return CheckGroupMembershipParametersData(groupId: groupId, memberId: memberId)
  }
}
