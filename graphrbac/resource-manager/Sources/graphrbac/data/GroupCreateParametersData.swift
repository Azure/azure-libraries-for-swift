// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct GroupCreateParametersData : GroupCreateParametersProtocol {
    public var additionalProperties: [String:[String: String?]]?
    public var displayName: String
    public var mailEnabled: Bool
    public var mailNickname: String
    public var securityEnabled: Bool

        enum CodingKeys: String, CodingKey {case additionalProperties = ""
        case displayName = "displayName"
        case mailEnabled = "mailEnabled"
        case mailNickname = "mailNickname"
        case securityEnabled = "securityEnabled"
        }

  public init(displayName: String, mailEnabled: Bool, mailNickname: String, securityEnabled: Bool)  {
    self.displayName = displayName
    self.mailEnabled = mailEnabled
    self.mailNickname = mailNickname
    self.securityEnabled = securityEnabled
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.additionalProperties) {
        self.additionalProperties = try container.decode([String:[String: String?]]?.self, forKey: .additionalProperties)
    }
    self.displayName = try container.decode(String.self, forKey: .displayName)
    self.mailEnabled = try container.decode(Bool.self, forKey: .mailEnabled)
    self.mailNickname = try container.decode(String.self, forKey: .mailNickname)
    self.securityEnabled = try container.decode(Bool.self, forKey: .securityEnabled)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.additionalProperties != nil {try container.encode(self.additionalProperties, forKey: .additionalProperties)}
    try container.encode(self.displayName, forKey: .displayName)
    try container.encode(self.mailEnabled, forKey: .mailEnabled)
    try container.encode(self.mailNickname, forKey: .mailNickname)
    try container.encode(self.securityEnabled, forKey: .securityEnabled)
  }
}

extension DataFactory {
  public static func createGroupCreateParametersProtocol(displayName: String, mailEnabled: Bool, mailNickname: String, securityEnabled: Bool) -> GroupCreateParametersProtocol {
    return GroupCreateParametersData(displayName: displayName, mailEnabled: mailEnabled, mailNickname: mailNickname, securityEnabled: securityEnabled)
  }
}
