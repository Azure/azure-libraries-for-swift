// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ImportExtensionPropertiesData : ImportExtensionPropertiesProtocol, ExportRequestProtocol {
    public var storageKeyType: StorageKeyTypeEnum
    public var storageKey: String
    public var storageUri: String
    public var administratorLogin: String
    public var administratorLoginPassword: String
    public var authenticationType: AuthenticationTypeEnum?
    public var operationMode: String

        enum CodingKeys: String, CodingKey {case storageKeyType = "storageKeyType"
        case storageKey = "storageKey"
        case storageUri = "storageUri"
        case administratorLogin = "administratorLogin"
        case administratorLoginPassword = "administratorLoginPassword"
        case authenticationType = "authenticationType"
        case operationMode = "operationMode"
        }

  public init(storageKeyType: StorageKeyTypeEnum, storageKey: String, storageUri: String, administratorLogin: String, administratorLoginPassword: String, operationMode: String)  {
    self.storageKeyType = storageKeyType
    self.storageKey = storageKey
    self.storageUri = storageUri
    self.administratorLogin = administratorLogin
    self.administratorLoginPassword = administratorLoginPassword
    self.operationMode = operationMode
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.storageKeyType = try container.decode(StorageKeyTypeEnum.self, forKey: .storageKeyType)
    self.storageKey = try container.decode(String.self, forKey: .storageKey)
    self.storageUri = try container.decode(String.self, forKey: .storageUri)
    self.administratorLogin = try container.decode(String.self, forKey: .administratorLogin)
    self.administratorLoginPassword = try container.decode(String.self, forKey: .administratorLoginPassword)
    if container.contains(.authenticationType) {
        self.authenticationType = try container.decode(AuthenticationTypeEnum?.self, forKey: .authenticationType)
    }
    self.operationMode = try container.decode(String.self, forKey: .operationMode)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.storageKeyType, forKey: .storageKeyType)
    try container.encode(self.storageKey, forKey: .storageKey)
    try container.encode(self.storageUri, forKey: .storageUri)
    try container.encode(self.administratorLogin, forKey: .administratorLogin)
    try container.encode(self.administratorLoginPassword, forKey: .administratorLoginPassword)
    if self.authenticationType != nil {try container.encode(self.authenticationType, forKey: .authenticationType)}
    try container.encode(self.operationMode, forKey: .operationMode)
  }
}

extension DataFactory {
  public static func createImportExtensionPropertiesProtocol(storageKeyType: StorageKeyTypeEnum, storageKey: String, storageUri: String, administratorLogin: String, administratorLoginPassword: String, operationMode: String) -> ImportExtensionPropertiesProtocol {
    return ImportExtensionPropertiesData(storageKeyType: storageKeyType, storageKey: storageKey, storageUri: storageUri, administratorLogin: administratorLogin, administratorLoginPassword: administratorLoginPassword, operationMode: operationMode)
  }
}
