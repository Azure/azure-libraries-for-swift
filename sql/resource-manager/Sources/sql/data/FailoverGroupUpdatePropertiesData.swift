// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FailoverGroupUpdatePropertiesData : FailoverGroupUpdatePropertiesProtocol {
    public var readWriteEndpoint: FailoverGroupReadWriteEndpointProtocol?
    public var readOnlyEndpoint: FailoverGroupReadOnlyEndpointProtocol?
    public var databases: [String]?

        enum CodingKeys: String, CodingKey {case readWriteEndpoint = "readWriteEndpoint"
        case readOnlyEndpoint = "readOnlyEndpoint"
        case databases = "databases"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.readWriteEndpoint) {
        self.readWriteEndpoint = try container.decode(FailoverGroupReadWriteEndpointData?.self, forKey: .readWriteEndpoint)
    }
    if container.contains(.readOnlyEndpoint) {
        self.readOnlyEndpoint = try container.decode(FailoverGroupReadOnlyEndpointData?.self, forKey: .readOnlyEndpoint)
    }
    if container.contains(.databases) {
        self.databases = try container.decode([String]?.self, forKey: .databases)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.readWriteEndpoint != nil {try container.encode(self.readWriteEndpoint as! FailoverGroupReadWriteEndpointData?, forKey: .readWriteEndpoint)}
    if self.readOnlyEndpoint != nil {try container.encode(self.readOnlyEndpoint as! FailoverGroupReadOnlyEndpointData?, forKey: .readOnlyEndpoint)}
    if self.databases != nil {try container.encode(self.databases as! [String]?, forKey: .databases)}
  }
}

extension DataFactory {
  public static func createFailoverGroupUpdatePropertiesProtocol() -> FailoverGroupUpdatePropertiesProtocol {
    return FailoverGroupUpdatePropertiesData()
  }
}
