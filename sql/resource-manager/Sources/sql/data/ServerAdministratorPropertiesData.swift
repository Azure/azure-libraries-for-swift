// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ServerAdministratorPropertiesData : ServerAdministratorPropertiesProtocol {
    public var administratorType: String
    public var login: String
    public var sid: String
    public var tenantId: String

        enum CodingKeys: String, CodingKey {case administratorType = "administratorType"
        case login = "login"
        case sid = "sid"
        case tenantId = "tenantId"
        }

  public init(administratorType: String, login: String, sid: String, tenantId: String)  {
    self.administratorType = administratorType
    self.login = login
    self.sid = sid
    self.tenantId = tenantId
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.administratorType = try container.decode(String.self, forKey: .administratorType)
    self.login = try container.decode(String.self, forKey: .login)
    self.sid = try container.decode(String.self, forKey: .sid)
    self.tenantId = try container.decode(String.self, forKey: .tenantId)
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.administratorType, forKey: .administratorType)
    try container.encode(self.login, forKey: .login)
    try container.encode(self.sid, forKey: .sid)
    try container.encode(self.tenantId, forKey: .tenantId)
  }
}

extension DataFactory {
  public static func createServerAdministratorPropertiesProtocol(administratorType: String, login: String, sid: String, tenantId: String) -> ServerAdministratorPropertiesProtocol {
    return ServerAdministratorPropertiesData(administratorType: administratorType, login: login, sid: sid, tenantId: tenantId)
  }
}
