// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SyncGroupLogPropertiesData : SyncGroupLogPropertiesProtocol {
    public var timestamp: Date?
    public var type: SyncGroupLogTypeEnum?
    public var source: String?
    public var details: String?
    public var tracingId: String?
    public var operationStatus: String?

        enum CodingKeys: String, CodingKey {case timestamp = "timestamp"
        case type = "type"
        case source = "source"
        case details = "details"
        case tracingId = "tracingId"
        case operationStatus = "operationStatus"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.timestamp) {
        self.timestamp = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .timestamp)), format: .dateTime)
    }
    if container.contains(.type) {
        self.type = try container.decode(SyncGroupLogTypeEnum?.self, forKey: .type)
    }
    if container.contains(.source) {
        self.source = try container.decode(String?.self, forKey: .source)
    }
    if container.contains(.details) {
        self.details = try container.decode(String?.self, forKey: .details)
    }
    if container.contains(.tracingId) {
        self.tracingId = try container.decode(String?.self, forKey: .tracingId)
    }
    if container.contains(.operationStatus) {
        self.operationStatus = try container.decode(String?.self, forKey: .operationStatus)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.timestamp != nil {
        try container.encode(DateConverter.toString(date: self.timestamp!, format: .dateTime), forKey: .timestamp)
    }
    if self.type != nil {try container.encode(self.type, forKey: .type)}
    if self.source != nil {try container.encode(self.source, forKey: .source)}
    if self.details != nil {try container.encode(self.details, forKey: .details)}
    if self.tracingId != nil {try container.encode(self.tracingId, forKey: .tracingId)}
    if self.operationStatus != nil {try container.encode(self.operationStatus, forKey: .operationStatus)}
  }
}

extension DataFactory {
  public static func createSyncGroupLogPropertiesProtocol() -> SyncGroupLogPropertiesProtocol {
    return SyncGroupLogPropertiesData()
  }
}
