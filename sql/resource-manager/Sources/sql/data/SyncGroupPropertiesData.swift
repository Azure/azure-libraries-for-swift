// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SyncGroupPropertiesData : SyncGroupPropertiesProtocol {
    public var interval: Int32?
    public var lastSyncTime: Date?
    public var conflictResolutionPolicy: SyncConflictResolutionPolicyEnum?
    public var syncDatabaseId: String?
    public var hubDatabaseUserName: String?
    public var hubDatabasePassword: String?
    public var syncState: SyncGroupStateEnum?
    public var schema: SyncGroupSchemaProtocol?

        enum CodingKeys: String, CodingKey {case interval = "interval"
        case lastSyncTime = "lastSyncTime"
        case conflictResolutionPolicy = "conflictResolutionPolicy"
        case syncDatabaseId = "syncDatabaseId"
        case hubDatabaseUserName = "hubDatabaseUserName"
        case hubDatabasePassword = "hubDatabasePassword"
        case syncState = "syncState"
        case schema = "schema"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.interval) {
        self.interval = try container.decode(Int32?.self, forKey: .interval)
    }
    if container.contains(.lastSyncTime) {
        self.lastSyncTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastSyncTime)), format: .dateTime)
    }
    if container.contains(.conflictResolutionPolicy) {
        self.conflictResolutionPolicy = try container.decode(SyncConflictResolutionPolicyEnum?.self, forKey: .conflictResolutionPolicy)
    }
    if container.contains(.syncDatabaseId) {
        self.syncDatabaseId = try container.decode(String?.self, forKey: .syncDatabaseId)
    }
    if container.contains(.hubDatabaseUserName) {
        self.hubDatabaseUserName = try container.decode(String?.self, forKey: .hubDatabaseUserName)
    }
    if container.contains(.hubDatabasePassword) {
        self.hubDatabasePassword = try container.decode(String?.self, forKey: .hubDatabasePassword)
    }
    if container.contains(.syncState) {
        self.syncState = try container.decode(SyncGroupStateEnum?.self, forKey: .syncState)
    }
    if container.contains(.schema) {
        self.schema = try container.decode(SyncGroupSchemaData?.self, forKey: .schema)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.interval != nil {try container.encode(self.interval, forKey: .interval)}
    if self.lastSyncTime != nil {
        try container.encode(DateConverter.toString(date: self.lastSyncTime!, format: .dateTime), forKey: .lastSyncTime)
    }
    if self.conflictResolutionPolicy != nil {try container.encode(self.conflictResolutionPolicy, forKey: .conflictResolutionPolicy)}
    if self.syncDatabaseId != nil {try container.encode(self.syncDatabaseId, forKey: .syncDatabaseId)}
    if self.hubDatabaseUserName != nil {try container.encode(self.hubDatabaseUserName, forKey: .hubDatabaseUserName)}
    if self.hubDatabasePassword != nil {try container.encode(self.hubDatabasePassword, forKey: .hubDatabasePassword)}
    if self.syncState != nil {try container.encode(self.syncState, forKey: .syncState)}
    if self.schema != nil {try container.encode(self.schema as! SyncGroupSchemaData?, forKey: .schema)}
  }
}

extension DataFactory {
  public static func createSyncGroupPropertiesProtocol() -> SyncGroupPropertiesProtocol {
    return SyncGroupPropertiesData()
  }
}
