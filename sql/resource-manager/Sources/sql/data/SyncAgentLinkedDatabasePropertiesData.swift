// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SyncAgentLinkedDatabasePropertiesData : SyncAgentLinkedDatabasePropertiesProtocol {
    public var databaseType: SyncMemberDbTypeEnum?
    public var databaseId: String?
    public var description: String?
    public var serverName: String?
    public var databaseName: String?
    public var userName: String?

        enum CodingKeys: String, CodingKey {case databaseType = "databaseType"
        case databaseId = "databaseId"
        case description = "description"
        case serverName = "serverName"
        case databaseName = "databaseName"
        case userName = "userName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.databaseType) {
        self.databaseType = try container.decode(SyncMemberDbTypeEnum?.self, forKey: .databaseType)
    }
    if container.contains(.databaseId) {
        self.databaseId = try container.decode(String?.self, forKey: .databaseId)
    }
    if container.contains(.description) {
        self.description = try container.decode(String?.self, forKey: .description)
    }
    if container.contains(.serverName) {
        self.serverName = try container.decode(String?.self, forKey: .serverName)
    }
    if container.contains(.databaseName) {
        self.databaseName = try container.decode(String?.self, forKey: .databaseName)
    }
    if container.contains(.userName) {
        self.userName = try container.decode(String?.self, forKey: .userName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.databaseType != nil {try container.encode(self.databaseType, forKey: .databaseType)}
    if self.databaseId != nil {try container.encode(self.databaseId, forKey: .databaseId)}
    if self.description != nil {try container.encode(self.description, forKey: .description)}
    if self.serverName != nil {try container.encode(self.serverName, forKey: .serverName)}
    if self.databaseName != nil {try container.encode(self.databaseName, forKey: .databaseName)}
    if self.userName != nil {try container.encode(self.userName, forKey: .userName)}
  }
}

extension DataFactory {
  public static func createSyncAgentLinkedDatabasePropertiesProtocol() -> SyncAgentLinkedDatabasePropertiesProtocol {
    return SyncAgentLinkedDatabasePropertiesData()
  }
}
