// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct OperationImpactData : OperationImpactProtocol {
    public var name: String?
    public var unit: String?
    public var changeValueAbsolute: Double?
    public var changeValueRelative: Double?

        enum CodingKeys: String, CodingKey {case name = "name"
        case unit = "unit"
        case changeValueAbsolute = "changeValueAbsolute"
        case changeValueRelative = "changeValueRelative"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.unit) {
        self.unit = try container.decode(String?.self, forKey: .unit)
    }
    if container.contains(.changeValueAbsolute) {
        self.changeValueAbsolute = try container.decode(Double?.self, forKey: .changeValueAbsolute)
    }
    if container.contains(.changeValueRelative) {
        self.changeValueRelative = try container.decode(Double?.self, forKey: .changeValueRelative)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.unit != nil {try container.encode(self.unit, forKey: .unit)}
    if self.changeValueAbsolute != nil {try container.encode(self.changeValueAbsolute, forKey: .changeValueAbsolute)}
    if self.changeValueRelative != nil {try container.encode(self.changeValueRelative, forKey: .changeValueRelative)}
  }
}

extension DataFactory {
  public static func createOperationImpactProtocol() -> OperationImpactProtocol {
    return OperationImpactData()
  }
}
