// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DatabaseBlobAuditingPolicyPropertiesData : DatabaseBlobAuditingPolicyPropertiesProtocol {
    public var state: BlobAuditingPolicyStateEnum
    public var storageEndpoint: String?
    public var storageAccountAccessKey: String?
    public var retentionDays: Int32?
    public var auditActionsAndGroups: [String]?
    public var storageAccountSubscriptionId: String?
    public var isStorageSecondaryKeyInUse: Bool?

        enum CodingKeys: String, CodingKey {case state = "state"
        case storageEndpoint = "storageEndpoint"
        case storageAccountAccessKey = "storageAccountAccessKey"
        case retentionDays = "retentionDays"
        case auditActionsAndGroups = "auditActionsAndGroups"
        case storageAccountSubscriptionId = "storageAccountSubscriptionId"
        case isStorageSecondaryKeyInUse = "isStorageSecondaryKeyInUse"
        }

  public init(state: BlobAuditingPolicyStateEnum)  {
    self.state = state
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.state = try container.decode(BlobAuditingPolicyStateEnum.self, forKey: .state)
    if container.contains(.storageEndpoint) {
        self.storageEndpoint = try container.decode(String?.self, forKey: .storageEndpoint)
    }
    if container.contains(.storageAccountAccessKey) {
        self.storageAccountAccessKey = try container.decode(String?.self, forKey: .storageAccountAccessKey)
    }
    if container.contains(.retentionDays) {
        self.retentionDays = try container.decode(Int32?.self, forKey: .retentionDays)
    }
    if container.contains(.auditActionsAndGroups) {
        self.auditActionsAndGroups = try container.decode([String]?.self, forKey: .auditActionsAndGroups)
    }
    if container.contains(.storageAccountSubscriptionId) {
        self.storageAccountSubscriptionId = try container.decode(String?.self, forKey: .storageAccountSubscriptionId)
    }
    if container.contains(.isStorageSecondaryKeyInUse) {
        self.isStorageSecondaryKeyInUse = try container.decode(Bool?.self, forKey: .isStorageSecondaryKeyInUse)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.state, forKey: .state)
    if self.storageEndpoint != nil {try container.encode(self.storageEndpoint, forKey: .storageEndpoint)}
    if self.storageAccountAccessKey != nil {try container.encode(self.storageAccountAccessKey, forKey: .storageAccountAccessKey)}
    if self.retentionDays != nil {try container.encode(self.retentionDays, forKey: .retentionDays)}
    if self.auditActionsAndGroups != nil {try container.encode(self.auditActionsAndGroups as! [String]?, forKey: .auditActionsAndGroups)}
    if self.storageAccountSubscriptionId != nil {try container.encode(self.storageAccountSubscriptionId, forKey: .storageAccountSubscriptionId)}
    if self.isStorageSecondaryKeyInUse != nil {try container.encode(self.isStorageSecondaryKeyInUse, forKey: .isStorageSecondaryKeyInUse)}
  }
}

extension DataFactory {
  public static func createDatabaseBlobAuditingPolicyPropertiesProtocol(state: BlobAuditingPolicyStateEnum) -> DatabaseBlobAuditingPolicyPropertiesProtocol {
    return DatabaseBlobAuditingPolicyPropertiesData(state: state)
  }
}
