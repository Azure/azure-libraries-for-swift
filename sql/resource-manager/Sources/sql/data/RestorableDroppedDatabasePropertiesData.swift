// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RestorableDroppedDatabasePropertiesData : RestorableDroppedDatabasePropertiesProtocol {
    public var databaseName: String?
    public var edition: String?
    public var maxSizeBytes: String?
    public var serviceLevelObjective: String?
    public var elasticPoolName: String?
    public var creationDate: Date?
    public var deletionDate: Date?
    public var earliestRestoreDate: Date?

        enum CodingKeys: String, CodingKey {case databaseName = "databaseName"
        case edition = "edition"
        case maxSizeBytes = "maxSizeBytes"
        case serviceLevelObjective = "serviceLevelObjective"
        case elasticPoolName = "elasticPoolName"
        case creationDate = "creationDate"
        case deletionDate = "deletionDate"
        case earliestRestoreDate = "earliestRestoreDate"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.databaseName) {
        self.databaseName = try container.decode(String?.self, forKey: .databaseName)
    }
    if container.contains(.edition) {
        self.edition = try container.decode(String?.self, forKey: .edition)
    }
    if container.contains(.maxSizeBytes) {
        self.maxSizeBytes = try container.decode(String?.self, forKey: .maxSizeBytes)
    }
    if container.contains(.serviceLevelObjective) {
        self.serviceLevelObjective = try container.decode(String?.self, forKey: .serviceLevelObjective)
    }
    if container.contains(.elasticPoolName) {
        self.elasticPoolName = try container.decode(String?.self, forKey: .elasticPoolName)
    }
    if container.contains(.creationDate) {
        self.creationDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationDate)), format: .dateTime)
    }
    if container.contains(.deletionDate) {
        self.deletionDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .deletionDate)), format: .dateTime)
    }
    if container.contains(.earliestRestoreDate) {
        self.earliestRestoreDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .earliestRestoreDate)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.databaseName != nil {try container.encode(self.databaseName, forKey: .databaseName)}
    if self.edition != nil {try container.encode(self.edition, forKey: .edition)}
    if self.maxSizeBytes != nil {try container.encode(self.maxSizeBytes, forKey: .maxSizeBytes)}
    if self.serviceLevelObjective != nil {try container.encode(self.serviceLevelObjective, forKey: .serviceLevelObjective)}
    if self.elasticPoolName != nil {try container.encode(self.elasticPoolName, forKey: .elasticPoolName)}
    if self.creationDate != nil {
        try container.encode(DateConverter.toString(date: self.creationDate!, format: .dateTime), forKey: .creationDate)
    }
    if self.deletionDate != nil {
        try container.encode(DateConverter.toString(date: self.deletionDate!, format: .dateTime), forKey: .deletionDate)
    }
    if self.earliestRestoreDate != nil {
        try container.encode(DateConverter.toString(date: self.earliestRestoreDate!, format: .dateTime), forKey: .earliestRestoreDate)
    }
  }
}

extension DataFactory {
  public static func createRestorableDroppedDatabasePropertiesProtocol() -> RestorableDroppedDatabasePropertiesProtocol {
    return RestorableDroppedDatabasePropertiesData()
  }
}
