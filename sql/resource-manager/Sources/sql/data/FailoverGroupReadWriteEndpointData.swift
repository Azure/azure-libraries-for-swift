// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FailoverGroupReadWriteEndpointData : FailoverGroupReadWriteEndpointProtocol {
    public var failoverPolicy: ReadWriteEndpointFailoverPolicyEnum
    public var failoverWithDataLossGracePeriodMinutes: Int32?

        enum CodingKeys: String, CodingKey {case failoverPolicy = "failoverPolicy"
        case failoverWithDataLossGracePeriodMinutes = "failoverWithDataLossGracePeriodMinutes"
        }

  public init(failoverPolicy: ReadWriteEndpointFailoverPolicyEnum)  {
    self.failoverPolicy = failoverPolicy
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.failoverPolicy = try container.decode(ReadWriteEndpointFailoverPolicyEnum.self, forKey: .failoverPolicy)
    if container.contains(.failoverWithDataLossGracePeriodMinutes) {
        self.failoverWithDataLossGracePeriodMinutes = try container.decode(Int32?.self, forKey: .failoverWithDataLossGracePeriodMinutes)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.failoverPolicy, forKey: .failoverPolicy)
    if self.failoverWithDataLossGracePeriodMinutes != nil {try container.encode(self.failoverWithDataLossGracePeriodMinutes, forKey: .failoverWithDataLossGracePeriodMinutes)}
  }
}

extension DataFactory {
  public static func createFailoverGroupReadWriteEndpointProtocol(failoverPolicy: ReadWriteEndpointFailoverPolicyEnum) -> FailoverGroupReadWriteEndpointProtocol {
    return FailoverGroupReadWriteEndpointData(failoverPolicy: failoverPolicy)
  }
}
