// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SyncAgentPropertiesData : SyncAgentPropertiesProtocol {
    public var name: String?
    public var syncDatabaseId: String?
    public var lastAliveTime: Date?
    public var state: SyncAgentStateEnum?
    public var isUpToDate: Bool?
    public var expiryTime: Date?
    public var version: String?

        enum CodingKeys: String, CodingKey {case name = "name"
        case syncDatabaseId = "syncDatabaseId"
        case lastAliveTime = "lastAliveTime"
        case state = "state"
        case isUpToDate = "isUpToDate"
        case expiryTime = "expiryTime"
        case version = "version"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.syncDatabaseId) {
        self.syncDatabaseId = try container.decode(String?.self, forKey: .syncDatabaseId)
    }
    if container.contains(.lastAliveTime) {
        self.lastAliveTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .lastAliveTime)), format: .dateTime)
    }
    if container.contains(.state) {
        self.state = try container.decode(SyncAgentStateEnum?.self, forKey: .state)
    }
    if container.contains(.isUpToDate) {
        self.isUpToDate = try container.decode(Bool?.self, forKey: .isUpToDate)
    }
    if container.contains(.expiryTime) {
        self.expiryTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .expiryTime)), format: .dateTime)
    }
    if container.contains(.version) {
        self.version = try container.decode(String?.self, forKey: .version)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.syncDatabaseId != nil {try container.encode(self.syncDatabaseId, forKey: .syncDatabaseId)}
    if self.lastAliveTime != nil {
        try container.encode(DateConverter.toString(date: self.lastAliveTime!, format: .dateTime), forKey: .lastAliveTime)
    }
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.isUpToDate != nil {try container.encode(self.isUpToDate, forKey: .isUpToDate)}
    if self.expiryTime != nil {
        try container.encode(DateConverter.toString(date: self.expiryTime!, format: .dateTime), forKey: .expiryTime)
    }
    if self.version != nil {try container.encode(self.version, forKey: .version)}
  }
}

extension DataFactory {
  public static func createSyncAgentPropertiesProtocol() -> SyncAgentPropertiesProtocol {
    return SyncAgentPropertiesData()
  }
}
