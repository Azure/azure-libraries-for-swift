// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DataMaskingPolicyPropertiesData : DataMaskingPolicyPropertiesProtocol {
    public var dataMaskingState: DataMaskingStateEnum
    public var exemptPrincipals: String?
    public var applicationPrincipals: String?
    public var maskingLevel: String?

        enum CodingKeys: String, CodingKey {case dataMaskingState = "dataMaskingState"
        case exemptPrincipals = "exemptPrincipals"
        case applicationPrincipals = "applicationPrincipals"
        case maskingLevel = "maskingLevel"
        }

  public init(dataMaskingState: DataMaskingStateEnum)  {
    self.dataMaskingState = dataMaskingState
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.dataMaskingState = try container.decode(DataMaskingStateEnum.self, forKey: .dataMaskingState)
    if container.contains(.exemptPrincipals) {
        self.exemptPrincipals = try container.decode(String?.self, forKey: .exemptPrincipals)
    }
    if container.contains(.applicationPrincipals) {
        self.applicationPrincipals = try container.decode(String?.self, forKey: .applicationPrincipals)
    }
    if container.contains(.maskingLevel) {
        self.maskingLevel = try container.decode(String?.self, forKey: .maskingLevel)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.dataMaskingState, forKey: .dataMaskingState)
    if self.exemptPrincipals != nil {try container.encode(self.exemptPrincipals, forKey: .exemptPrincipals)}
    if self.applicationPrincipals != nil {try container.encode(self.applicationPrincipals, forKey: .applicationPrincipals)}
    if self.maskingLevel != nil {try container.encode(self.maskingLevel, forKey: .maskingLevel)}
  }
}

extension DataFactory {
  public static func createDataMaskingPolicyPropertiesProtocol(dataMaskingState: DataMaskingStateEnum) -> DataMaskingPolicyPropertiesProtocol {
    return DataMaskingPolicyPropertiesData(dataMaskingState: dataMaskingState)
  }
}
