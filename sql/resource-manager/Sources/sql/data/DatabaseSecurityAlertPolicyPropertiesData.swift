// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct DatabaseSecurityAlertPolicyPropertiesData : DatabaseSecurityAlertPolicyPropertiesProtocol {
    public var state: SecurityAlertPolicyStateEnum
    public var disabledAlerts: String?
    public var emailAddresses: String?
    public var emailAccountAdmins: SecurityAlertPolicyEmailAccountAdminsEnum?
    public var storageEndpoint: String?
    public var storageAccountAccessKey: String?
    public var retentionDays: Int32?
    public var useServerDefault: SecurityAlertPolicyUseServerDefaultEnum?

        enum CodingKeys: String, CodingKey {case state = "state"
        case disabledAlerts = "disabledAlerts"
        case emailAddresses = "emailAddresses"
        case emailAccountAdmins = "emailAccountAdmins"
        case storageEndpoint = "storageEndpoint"
        case storageAccountAccessKey = "storageAccountAccessKey"
        case retentionDays = "retentionDays"
        case useServerDefault = "useServerDefault"
        }

  public init(state: SecurityAlertPolicyStateEnum)  {
    self.state = state
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.state = try container.decode(SecurityAlertPolicyStateEnum.self, forKey: .state)
    if container.contains(.disabledAlerts) {
        self.disabledAlerts = try container.decode(String?.self, forKey: .disabledAlerts)
    }
    if container.contains(.emailAddresses) {
        self.emailAddresses = try container.decode(String?.self, forKey: .emailAddresses)
    }
    if container.contains(.emailAccountAdmins) {
        self.emailAccountAdmins = try container.decode(SecurityAlertPolicyEmailAccountAdminsEnum?.self, forKey: .emailAccountAdmins)
    }
    if container.contains(.storageEndpoint) {
        self.storageEndpoint = try container.decode(String?.self, forKey: .storageEndpoint)
    }
    if container.contains(.storageAccountAccessKey) {
        self.storageAccountAccessKey = try container.decode(String?.self, forKey: .storageAccountAccessKey)
    }
    if container.contains(.retentionDays) {
        self.retentionDays = try container.decode(Int32?.self, forKey: .retentionDays)
    }
    if container.contains(.useServerDefault) {
        self.useServerDefault = try container.decode(SecurityAlertPolicyUseServerDefaultEnum?.self, forKey: .useServerDefault)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.state, forKey: .state)
    if self.disabledAlerts != nil {try container.encode(self.disabledAlerts, forKey: .disabledAlerts)}
    if self.emailAddresses != nil {try container.encode(self.emailAddresses, forKey: .emailAddresses)}
    if self.emailAccountAdmins != nil {try container.encode(self.emailAccountAdmins, forKey: .emailAccountAdmins)}
    if self.storageEndpoint != nil {try container.encode(self.storageEndpoint, forKey: .storageEndpoint)}
    if self.storageAccountAccessKey != nil {try container.encode(self.storageAccountAccessKey, forKey: .storageAccountAccessKey)}
    if self.retentionDays != nil {try container.encode(self.retentionDays, forKey: .retentionDays)}
    if self.useServerDefault != nil {try container.encode(self.useServerDefault, forKey: .useServerDefault)}
  }
}

extension DataFactory {
  public static func createDatabaseSecurityAlertPolicyPropertiesProtocol(state: SecurityAlertPolicyStateEnum) -> DatabaseSecurityAlertPolicyPropertiesProtocol {
    return DatabaseSecurityAlertPolicyPropertiesData(state: state)
  }
}
