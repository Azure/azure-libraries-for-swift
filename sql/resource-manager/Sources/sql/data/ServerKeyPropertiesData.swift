// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ServerKeyPropertiesData : ServerKeyPropertiesProtocol {
    public var subregion: String?
    public var serverKeyType: ServerKeyTypeEnum
    public var uri: String?
    public var thumbprint: String?
    public var creationDate: Date?

        enum CodingKeys: String, CodingKey {case subregion = "subregion"
        case serverKeyType = "serverKeyType"
        case uri = "uri"
        case thumbprint = "thumbprint"
        case creationDate = "creationDate"
        }

  public init(serverKeyType: ServerKeyTypeEnum)  {
    self.serverKeyType = serverKeyType
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.subregion) {
        self.subregion = try container.decode(String?.self, forKey: .subregion)
    }
    self.serverKeyType = try container.decode(ServerKeyTypeEnum.self, forKey: .serverKeyType)
    if container.contains(.uri) {
        self.uri = try container.decode(String?.self, forKey: .uri)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.creationDate) {
        self.creationDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationDate)), format: .dateTime)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.subregion != nil {try container.encode(self.subregion, forKey: .subregion)}
    try container.encode(self.serverKeyType, forKey: .serverKeyType)
    if self.uri != nil {try container.encode(self.uri, forKey: .uri)}
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.creationDate != nil {
        try container.encode(DateConverter.toString(date: self.creationDate!, format: .dateTime), forKey: .creationDate)
    }
  }
}

extension DataFactory {
  public static func createServerKeyPropertiesProtocol(serverKeyType: ServerKeyTypeEnum) -> ServerKeyPropertiesProtocol {
    return ServerKeyPropertiesData(serverKeyType: serverKeyType)
  }
}
