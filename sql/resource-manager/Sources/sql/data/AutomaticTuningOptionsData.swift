// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct AutomaticTuningOptionsData : AutomaticTuningOptionsProtocol {
    public var desiredState: AutomaticTuningOptionModeDesiredEnum?
    public var actualState: AutomaticTuningOptionModeActualEnum?
    public var reasonCode: Int32?
    public var reasonDesc: AutomaticTuningDisabledReasonEnum?

        enum CodingKeys: String, CodingKey {case desiredState = "desiredState"
        case actualState = "actualState"
        case reasonCode = "reasonCode"
        case reasonDesc = "reasonDesc"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.desiredState) {
        self.desiredState = try container.decode(AutomaticTuningOptionModeDesiredEnum?.self, forKey: .desiredState)
    }
    if container.contains(.actualState) {
        self.actualState = try container.decode(AutomaticTuningOptionModeActualEnum?.self, forKey: .actualState)
    }
    if container.contains(.reasonCode) {
        self.reasonCode = try container.decode(Int32?.self, forKey: .reasonCode)
    }
    if container.contains(.reasonDesc) {
        self.reasonDesc = try container.decode(AutomaticTuningDisabledReasonEnum?.self, forKey: .reasonDesc)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.desiredState != nil {try container.encode(self.desiredState, forKey: .desiredState)}
    if self.actualState != nil {try container.encode(self.actualState, forKey: .actualState)}
    if self.reasonCode != nil {try container.encode(self.reasonCode, forKey: .reasonCode)}
    if self.reasonDesc != nil {try container.encode(self.reasonDesc, forKey: .reasonDesc)}
  }
}

extension DataFactory {
  public static func createAutomaticTuningOptionsProtocol() -> AutomaticTuningOptionsProtocol {
    return AutomaticTuningOptionsData()
  }
}
