// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ElasticPoolPropertiesData : ElasticPoolPropertiesProtocol {
    public var creationDate: Date?
    public var state: ElasticPoolStateEnum?
    public var edition: ElasticPoolEditionEnum?
    public var dtu: Int32?
    public var databaseDtuMax: Int32?
    public var databaseDtuMin: Int32?
    public var storageMB: Int32?
    public var zoneRedundant: Bool?

        enum CodingKeys: String, CodingKey {case creationDate = "creationDate"
        case state = "state"
        case edition = "edition"
        case dtu = "dtu"
        case databaseDtuMax = "databaseDtuMax"
        case databaseDtuMin = "databaseDtuMin"
        case storageMB = "storageMB"
        case zoneRedundant = "zoneRedundant"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.creationDate) {
        self.creationDate = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .creationDate)), format: .dateTime)
    }
    if container.contains(.state) {
        self.state = try container.decode(ElasticPoolStateEnum?.self, forKey: .state)
    }
    if container.contains(.edition) {
        self.edition = try container.decode(ElasticPoolEditionEnum?.self, forKey: .edition)
    }
    if container.contains(.dtu) {
        self.dtu = try container.decode(Int32?.self, forKey: .dtu)
    }
    if container.contains(.databaseDtuMax) {
        self.databaseDtuMax = try container.decode(Int32?.self, forKey: .databaseDtuMax)
    }
    if container.contains(.databaseDtuMin) {
        self.databaseDtuMin = try container.decode(Int32?.self, forKey: .databaseDtuMin)
    }
    if container.contains(.storageMB) {
        self.storageMB = try container.decode(Int32?.self, forKey: .storageMB)
    }
    if container.contains(.zoneRedundant) {
        self.zoneRedundant = try container.decode(Bool?.self, forKey: .zoneRedundant)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.creationDate != nil {
        try container.encode(DateConverter.toString(date: self.creationDate!, format: .dateTime), forKey: .creationDate)
    }
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.edition != nil {try container.encode(self.edition, forKey: .edition)}
    if self.dtu != nil {try container.encode(self.dtu, forKey: .dtu)}
    if self.databaseDtuMax != nil {try container.encode(self.databaseDtuMax, forKey: .databaseDtuMax)}
    if self.databaseDtuMin != nil {try container.encode(self.databaseDtuMin, forKey: .databaseDtuMin)}
    if self.storageMB != nil {try container.encode(self.storageMB, forKey: .storageMB)}
    if self.zoneRedundant != nil {try container.encode(self.zoneRedundant, forKey: .zoneRedundant)}
  }
}

extension DataFactory {
  public static func createElasticPoolPropertiesProtocol() -> ElasticPoolPropertiesProtocol {
    return ElasticPoolPropertiesData()
  }
}
