// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SyncGroupSchemaTableData : SyncGroupSchemaTableProtocol {
    public var columns: [SyncGroupSchemaTableColumnProtocol?]?
    public var quotedName: String?

        enum CodingKeys: String, CodingKey {case columns = "columns"
        case quotedName = "quotedName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.columns) {
        self.columns = try container.decode([SyncGroupSchemaTableColumnData?]?.self, forKey: .columns)
    }
    if container.contains(.quotedName) {
        self.quotedName = try container.decode(String?.self, forKey: .quotedName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.columns != nil {try container.encode(self.columns as! [SyncGroupSchemaTableColumnData?]?, forKey: .columns)}
    if self.quotedName != nil {try container.encode(self.quotedName, forKey: .quotedName)}
  }
}

extension DataFactory {
  public static func createSyncGroupSchemaTableProtocol() -> SyncGroupSchemaTableProtocol {
    return SyncGroupSchemaTableData()
  }
}
