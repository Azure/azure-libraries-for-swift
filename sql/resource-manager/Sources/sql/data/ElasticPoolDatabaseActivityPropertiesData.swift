// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ElasticPoolDatabaseActivityPropertiesData : ElasticPoolDatabaseActivityPropertiesProtocol {
    public var databaseName: String?
    public var endTime: Date?
    public var errorCode: Int32?
    public var errorMessage: String?
    public var errorSeverity: Int32?
    public var operation: String?
    public var operationId: String?
    public var percentComplete: Int32?
    public var requestedElasticPoolName: String?
    public var currentElasticPoolName: String?
    public var currentServiceObjective: String?
    public var requestedServiceObjective: String?
    public var serverName: String?
    public var startTime: Date?
    public var state: String?

        enum CodingKeys: String, CodingKey {case databaseName = "databaseName"
        case endTime = "endTime"
        case errorCode = "errorCode"
        case errorMessage = "errorMessage"
        case errorSeverity = "errorSeverity"
        case operation = "operation"
        case operationId = "operationId"
        case percentComplete = "percentComplete"
        case requestedElasticPoolName = "requestedElasticPoolName"
        case currentElasticPoolName = "currentElasticPoolName"
        case currentServiceObjective = "currentServiceObjective"
        case requestedServiceObjective = "requestedServiceObjective"
        case serverName = "serverName"
        case startTime = "startTime"
        case state = "state"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.databaseName) {
        self.databaseName = try container.decode(String?.self, forKey: .databaseName)
    }
    if container.contains(.endTime) {
        self.endTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .endTime)), format: .dateTime)
    }
    if container.contains(.errorCode) {
        self.errorCode = try container.decode(Int32?.self, forKey: .errorCode)
    }
    if container.contains(.errorMessage) {
        self.errorMessage = try container.decode(String?.self, forKey: .errorMessage)
    }
    if container.contains(.errorSeverity) {
        self.errorSeverity = try container.decode(Int32?.self, forKey: .errorSeverity)
    }
    if container.contains(.operation) {
        self.operation = try container.decode(String?.self, forKey: .operation)
    }
    if container.contains(.operationId) {
        self.operationId = try container.decode(String?.self, forKey: .operationId)
    }
    if container.contains(.percentComplete) {
        self.percentComplete = try container.decode(Int32?.self, forKey: .percentComplete)
    }
    if container.contains(.requestedElasticPoolName) {
        self.requestedElasticPoolName = try container.decode(String?.self, forKey: .requestedElasticPoolName)
    }
    if container.contains(.currentElasticPoolName) {
        self.currentElasticPoolName = try container.decode(String?.self, forKey: .currentElasticPoolName)
    }
    if container.contains(.currentServiceObjective) {
        self.currentServiceObjective = try container.decode(String?.self, forKey: .currentServiceObjective)
    }
    if container.contains(.requestedServiceObjective) {
        self.requestedServiceObjective = try container.decode(String?.self, forKey: .requestedServiceObjective)
    }
    if container.contains(.serverName) {
        self.serverName = try container.decode(String?.self, forKey: .serverName)
    }
    if container.contains(.startTime) {
        self.startTime = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .startTime)), format: .dateTime)
    }
    if container.contains(.state) {
        self.state = try container.decode(String?.self, forKey: .state)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.databaseName != nil {try container.encode(self.databaseName, forKey: .databaseName)}
    if self.endTime != nil {
        try container.encode(DateConverter.toString(date: self.endTime!, format: .dateTime), forKey: .endTime)
    }
    if self.errorCode != nil {try container.encode(self.errorCode, forKey: .errorCode)}
    if self.errorMessage != nil {try container.encode(self.errorMessage, forKey: .errorMessage)}
    if self.errorSeverity != nil {try container.encode(self.errorSeverity, forKey: .errorSeverity)}
    if self.operation != nil {try container.encode(self.operation, forKey: .operation)}
    if self.operationId != nil {try container.encode(self.operationId, forKey: .operationId)}
    if self.percentComplete != nil {try container.encode(self.percentComplete, forKey: .percentComplete)}
    if self.requestedElasticPoolName != nil {try container.encode(self.requestedElasticPoolName, forKey: .requestedElasticPoolName)}
    if self.currentElasticPoolName != nil {try container.encode(self.currentElasticPoolName, forKey: .currentElasticPoolName)}
    if self.currentServiceObjective != nil {try container.encode(self.currentServiceObjective, forKey: .currentServiceObjective)}
    if self.requestedServiceObjective != nil {try container.encode(self.requestedServiceObjective, forKey: .requestedServiceObjective)}
    if self.serverName != nil {try container.encode(self.serverName, forKey: .serverName)}
    if self.startTime != nil {
        try container.encode(DateConverter.toString(date: self.startTime!, format: .dateTime), forKey: .startTime)
    }
    if self.state != nil {try container.encode(self.state, forKey: .state)}
  }
}

extension DataFactory {
  public static func createElasticPoolDatabaseActivityPropertiesProtocol() -> ElasticPoolDatabaseActivityPropertiesProtocol {
    return ElasticPoolDatabaseActivityPropertiesData()
  }
}
