// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct SyncFullSchemaTableColumnData : SyncFullSchemaTableColumnProtocol {
    public var dataSize: String?
    public var dataType: String?
    public var errorId: String?
    public var hasError: Bool?
    public var isPrimaryKey: Bool?
    public var name: String?
    public var quotedName: String?

        enum CodingKeys: String, CodingKey {case dataSize = "dataSize"
        case dataType = "dataType"
        case errorId = "errorId"
        case hasError = "hasError"
        case isPrimaryKey = "isPrimaryKey"
        case name = "name"
        case quotedName = "quotedName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.dataSize) {
        self.dataSize = try container.decode(String?.self, forKey: .dataSize)
    }
    if container.contains(.dataType) {
        self.dataType = try container.decode(String?.self, forKey: .dataType)
    }
    if container.contains(.errorId) {
        self.errorId = try container.decode(String?.self, forKey: .errorId)
    }
    if container.contains(.hasError) {
        self.hasError = try container.decode(Bool?.self, forKey: .hasError)
    }
    if container.contains(.isPrimaryKey) {
        self.isPrimaryKey = try container.decode(Bool?.self, forKey: .isPrimaryKey)
    }
    if container.contains(.name) {
        self.name = try container.decode(String?.self, forKey: .name)
    }
    if container.contains(.quotedName) {
        self.quotedName = try container.decode(String?.self, forKey: .quotedName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.dataSize != nil {try container.encode(self.dataSize, forKey: .dataSize)}
    if self.dataType != nil {try container.encode(self.dataType, forKey: .dataType)}
    if self.errorId != nil {try container.encode(self.errorId, forKey: .errorId)}
    if self.hasError != nil {try container.encode(self.hasError, forKey: .hasError)}
    if self.isPrimaryKey != nil {try container.encode(self.isPrimaryKey, forKey: .isPrimaryKey)}
    if self.name != nil {try container.encode(self.name, forKey: .name)}
    if self.quotedName != nil {try container.encode(self.quotedName, forKey: .quotedName)}
  }
}

extension DataFactory {
  public static func createSyncFullSchemaTableColumnProtocol() -> SyncFullSchemaTableColumnProtocol {
    return SyncFullSchemaTableColumnData()
  }
}
