// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct ServerPropertiesData : ServerPropertiesProtocol {
    public var administratorLogin: String?
    public var administratorLoginPassword: String?
    public var version: String?
    public var state: String?
    public var fullyQualifiedDomainName: String?

        enum CodingKeys: String, CodingKey {case administratorLogin = "administratorLogin"
        case administratorLoginPassword = "administratorLoginPassword"
        case version = "version"
        case state = "state"
        case fullyQualifiedDomainName = "fullyQualifiedDomainName"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.administratorLogin) {
        self.administratorLogin = try container.decode(String?.self, forKey: .administratorLogin)
    }
    if container.contains(.administratorLoginPassword) {
        self.administratorLoginPassword = try container.decode(String?.self, forKey: .administratorLoginPassword)
    }
    if container.contains(.version) {
        self.version = try container.decode(String?.self, forKey: .version)
    }
    if container.contains(.state) {
        self.state = try container.decode(String?.self, forKey: .state)
    }
    if container.contains(.fullyQualifiedDomainName) {
        self.fullyQualifiedDomainName = try container.decode(String?.self, forKey: .fullyQualifiedDomainName)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.administratorLogin != nil {try container.encode(self.administratorLogin, forKey: .administratorLogin)}
    if self.administratorLoginPassword != nil {try container.encode(self.administratorLoginPassword, forKey: .administratorLoginPassword)}
    if self.version != nil {try container.encode(self.version, forKey: .version)}
    if self.state != nil {try container.encode(self.state, forKey: .state)}
    if self.fullyQualifiedDomainName != nil {try container.encode(self.fullyQualifiedDomainName, forKey: .fullyQualifiedDomainName)}
  }
}

extension DataFactory {
  public static func createServerPropertiesProtocol() -> ServerPropertiesProtocol {
    return ServerPropertiesData()
  }
}
