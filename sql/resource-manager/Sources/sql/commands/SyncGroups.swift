// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

// SyncGroups is the the Azure SQL Database management API provides a RESTful set of web services that interact with
// Azure SQL Database services to manage your databases. The API enables you to create, retrieve, update, and delete
// databases.
import Foundation
import azureSwiftRuntime
extension Commands {
public struct SyncGroups {
    public static func CancelSync(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String) -> SyncGroupsCancelSync {
        return CancelSyncCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId)
    }
    public static func CreateOrUpdate(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String, parameters: SyncGroupProtocol) -> SyncGroupsCreateOrUpdate {
        return CreateOrUpdateCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId, parameters: parameters)
    }
    public static func Delete(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String) -> SyncGroupsDelete {
        return DeleteCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId)
    }
    public static func Get(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String) -> SyncGroupsGet {
        return GetCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId)
    }
    public static func ListByDatabase(resourceGroupName: String, serverName: String, databaseName: String, subscriptionId: String) -> SyncGroupsListByDatabase {
        return ListByDatabaseCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, subscriptionId: subscriptionId)
    }
    public static func ListHubSchemas(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String) -> SyncGroupsListHubSchemas {
        return ListHubSchemasCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId)
    }
    public static func ListLogs(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String, startTime: String, endTime: String, type: ListLogsTypeEnum) -> SyncGroupsListLogs {
        return ListLogsCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId, startTime: startTime, endTime: endTime, type: type)
    }
    public static func ListSyncDatabaseIds(locationName: String, subscriptionId: String) -> SyncGroupsListSyncDatabaseIds {
        return ListSyncDatabaseIdsCommand(locationName: locationName, subscriptionId: subscriptionId)
    }
    public static func RefreshHubSchema(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String) -> SyncGroupsRefreshHubSchema {
        return RefreshHubSchemaCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId)
    }
    public static func TriggerSync(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String) -> SyncGroupsTriggerSync {
        return TriggerSyncCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId)
    }
    public static func Update(resourceGroupName: String, serverName: String, databaseName: String, syncGroupName: String, subscriptionId: String, parameters: SyncGroupProtocol) -> SyncGroupsUpdate {
        return UpdateCommand(resourceGroupName: resourceGroupName, serverName: serverName, databaseName: databaseName, syncGroupName: syncGroupName, subscriptionId: subscriptionId, parameters: parameters)
    }
}
}
