// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RoutingPropertiesData : RoutingPropertiesProtocol {
    public var endpoints: RoutingEndpointsProtocol?
    public var routes: [RoutePropertiesProtocol?]?
    public var fallbackRoute: FallbackRoutePropertiesProtocol?

        enum CodingKeys: String, CodingKey {case endpoints = "endpoints"
        case routes = "routes"
        case fallbackRoute = "fallbackRoute"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.endpoints) {
        self.endpoints = try container.decode(RoutingEndpointsData?.self, forKey: .endpoints)
    }
    if container.contains(.routes) {
        self.routes = try container.decode([RoutePropertiesData?]?.self, forKey: .routes)
    }
    if container.contains(.fallbackRoute) {
        self.fallbackRoute = try container.decode(FallbackRoutePropertiesData?.self, forKey: .fallbackRoute)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.endpoints != nil {try container.encode(self.endpoints as! RoutingEndpointsData?, forKey: .endpoints)}
    if self.routes != nil {try container.encode(self.routes as! [RoutePropertiesData?]?, forKey: .routes)}
    if self.fallbackRoute != nil {try container.encode(self.fallbackRoute as! FallbackRoutePropertiesData?, forKey: .fallbackRoute)}
  }
}

extension DataFactory {
  public static func createRoutingPropertiesProtocol() -> RoutingPropertiesProtocol {
    return RoutingPropertiesData()
  }
}
