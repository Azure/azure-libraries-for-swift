// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct FeedbackPropertiesData : FeedbackPropertiesProtocol {
    public var lockDurationAsIso8601: String?
    public var ttlAsIso8601: String?
    public var maxDeliveryCount: Int32?

        enum CodingKeys: String, CodingKey {case lockDurationAsIso8601 = "lockDurationAsIso8601"
        case ttlAsIso8601 = "ttlAsIso8601"
        case maxDeliveryCount = "maxDeliveryCount"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.lockDurationAsIso8601) {
        self.lockDurationAsIso8601 = try container.decode(String?.self, forKey: .lockDurationAsIso8601)
    }
    if container.contains(.ttlAsIso8601) {
        self.ttlAsIso8601 = try container.decode(String?.self, forKey: .ttlAsIso8601)
    }
    if container.contains(.maxDeliveryCount) {
        self.maxDeliveryCount = try container.decode(Int32?.self, forKey: .maxDeliveryCount)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.lockDurationAsIso8601 != nil {try container.encode(self.lockDurationAsIso8601, forKey: .lockDurationAsIso8601)}
    if self.ttlAsIso8601 != nil {try container.encode(self.ttlAsIso8601, forKey: .ttlAsIso8601)}
    if self.maxDeliveryCount != nil {try container.encode(self.maxDeliveryCount, forKey: .maxDeliveryCount)}
  }
}

extension DataFactory {
  public static func createFeedbackPropertiesProtocol() -> FeedbackPropertiesProtocol {
    return FeedbackPropertiesData()
  }
}
