// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RegistryStatisticsData : RegistryStatisticsProtocol {
    public var totalDeviceCount: Int64?
    public var enabledDeviceCount: Int64?
    public var disabledDeviceCount: Int64?

        enum CodingKeys: String, CodingKey {case totalDeviceCount = "totalDeviceCount"
        case enabledDeviceCount = "enabledDeviceCount"
        case disabledDeviceCount = "disabledDeviceCount"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.totalDeviceCount) {
        self.totalDeviceCount = try container.decode(Int64?.self, forKey: .totalDeviceCount)
    }
    if container.contains(.enabledDeviceCount) {
        self.enabledDeviceCount = try container.decode(Int64?.self, forKey: .enabledDeviceCount)
    }
    if container.contains(.disabledDeviceCount) {
        self.disabledDeviceCount = try container.decode(Int64?.self, forKey: .disabledDeviceCount)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.totalDeviceCount != nil {try container.encode(self.totalDeviceCount, forKey: .totalDeviceCount)}
    if self.enabledDeviceCount != nil {try container.encode(self.enabledDeviceCount, forKey: .enabledDeviceCount)}
    if self.disabledDeviceCount != nil {try container.encode(self.disabledDeviceCount, forKey: .disabledDeviceCount)}
  }
}

extension DataFactory {
  public static func createRegistryStatisticsProtocol() -> RegistryStatisticsProtocol {
    return RegistryStatisticsData()
  }
}
