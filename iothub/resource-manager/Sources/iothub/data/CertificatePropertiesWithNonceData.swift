// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct CertificatePropertiesWithNonceData : CertificatePropertiesWithNonceProtocol {
    public var subject: String?
    public var expiry: Date?
    public var thumbprint: String?
    public var isVerified: Bool?
    public var created: Date?
    public var updated: Date?
    public var verificationCode: String?

        enum CodingKeys: String, CodingKey {case subject = "subject"
        case expiry = "expiry"
        case thumbprint = "thumbprint"
        case isVerified = "isVerified"
        case created = "created"
        case updated = "updated"
        case verificationCode = "verificationCode"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.subject) {
        self.subject = try container.decode(String?.self, forKey: .subject)
    }
    if container.contains(.expiry) {
        self.expiry = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .expiry)), format: .dateTimeRfc1123)
    }
    if container.contains(.thumbprint) {
        self.thumbprint = try container.decode(String?.self, forKey: .thumbprint)
    }
    if container.contains(.isVerified) {
        self.isVerified = try container.decode(Bool?.self, forKey: .isVerified)
    }
    if container.contains(.created) {
        self.created = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .created)), format: .dateTimeRfc1123)
    }
    if container.contains(.updated) {
        self.updated = DateConverter.fromString(dateStr: (try container.decode(String?.self, forKey: .updated)), format: .dateTimeRfc1123)
    }
    if container.contains(.verificationCode) {
        self.verificationCode = try container.decode(String?.self, forKey: .verificationCode)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.subject != nil {try container.encode(self.subject, forKey: .subject)}
    if self.expiry != nil {
        try container.encode(DateConverter.toString(date: self.expiry!, format: .dateTimeRfc1123), forKey: .expiry)
    }
    if self.thumbprint != nil {try container.encode(self.thumbprint, forKey: .thumbprint)}
    if self.isVerified != nil {try container.encode(self.isVerified, forKey: .isVerified)}
    if self.created != nil {
        try container.encode(DateConverter.toString(date: self.created!, format: .dateTimeRfc1123), forKey: .created)
    }
    if self.updated != nil {
        try container.encode(DateConverter.toString(date: self.updated!, format: .dateTimeRfc1123), forKey: .updated)
    }
    if self.verificationCode != nil {try container.encode(self.verificationCode, forKey: .verificationCode)}
  }
}

extension DataFactory {
  public static func createCertificatePropertiesWithNonceProtocol() -> CertificatePropertiesWithNonceProtocol {
    return CertificatePropertiesWithNonceData()
  }
}
