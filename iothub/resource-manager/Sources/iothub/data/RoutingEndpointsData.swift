// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RoutingEndpointsData : RoutingEndpointsProtocol {
    public var serviceBusQueues: [RoutingServiceBusQueueEndpointPropertiesProtocol?]?
    public var serviceBusTopics: [RoutingServiceBusTopicEndpointPropertiesProtocol?]?
    public var eventHubs: [RoutingEventHubPropertiesProtocol?]?
    public var storageContainers: [RoutingStorageContainerPropertiesProtocol?]?

        enum CodingKeys: String, CodingKey {case serviceBusQueues = "serviceBusQueues"
        case serviceBusTopics = "serviceBusTopics"
        case eventHubs = "eventHubs"
        case storageContainers = "storageContainers"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.serviceBusQueues) {
        self.serviceBusQueues = try container.decode([RoutingServiceBusQueueEndpointPropertiesData?]?.self, forKey: .serviceBusQueues)
    }
    if container.contains(.serviceBusTopics) {
        self.serviceBusTopics = try container.decode([RoutingServiceBusTopicEndpointPropertiesData?]?.self, forKey: .serviceBusTopics)
    }
    if container.contains(.eventHubs) {
        self.eventHubs = try container.decode([RoutingEventHubPropertiesData?]?.self, forKey: .eventHubs)
    }
    if container.contains(.storageContainers) {
        self.storageContainers = try container.decode([RoutingStorageContainerPropertiesData?]?.self, forKey: .storageContainers)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.serviceBusQueues != nil {try container.encode(self.serviceBusQueues as! [RoutingServiceBusQueueEndpointPropertiesData?]?, forKey: .serviceBusQueues)}
    if self.serviceBusTopics != nil {try container.encode(self.serviceBusTopics as! [RoutingServiceBusTopicEndpointPropertiesData?]?, forKey: .serviceBusTopics)}
    if self.eventHubs != nil {try container.encode(self.eventHubs as! [RoutingEventHubPropertiesData?]?, forKey: .eventHubs)}
    if self.storageContainers != nil {try container.encode(self.storageContainers as! [RoutingStorageContainerPropertiesData?]?, forKey: .storageContainers)}
  }
}

extension DataFactory {
  public static func createRoutingEndpointsProtocol() -> RoutingEndpointsProtocol {
    return RoutingEndpointsData()
  }
}
