// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct EventHubPropertiesData : EventHubPropertiesProtocol {
    public var retentionTimeInDays: Int64?
    public var partitionCount: Int32?
    public var partitionIds: [String]?
    public var path: String?
    public var endpoint: String?

        enum CodingKeys: String, CodingKey {case retentionTimeInDays = "retentionTimeInDays"
        case partitionCount = "partitionCount"
        case partitionIds = "partitionIds"
        case path = "path"
        case endpoint = "endpoint"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.retentionTimeInDays) {
        self.retentionTimeInDays = try container.decode(Int64?.self, forKey: .retentionTimeInDays)
    }
    if container.contains(.partitionCount) {
        self.partitionCount = try container.decode(Int32?.self, forKey: .partitionCount)
    }
    if container.contains(.partitionIds) {
        self.partitionIds = try container.decode([String]?.self, forKey: .partitionIds)
    }
    if container.contains(.path) {
        self.path = try container.decode(String?.self, forKey: .path)
    }
    if container.contains(.endpoint) {
        self.endpoint = try container.decode(String?.self, forKey: .endpoint)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.retentionTimeInDays != nil {try container.encode(self.retentionTimeInDays, forKey: .retentionTimeInDays)}
    if self.partitionCount != nil {try container.encode(self.partitionCount, forKey: .partitionCount)}
    if self.partitionIds != nil {try container.encode(self.partitionIds as! [String]?, forKey: .partitionIds)}
    if self.path != nil {try container.encode(self.path, forKey: .path)}
    if self.endpoint != nil {try container.encode(self.endpoint, forKey: .endpoint)}
  }
}

extension DataFactory {
  public static func createEventHubPropertiesProtocol() -> EventHubPropertiesProtocol {
    return EventHubPropertiesData()
  }
}
