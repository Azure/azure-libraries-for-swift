// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct IotHubPropertiesData : IotHubPropertiesProtocol {
    public var authorizationPolicies: [SharedAccessSignatureAuthorizationRuleProtocol?]?
    public var ipFilterRules: [IpFilterRuleProtocol?]?
    public var provisioningState: String?
    public var hostName: String?
    public var eventHubEndpoints: [String:EventHubPropertiesProtocol?]?
    public var routing: RoutingPropertiesProtocol?
    public var storageEndpoints: [String:StorageEndpointPropertiesProtocol?]?
    public var messagingEndpoints: [String:MessagingEndpointPropertiesProtocol?]?
    public var enableFileUploadNotifications: Bool?
    public var cloudToDevice: CloudToDevicePropertiesProtocol?
    public var comments: String?
    public var operationsMonitoringProperties: OperationsMonitoringPropertiesProtocol?
    public var features: CapabilitiesEnum?

        enum CodingKeys: String, CodingKey {case authorizationPolicies = "authorizationPolicies"
        case ipFilterRules = "ipFilterRules"
        case provisioningState = "provisioningState"
        case hostName = "hostName"
        case eventHubEndpoints = "eventHubEndpoints"
        case routing = "routing"
        case storageEndpoints = "storageEndpoints"
        case messagingEndpoints = "messagingEndpoints"
        case enableFileUploadNotifications = "enableFileUploadNotifications"
        case cloudToDevice = "cloudToDevice"
        case comments = "comments"
        case operationsMonitoringProperties = "operationsMonitoringProperties"
        case features = "features"
        }

  public init()  {
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      if container.contains(.authorizationPolicies) {
        self.authorizationPolicies = try container.decode([SharedAccessSignatureAuthorizationRuleData?]?.self, forKey: .authorizationPolicies)
    }
    if container.contains(.ipFilterRules) {
        self.ipFilterRules = try container.decode([IpFilterRuleData?]?.self, forKey: .ipFilterRules)
    }
    if container.contains(.provisioningState) {
        self.provisioningState = try container.decode(String?.self, forKey: .provisioningState)
    }
    if container.contains(.hostName) {
        self.hostName = try container.decode(String?.self, forKey: .hostName)
    }
    if container.contains(.eventHubEndpoints) {
        self.eventHubEndpoints = try container.decode([String:EventHubPropertiesData?]?.self, forKey: .eventHubEndpoints)
    }
    if container.contains(.routing) {
        self.routing = try container.decode(RoutingPropertiesData?.self, forKey: .routing)
    }
    if container.contains(.storageEndpoints) {
        self.storageEndpoints = try container.decode([String:StorageEndpointPropertiesData?]?.self, forKey: .storageEndpoints)
    }
    if container.contains(.messagingEndpoints) {
        self.messagingEndpoints = try container.decode([String:MessagingEndpointPropertiesData?]?.self, forKey: .messagingEndpoints)
    }
    if container.contains(.enableFileUploadNotifications) {
        self.enableFileUploadNotifications = try container.decode(Bool?.self, forKey: .enableFileUploadNotifications)
    }
    if container.contains(.cloudToDevice) {
        self.cloudToDevice = try container.decode(CloudToDevicePropertiesData?.self, forKey: .cloudToDevice)
    }
    if container.contains(.comments) {
        self.comments = try container.decode(String?.self, forKey: .comments)
    }
    if container.contains(.operationsMonitoringProperties) {
        self.operationsMonitoringProperties = try container.decode(OperationsMonitoringPropertiesData?.self, forKey: .operationsMonitoringProperties)
    }
    if container.contains(.features) {
        self.features = try container.decode(CapabilitiesEnum?.self, forKey: .features)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    if self.authorizationPolicies != nil {try container.encode(self.authorizationPolicies as! [SharedAccessSignatureAuthorizationRuleData?]?, forKey: .authorizationPolicies)}
    if self.ipFilterRules != nil {try container.encode(self.ipFilterRules as! [IpFilterRuleData?]?, forKey: .ipFilterRules)}
    if self.provisioningState != nil {try container.encode(self.provisioningState, forKey: .provisioningState)}
    if self.hostName != nil {try container.encode(self.hostName, forKey: .hostName)}
    if self.eventHubEndpoints != nil {try container.encode(self.eventHubEndpoints, forKey: .eventHubEndpoints)}
    if self.routing != nil {try container.encode(self.routing as! RoutingPropertiesData?, forKey: .routing)}
    if self.storageEndpoints != nil {try container.encode(self.storageEndpoints, forKey: .storageEndpoints)}
    if self.messagingEndpoints != nil {try container.encode(self.messagingEndpoints, forKey: .messagingEndpoints)}
    if self.enableFileUploadNotifications != nil {try container.encode(self.enableFileUploadNotifications, forKey: .enableFileUploadNotifications)}
    if self.cloudToDevice != nil {try container.encode(self.cloudToDevice as! CloudToDevicePropertiesData?, forKey: .cloudToDevice)}
    if self.comments != nil {try container.encode(self.comments, forKey: .comments)}
    if self.operationsMonitoringProperties != nil {try container.encode(self.operationsMonitoringProperties as! OperationsMonitoringPropertiesData?, forKey: .operationsMonitoringProperties)}
    if self.features != nil {try container.encode(self.features, forKey: .features)}
  }
}

extension DataFactory {
  public static func createIotHubPropertiesProtocol() -> IotHubPropertiesProtocol {
    return IotHubPropertiesData()
  }
}
