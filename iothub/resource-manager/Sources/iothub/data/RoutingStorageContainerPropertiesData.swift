// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
import Foundation
import azureSwiftRuntime
internal struct RoutingStorageContainerPropertiesData : RoutingStorageContainerPropertiesProtocol {
    public var connectionString: String
    public var name: String
    public var subscriptionId: String?
    public var resourceGroup: String?
    public var containerName: String
    public var fileNameFormat: String?
    public var batchFrequencyInSeconds: Int32?
    public var maxChunkSizeInBytes: Int32?
    public var encoding: String?

        enum CodingKeys: String, CodingKey {case connectionString = "connectionString"
        case name = "name"
        case subscriptionId = "subscriptionId"
        case resourceGroup = "resourceGroup"
        case containerName = "containerName"
        case fileNameFormat = "fileNameFormat"
        case batchFrequencyInSeconds = "batchFrequencyInSeconds"
        case maxChunkSizeInBytes = "maxChunkSizeInBytes"
        case encoding = "encoding"
        }

  public init(connectionString: String, name: String, containerName: String)  {
    self.connectionString = connectionString
    self.name = name
    self.containerName = containerName
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
      self.connectionString = try container.decode(String.self, forKey: .connectionString)
    self.name = try container.decode(String.self, forKey: .name)
    if container.contains(.subscriptionId) {
        self.subscriptionId = try container.decode(String?.self, forKey: .subscriptionId)
    }
    if container.contains(.resourceGroup) {
        self.resourceGroup = try container.decode(String?.self, forKey: .resourceGroup)
    }
    self.containerName = try container.decode(String.self, forKey: .containerName)
    if container.contains(.fileNameFormat) {
        self.fileNameFormat = try container.decode(String?.self, forKey: .fileNameFormat)
    }
    if container.contains(.batchFrequencyInSeconds) {
        self.batchFrequencyInSeconds = try container.decode(Int32?.self, forKey: .batchFrequencyInSeconds)
    }
    if container.contains(.maxChunkSizeInBytes) {
        self.maxChunkSizeInBytes = try container.decode(Int32?.self, forKey: .maxChunkSizeInBytes)
    }
    if container.contains(.encoding) {
        self.encoding = try container.decode(String?.self, forKey: .encoding)
    }
    if var pageDecoder = decoder as? PageDecoder  {
      if pageDecoder.isPagedData,
        let nextLinkName = pageDecoder.nextLinkName {
          pageDecoder.nextLink = try UnknownCodingKey.decodeStringForKey(decoder: decoder, keyForDecode: nextLinkName)
      }
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(self.connectionString, forKey: .connectionString)
    try container.encode(self.name, forKey: .name)
    if self.subscriptionId != nil {try container.encode(self.subscriptionId, forKey: .subscriptionId)}
    if self.resourceGroup != nil {try container.encode(self.resourceGroup, forKey: .resourceGroup)}
    try container.encode(self.containerName, forKey: .containerName)
    if self.fileNameFormat != nil {try container.encode(self.fileNameFormat, forKey: .fileNameFormat)}
    if self.batchFrequencyInSeconds != nil {try container.encode(self.batchFrequencyInSeconds, forKey: .batchFrequencyInSeconds)}
    if self.maxChunkSizeInBytes != nil {try container.encode(self.maxChunkSizeInBytes, forKey: .maxChunkSizeInBytes)}
    if self.encoding != nil {try container.encode(self.encoding, forKey: .encoding)}
  }
}

extension DataFactory {
  public static func createRoutingStorageContainerPropertiesProtocol(connectionString: String, name: String, containerName: String) -> RoutingStorageContainerPropertiesProtocol {
    return RoutingStorageContainerPropertiesData(connectionString: connectionString, name: name, containerName: containerName)
  }
}
